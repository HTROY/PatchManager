//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/arall/PatchManager/src/PatchManager.SassyPatching/SassyPatchGrammar\sassy_parser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SassyPatchGrammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class sassy_parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, SPACE=2, USE=3, FUNCTION=4, PRE_IF=5, PRE_ELSE=6, PRE_ELSE_IF=7, 
		MIXIN=8, WHILE=9, FOR=10, FROM=11, THROUGH=12, TO=13, EACH=14, IN=15, 
		SET=16, MERGE=17, REQUIRE=18, STAGE=19, DEFINE_STAGE=20, INCLUDE=21, RETURN=22, 
		PATCH=23, NEW=24, BEFORE=25, AFTER=26, GLOBAL=27, CREATE_CONFIG=28, UPDATE_CONFIG=29, 
		LEFT_BRACE=30, RIGHT_BRACE=31, LEFT_PAREN=32, RIGHT_PAREN=33, LEFT_BRACKET=34, 
		RIGHT_BRACKET=35, SEMICOLON=36, COLON=37, PLUS_COLON=38, MINUS_COLON=39, 
		DIVIDE_COLON=40, MULTIPLY_COLON=41, COMMA=42, ADD=43, SUBTRACT=44, MULTIPLY=45, 
		DIVIDE=46, MODULUS=47, NOT=48, GREATER_THAN=49, GREATER_THAN_EQUAL=50, 
		LESSER_THAN=51, LESSER_THAN_EQUAL=52, EQUAL_TO=53, NOT_EQUAL_TO=54, AND=55, 
		OR=56, IF=57, ELSE=58, WITHOUT=59, NONE=60, TRUE=61, FALSE=62, HEX_NUMBER=63, 
		NUMBER=64, STRING=65, DELETE=66, NAME=67, STRING_NAME=68, CLASS=69, STRING_CLASS=70, 
		VARIABLE=71, LOCALVARIABLE=72, STRING_LOCALVARIABLE=73, RULESET=74, ENSURE=75, 
		STRING_ENSURE=76, ELEMENT=77;
	public const int
		RULE_patch = 0, RULE_top_level_statement = 1, RULE_patch_declaration = 2, 
		RULE_patch_list = 3, RULE_sassy_string = 4, RULE_import_declaration = 5, 
		RULE_var_decl = 6, RULE_stage_def = 7, RULE_config_creation = 8, RULE_config_mutation = 9, 
		RULE_stage_attribute = 10, RULE_function_def = 11, RULE_mixin_def = 12, 
		RULE_top_level_conditional = 13, RULE_top_level_else = 14, RULE_top_level_else_else = 15, 
		RULE_top_level_else_if = 16, RULE_selection_block = 17, RULE_attributed_selector = 18, 
		RULE_attribute = 19, RULE_constructor_arguments = 20, RULE_selector = 21, 
		RULE_selector_no_children = 22, RULE_selector_body = 23, RULE_selector_statement = 24, 
		RULE_sel_level_conditional = 25, RULE_sel_level_else = 26, RULE_sel_level_else_else = 27, 
		RULE_sel_level_else_if = 28, RULE_set_value = 29, RULE_delete_value = 30, 
		RULE_merge_value = 31, RULE_field_set = 32, RULE_index = 33, RULE_expression = 34, 
		RULE_value = 35, RULE_require_expression = 36, RULE_list = 37, RULE_list_values = 38, 
		RULE_obj = 39, RULE_obj_values = 40, RULE_key_value = 41, RULE_argument_list = 42, 
		RULE_argument = 43, RULE_arg_decl_list = 44, RULE_arg_decl = 45, RULE_function_body = 46, 
		RULE_function_statement = 47, RULE_fn_level_conditional = 48, RULE_fn_level_else = 49, 
		RULE_fn_level_else_else = 50, RULE_fn_level_else_if = 51, RULE_fn_return = 52, 
		RULE_mixin_include = 53, RULE_for_loop = 54, RULE_top_level_for_loop = 55, 
		RULE_sel_level_for_loop = 56, RULE_each_loop = 57, RULE_top_level_each_loop = 58, 
		RULE_sel_level_each_loop = 59, RULE_while_loop = 60, RULE_top_level_while_loop = 61, 
		RULE_sel_level_while_loop = 62;
	public static readonly string[] ruleNames = {
		"patch", "top_level_statement", "patch_declaration", "patch_list", "sassy_string", 
		"import_declaration", "var_decl", "stage_def", "config_creation", "config_mutation", 
		"stage_attribute", "function_def", "mixin_def", "top_level_conditional", 
		"top_level_else", "top_level_else_else", "top_level_else_if", "selection_block", 
		"attributed_selector", "attribute", "constructor_arguments", "selector", 
		"selector_no_children", "selector_body", "selector_statement", "sel_level_conditional", 
		"sel_level_else", "sel_level_else_else", "sel_level_else_if", "set_value", 
		"delete_value", "merge_value", "field_set", "index", "expression", "value", 
		"require_expression", "list", "list_values", "obj", "obj_values", "key_value", 
		"argument_list", "argument", "arg_decl_list", "arg_decl", "function_body", 
		"function_statement", "fn_level_conditional", "fn_level_else", "fn_level_else_else", 
		"fn_level_else_if", "fn_return", "mixin_include", "for_loop", "top_level_for_loop", 
		"sel_level_for_loop", "each_loop", "top_level_each_loop", "sel_level_each_loop", 
		"while_loop", "top_level_while_loop", "sel_level_while_loop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'@use'", "'@function'", "'@if'", "'@else'", "'@else-if'", 
		"'@mixin'", "'@while'", "'@for'", "'from'", "'through'", "'to'", "'@each'", 
		"'in'", "'@set'", "'@merge'", "'@require'", "'@stage'", "'@define-stage'", 
		"'@include'", "'@return'", "'@patch'", "'@new'", "'@before'", "'@after'", 
		"'@global'", "'@create-config'", "'@update-config'", "'{'", "'}'", "'('", 
		"')'", "'['", "']'", "';'", "':'", "'+:'", "'-:'", "'/:'", "'*:'", "','", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'not'", "'>'", "'>='", "'<'", "'<='", 
		"'=='", "'!='", "'and'", "'or'", "'if'", "'else'", "'~'", "'null'", "'true'", 
		"'false'", null, null, null, "'@delete'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "SPACE", "USE", "FUNCTION", "PRE_IF", "PRE_ELSE", "PRE_ELSE_IF", 
		"MIXIN", "WHILE", "FOR", "FROM", "THROUGH", "TO", "EACH", "IN", "SET", 
		"MERGE", "REQUIRE", "STAGE", "DEFINE_STAGE", "INCLUDE", "RETURN", "PATCH", 
		"NEW", "BEFORE", "AFTER", "GLOBAL", "CREATE_CONFIG", "UPDATE_CONFIG", 
		"LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", 
		"RIGHT_BRACKET", "SEMICOLON", "COLON", "PLUS_COLON", "MINUS_COLON", "DIVIDE_COLON", 
		"MULTIPLY_COLON", "COMMA", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", 
		"NOT", "GREATER_THAN", "GREATER_THAN_EQUAL", "LESSER_THAN", "LESSER_THAN_EQUAL", 
		"EQUAL_TO", "NOT_EQUAL_TO", "AND", "OR", "IF", "ELSE", "WITHOUT", "NONE", 
		"TRUE", "FALSE", "HEX_NUMBER", "NUMBER", "STRING", "DELETE", "NAME", "STRING_NAME", 
		"CLASS", "STRING_CLASS", "VARIABLE", "LOCALVARIABLE", "STRING_LOCALVARIABLE", 
		"RULESET", "ENSURE", "STRING_ENSURE", "ELEMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sassy_parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static sassy_parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sassy_parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sassy_parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(sassy_parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public PatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatchContext patch() {
		PatchContext _localctx = new PatchContext(Context, State);
		EnterRule(_localctx, 0, RULE_patch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 126;
				top_level_statement();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0) );
			State = 131;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_declarationContext import_declaration() {
			return GetRuleContext<Import_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_defContext stage_def() {
			return GetRuleContext<Stage_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_defContext mixin_def() {
			return GetRuleContext<Mixin_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_conditionalContext top_level_conditional() {
			return GetRuleContext<Top_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Patch_declarationContext patch_declaration() {
			return GetRuleContext<Patch_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_creationContext config_creation() {
			return GetRuleContext<Config_creationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_mutationContext config_mutation() {
			return GetRuleContext<Config_mutationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_for_loopContext top_level_for_loop() {
			return GetRuleContext<Top_level_for_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_each_loopContext top_level_each_loop() {
			return GetRuleContext<Top_level_each_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_while_loopContext top_level_while_loop() {
			return GetRuleContext<Top_level_while_loopContext>(0);
		}
		public Top_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementContext top_level_statement() {
		Top_level_statementContext _localctx = new Top_level_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_top_level_statement);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				import_declaration();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				var_decl();
				}
				break;
			case DEFINE_STAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135;
				stage_def();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 136;
				function_def();
				}
				break;
			case MIXIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 137;
				mixin_def();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 138;
				top_level_conditional();
				}
				break;
			case REQUIRE:
			case STAGE:
			case NEW:
			case LEFT_PAREN:
			case ADD:
			case MULTIPLY:
			case WITHOUT:
			case STRING:
			case NAME:
			case STRING_NAME:
			case CLASS:
			case STRING_CLASS:
			case RULESET:
			case ENSURE:
			case STRING_ENSURE:
			case ELEMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 139;
				selection_block();
				}
				break;
			case PATCH:
				EnterOuterAlt(_localctx, 8);
				{
				State = 140;
				patch_declaration();
				}
				break;
			case CREATE_CONFIG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 141;
				config_creation();
				}
				break;
			case UPDATE_CONFIG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 142;
				config_mutation();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 143;
				top_level_for_loop();
				}
				break;
			case EACH:
				EnterOuterAlt(_localctx, 12);
				{
				State = 144;
				top_level_each_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 145;
				top_level_while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Patch_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(sassy_parser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Patch_listContext patch_list() {
			return GetRuleContext<Patch_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Patch_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Patch_declarationContext patch_declaration() {
		Patch_declarationContext _localctx = new Patch_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_patch_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(PATCH);
			State = 149;
			patch_list();
			State = 150;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Patch_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext[] sassy_string() {
			return GetRuleContexts<Sassy_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string(int i) {
			return GetRuleContext<Sassy_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Patch_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Patch_listContext patch_list() {
		Patch_listContext _localctx = new Patch_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_patch_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			sassy_string();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 153;
				Match(COMMA);
				State = 154;
				sassy_string();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sassy_stringContext : ParserRuleContext {
		public Sassy_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sassy_string; } }
	 
		public Sassy_stringContext() { }
		public virtual void CopyFrom(Sassy_stringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Quoted_stringContext : Sassy_stringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Quoted_stringContext(Sassy_stringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterQuoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitQuoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoted_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unquoted_stringContext : Sassy_stringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Unquoted_stringContext(Sassy_stringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUnquoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUnquoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquoted_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sassy_stringContext sassy_string() {
		Sassy_stringContext _localctx = new Sassy_stringContext(Context, State);
		EnterRule(_localctx, 8, RULE_sassy_string);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new Quoted_stringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				Match(STRING);
				}
				break;
			case ELEMENT:
				_localctx = new Unquoted_stringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				Match(ELEMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_declarationContext : ParserRuleContext {
		public Sassy_stringContext imp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(sassy_parser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Import_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_declarationContext import_declaration() {
		Import_declarationContext _localctx = new Import_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_import_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(USE);
			State = 165;
			_localctx.imp = sassy_string();
			State = 166;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
	 
		public Var_declContext() { }
		public virtual void CopyFrom(Var_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Add_var_declContext : Var_declContext {
		public IToken variable;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(sassy_parser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Add_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_var_declContext : Var_declContext {
		public IToken variable;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_COLON() { return GetToken(sassy_parser.DIVIDE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Divide_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivide_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivide_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_var_declContext : Var_declContext {
		public IToken variable;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_COLON() { return GetToken(sassy_parser.MULTIPLY_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Multiply_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiply_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiply_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Normal_var_declContext : Var_declContext {
		public IToken variable;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Normal_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNormal_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNormal_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtract_var_declContext : Var_declContext {
		public IToken variable;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(sassy_parser.MINUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Subtract_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtract_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtract_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 12, RULE_var_decl);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new Normal_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				((Normal_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 169;
				Match(COLON);
				State = 170;
				((Normal_var_declContext)_localctx).val = expression(0);
				State = 171;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Add_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				((Add_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 174;
				Match(PLUS_COLON);
				State = 175;
				((Add_var_declContext)_localctx).val = expression(0);
				State = 176;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new Subtract_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 178;
				((Subtract_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 179;
				Match(MINUS_COLON);
				State = 180;
				((Subtract_var_declContext)_localctx).val = expression(0);
				State = 181;
				Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new Divide_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				((Divide_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 184;
				Match(DIVIDE_COLON);
				State = 185;
				((Divide_var_declContext)_localctx).val = expression(0);
				State = 186;
				Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new Multiply_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 188;
				((Multiply_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 189;
				Match(MULTIPLY_COLON);
				State = 190;
				((Multiply_var_declContext)_localctx).val = expression(0);
				State = 191;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_defContext : ParserRuleContext {
		public Stage_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_def; } }
	 
		public Stage_defContext() { }
		public virtual void CopyFrom(Stage_defContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Implicit_stage_defContext : Stage_defContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Implicit_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Relative_stage_defContext : Stage_defContext {
		public Sassy_stringContext stage;
		public Stage_attributeContext attributes;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_attributeContext[] stage_attribute() {
			return GetRuleContexts<Stage_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_attributeContext stage_attribute(int i) {
			return GetRuleContext<Stage_attributeContext>(i);
		}
		public Relative_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRelative_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRelative_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelative_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Global_stage_defContext : Stage_defContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(sassy_parser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Global_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGlobal_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGlobal_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_defContext stage_def() {
		Stage_defContext _localctx = new Stage_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_stage_def);
		int _la;
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new Implicit_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				Match(DEFINE_STAGE);
				State = 196;
				((Implicit_stage_defContext)_localctx).stage = sassy_string();
				State = 197;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Global_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				Match(DEFINE_STAGE);
				State = 200;
				((Global_stage_defContext)_localctx).stage = sassy_string();
				State = 201;
				Match(COLON);
				State = 202;
				Match(GLOBAL);
				State = 203;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new Relative_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 205;
				Match(DEFINE_STAGE);
				State = 206;
				((Relative_stage_defContext)_localctx).stage = sassy_string();
				State = 207;
				Match(COLON);
				State = 208;
				Match(LEFT_BRACE);
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BEFORE || _la==AFTER) {
					{
					{
					State = 209;
					((Relative_stage_defContext)_localctx).attributes = stage_attribute();
					}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 215;
				Match(RIGHT_BRACE);
				State = 216;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_creationContext : ParserRuleContext {
		public Sassy_stringContext label;
		public Sassy_stringContext config_name;
		public ExpressionContext config_value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_CONFIG() { return GetToken(sassy_parser.CREATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext[] sassy_string() {
			return GetRuleContexts<Sassy_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string(int i) {
			return GetRuleContext<Sassy_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Config_creationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_creation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterConfig_creation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitConfig_creation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfig_creation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Config_creationContext config_creation() {
		Config_creationContext _localctx = new Config_creationContext(Context, State);
		EnterRule(_localctx, 16, RULE_config_creation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(CREATE_CONFIG);
			State = 221;
			_localctx.label = sassy_string();
			State = 222;
			Match(COMMA);
			State = 223;
			_localctx.config_name = sassy_string();
			State = 224;
			Match(COLON);
			State = 225;
			_localctx.config_value = expression(0);
			State = 226;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_mutationContext : ParserRuleContext {
		public Config_mutationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_mutation; } }
	 
		public Config_mutationContext() { }
		public virtual void CopyFrom(Config_mutationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Update_config_labelContext : Config_mutationContext {
		public ExpressionContext priority;
		public Sassy_stringContext label;
		public ExpressionContext config_update;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_CONFIG() { return GetToken(sassy_parser.UPDATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Update_config_labelContext(Config_mutationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUpdate_config_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUpdate_config_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_config_label(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Update_config_fullContext : Config_mutationContext {
		public ExpressionContext priority;
		public Sassy_stringContext label;
		public Sassy_stringContext config_name;
		public ExpressionContext config_update;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_CONFIG() { return GetToken(sassy_parser.UPDATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext[] sassy_string() {
			return GetRuleContexts<Sassy_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string(int i) {
			return GetRuleContext<Sassy_stringContext>(i);
		}
		public Update_config_fullContext(Config_mutationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUpdate_config_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUpdate_config_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_config_full(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Config_mutationContext config_mutation() {
		Config_mutationContext _localctx = new Config_mutationContext(Context, State);
		EnterRule(_localctx, 18, RULE_config_mutation);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new Update_config_fullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				Match(UPDATE_CONFIG);
				State = 229;
				((Update_config_fullContext)_localctx).priority = expression(0);
				State = 230;
				Match(COMMA);
				State = 231;
				((Update_config_fullContext)_localctx).label = sassy_string();
				State = 232;
				Match(COMMA);
				State = 233;
				((Update_config_fullContext)_localctx).config_name = sassy_string();
				State = 234;
				Match(COLON);
				State = 235;
				((Update_config_fullContext)_localctx).config_update = expression(0);
				State = 236;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Update_config_labelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				Match(UPDATE_CONFIG);
				State = 239;
				((Update_config_labelContext)_localctx).priority = expression(0);
				State = 240;
				Match(COMMA);
				State = 241;
				((Update_config_labelContext)_localctx).label = sassy_string();
				State = 242;
				Match(COLON);
				State = 243;
				((Update_config_labelContext)_localctx).config_update = expression(0);
				State = 244;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_attributeContext : ParserRuleContext {
		public Stage_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_attribute; } }
	 
		public Stage_attributeContext() { }
		public virtual void CopyFrom(Stage_attributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Stage_value_beforeContext : Stage_attributeContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(sassy_parser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Stage_value_beforeContext(Stage_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterStage_value_before(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitStage_value_before(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_value_before(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stage_value_afterContext : Stage_attributeContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(sassy_parser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Stage_value_afterContext(Stage_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterStage_value_after(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitStage_value_after(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_value_after(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_attributeContext stage_attribute() {
		Stage_attributeContext _localctx = new Stage_attributeContext(Context, State);
		EnterRule(_localctx, 20, RULE_stage_attribute);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				_localctx = new Stage_value_beforeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 248;
				Match(BEFORE);
				State = 249;
				((Stage_value_beforeContext)_localctx).stage = sassy_string();
				State = 250;
				Match(SEMICOLON);
				}
				break;
			case AFTER:
				_localctx = new Stage_value_afterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				Match(AFTER);
				State = 253;
				((Stage_value_afterContext)_localctx).stage = sassy_string();
				State = 254;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(FUNCTION);
			State = 259;
			_localctx.name = Match(ELEMENT);
			State = 260;
			Match(LEFT_PAREN);
			State = 261;
			_localctx.args = arg_decl_list();
			State = 262;
			Match(RIGHT_PAREN);
			State = 263;
			Match(LEFT_BRACE);
			State = 264;
			_localctx.body = function_body();
			State = 265;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Selector_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIXIN() { return GetToken(sassy_parser.MIXIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		public Mixin_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_defContext mixin_def() {
		Mixin_defContext _localctx = new Mixin_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_mixin_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(MIXIN);
			State = 268;
			_localctx.name = Match(ELEMENT);
			State = 269;
			Match(LEFT_PAREN);
			State = 270;
			_localctx.args = arg_decl_list();
			State = 271;
			Match(RIGHT_PAREN);
			State = 272;
			Match(LEFT_BRACE);
			State = 273;
			_localctx.body = selector_body();
			State = 274;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_conditionalContext : ParserRuleContext {
		public ExpressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_conditionalContext top_level_conditional() {
		Top_level_conditionalContext _localctx = new Top_level_conditionalContext(Context, State);
		EnterRule(_localctx, 26, RULE_top_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(PRE_IF);
			State = 277;
			_localctx.cond = expression(0);
			State = 278;
			Match(LEFT_BRACE);
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 279;
				_localctx.body = top_level_statement();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 285;
			Match(RIGHT_BRACE);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 286;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_elseContext top_level_else_else() {
			return GetRuleContext<Top_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_ifContext top_level_else_if() {
			return GetRuleContext<Top_level_else_ifContext>(0);
		}
		public Top_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_elseContext top_level_else() {
		Top_level_elseContext _localctx = new Top_level_elseContext(Context, State);
		EnterRule(_localctx, 28, RULE_top_level_else);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				top_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				top_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_elseContext : ParserRuleContext {
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_elseContext top_level_else_else() {
		Top_level_else_elseContext _localctx = new Top_level_else_elseContext(Context, State);
		EnterRule(_localctx, 30, RULE_top_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(PRE_ELSE);
			State = 294;
			Match(LEFT_BRACE);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 295;
				_localctx.body = top_level_statement();
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 301;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_ifContext : ParserRuleContext {
		public ExpressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_ifContext top_level_else_if() {
		Top_level_else_ifContext _localctx = new Top_level_else_ifContext(Context, State);
		EnterRule(_localctx, 32, RULE_top_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(PRE_ELSE_IF);
			State = 304;
			_localctx.cond = expression(0);
			State = 305;
			Match(LEFT_BRACE);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 306;
				_localctx.body = top_level_statement();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 312;
			Match(RIGHT_BRACE);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 313;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attributed_selectorContext attributed_selector() {
			return GetRuleContext<Attributed_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		public Selection_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_blockContext selection_block() {
		Selection_blockContext _localctx = new Selection_blockContext(Context, State);
		EnterRule(_localctx, 34, RULE_selection_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			attributed_selector();
			State = 317;
			Match(LEFT_BRACE);
			State = 318;
			selector_body();
			State = 319;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attributed_selectorContext : ParserRuleContext {
		public AttributeContext attributes;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributed_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_selector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attributed_selectorContext attributed_selector() {
		Attributed_selectorContext _localctx = new Attributed_selectorContext(Context, State);
		EnterRule(_localctx, 36, RULE_attributed_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17563648L) != 0)) {
				{
				{
				State = 321;
				_localctx.attributes = attribute();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 327;
			selector(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	 
		public AttributeContext() { }
		public virtual void CopyFrom(AttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Run_at_stageContext : AttributeContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAGE() { return GetToken(sassy_parser.STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Run_at_stageContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRun_at_stage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_modContext : AttributeContext {
		public Require_expressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(sassy_parser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_modContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_mod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class New_assetContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(sassy_parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_argumentsContext constructor_arguments() {
			return GetRuleContext<Constructor_argumentsContext>(0);
		}
		public New_assetContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNew_asset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNew_asset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_asset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 38, RULE_attribute);
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE:
				_localctx = new Require_modContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				Match(REQUIRE);
				State = 330;
				((Require_modContext)_localctx).expr = require_expression(0);
				}
				break;
			case STAGE:
				_localctx = new Run_at_stageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				Match(STAGE);
				State = 332;
				((Run_at_stageContext)_localctx).stage = sassy_string();
				}
				break;
			case NEW:
				_localctx = new New_assetContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 333;
				Match(NEW);
				State = 334;
				constructor_arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Constructor_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterConstructor_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitConstructor_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_argumentsContext constructor_arguments() {
		Constructor_argumentsContext _localctx = new Constructor_argumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_constructor_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(LEFT_PAREN);
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070758418052284432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9095L) != 0)) {
				{
				State = 338;
				expression(0);
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 339;
					Match(COMMA);
					State = 340;
					expression(0);
					}
					}
					State = 345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 348;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sel_class_captureContext : SelectorContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Sel_class_captureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_class_capture(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_childContext : SelectorContext {
		public SelectorContext parent;
		public Selector_no_childrenContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_childContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_child(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_classContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_nameContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_intersectionContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_intersectionContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_intersection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_string_class_captureContext : SelectorContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Sel_string_class_captureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_string_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_string_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_string_class_capture(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_ensureContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENSURE() { return GetToken(sassy_parser.ENSURE, 0); }
		public Sel_ensureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_ensure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_everythingContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public Sel_everythingContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_everything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_string_classContext : SelectorContext {
		public IToken str_field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		public Sel_without_string_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_string_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_string_classContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		public Sel_string_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_string_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_string_nameContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(sassy_parser.STRING_NAME, 0); }
		public Sel_string_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_string_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_elementContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_rulesetContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Sel_rulesetContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_add_elementContext : SelectorContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_add_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_add_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_element_stringContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Sel_element_stringContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_element_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_element_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_element_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_add_string_elementContext : SelectorContext {
		public IToken str_element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Sel_add_string_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_add_string_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_add_string_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_add_string_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_string_nameContext : SelectorContext {
		public IToken str_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(sassy_parser.STRING_NAME, 0); }
		public Sel_without_string_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_string_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_classContext : SelectorContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_without_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_string_ensureContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_ENSURE() { return GetToken(sassy_parser.STRING_ENSURE, 0); }
		public Sel_string_ensureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_string_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_string_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_string_ensure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_nameContext : SelectorContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_without_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_combinationContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_combinationContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_combination(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_subContext : SelectorContext {
		public SelectorContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Sel_subContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		return selector(0);
	}

	private SelectorContext selector(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectorContext _localctx = new SelectorContext(Context, _parentState);
		SelectorContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_selector, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				_localctx = new Sel_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 351;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new Sel_element_stringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 352;
				Match(STRING);
				}
				break;
			case 3:
				{
				_localctx = new Sel_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 353;
				Match(CLASS);
				}
				break;
			case 4:
				{
				_localctx = new Sel_string_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 354;
				Match(STRING_CLASS);
				}
				break;
			case 5:
				{
				_localctx = new Sel_class_captureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 355;
				Match(CLASS);
				State = 356;
				Match(COLON);
				State = 357;
				Match(LEFT_BRACKET);
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 358;
					((Sel_class_captureContext)_localctx).body = function_statement();
					}
					}
					State = 363;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 364;
				Match(RIGHT_BRACKET);
				}
				break;
			case 6:
				{
				_localctx = new Sel_string_class_captureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 365;
				Match(STRING_CLASS);
				State = 366;
				Match(COLON);
				State = 367;
				Match(LEFT_BRACKET);
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 368;
					((Sel_string_class_captureContext)_localctx).body = function_statement();
					}
					}
					State = 373;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 374;
				Match(RIGHT_BRACKET);
				}
				break;
			case 7:
				{
				_localctx = new Sel_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 375;
				Match(NAME);
				}
				break;
			case 8:
				{
				_localctx = new Sel_string_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				Match(STRING_NAME);
				}
				break;
			case 9:
				{
				_localctx = new Sel_rulesetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 377;
				Match(RULESET);
				}
				break;
			case 10:
				{
				_localctx = new Sel_ensureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 378;
				Match(ENSURE);
				}
				break;
			case 11:
				{
				_localctx = new Sel_string_ensureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 379;
				Match(STRING_ENSURE);
				}
				break;
			case 12:
				{
				_localctx = new Sel_subContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 380;
				Match(LEFT_PAREN);
				State = 381;
				((Sel_subContext)_localctx).internal_selector = selector(0);
				State = 382;
				Match(RIGHT_PAREN);
				}
				break;
			case 13:
				{
				_localctx = new Sel_add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 384;
				Match(ADD);
				State = 385;
				((Sel_add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 14:
				{
				_localctx = new Sel_add_string_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 386;
				Match(ADD);
				State = 387;
				((Sel_add_string_elementContext)_localctx).str_element = Match(STRING);
				}
				break;
			case 15:
				{
				_localctx = new Sel_without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 388;
				Match(WITHOUT);
				State = 389;
				((Sel_without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 16:
				{
				_localctx = new Sel_without_string_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 390;
				Match(WITHOUT);
				State = 391;
				((Sel_without_string_classContext)_localctx).str_field = Match(STRING_CLASS);
				}
				break;
			case 17:
				{
				_localctx = new Sel_without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				Match(WITHOUT);
				State = 393;
				((Sel_without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 18:
				{
				_localctx = new Sel_without_string_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394;
				Match(WITHOUT);
				State = 395;
				((Sel_without_string_nameContext)_localctx).str_name = Match(STRING_NAME);
				}
				break;
			case 19:
				{
				_localctx = new Sel_everythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 396;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 409;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 407;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new Sel_combinationContext(new SelectorContext(_parentctx, _parentState));
						((Sel_combinationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 399;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 400;
						Match(COMMA);
						State = 401;
						((Sel_combinationContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					case 2:
						{
						_localctx = new Sel_childContext(new SelectorContext(_parentctx, _parentState));
						((Sel_childContext)_localctx).parent = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 402;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 403;
						Match(GREATER_THAN);
						State = 404;
						((Sel_childContext)_localctx).child = selector_no_children(0);
						}
						break;
					case 3:
						{
						_localctx = new Sel_intersectionContext(new SelectorContext(_parentctx, _parentState));
						((Sel_intersectionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 405;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 406;
						((Sel_intersectionContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					}
					} 
				}
				State = 411;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_no_childrenContext : ParserRuleContext {
		public Selector_no_childrenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_no_children; } }
	 
		public Selector_no_childrenContext() { }
		public virtual void CopyFrom(Selector_no_childrenContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ruleset_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Ruleset_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_class_capture_selectorContext : Selector_no_childrenContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public String_class_capture_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_class_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_class_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_class_capture_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_string_nameContext : Selector_no_childrenContext {
		public IToken str_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(sassy_parser.STRING_NAME, 0); }
		public Without_string_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_string_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sub_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_classContext : Selector_no_childrenContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Without_classContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_nameContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(sassy_parser.STRING_NAME, 0); }
		public String_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_class_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		public String_class_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_class_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_class_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_class_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_string_elementContext : Selector_no_childrenContext {
		public IToken str_element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Add_string_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_string_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_string_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_string_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Combination_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Combination_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombination_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_capture_selectorContext : Selector_no_childrenContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Class_capture_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_capture_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_nameContext : Selector_no_childrenContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Without_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public NameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_elementContext : Selector_no_childrenContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Add_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_string_classContext : Selector_no_childrenContext {
		public IToken str_field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		public Without_string_classContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_string_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EverythingContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public EverythingContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEverything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Intersection_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Intersection_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersection_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_elementContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public ElementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_no_childrenContext selector_no_children() {
		return selector_no_children(0);
	}

	private Selector_no_childrenContext selector_no_children(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Selector_no_childrenContext _localctx = new Selector_no_childrenContext(Context, _parentState);
		Selector_no_childrenContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_selector_no_children, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				_localctx = new ElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 413;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new String_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 414;
				Match(STRING);
				}
				break;
			case 3:
				{
				_localctx = new Class_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 415;
				Match(CLASS);
				}
				break;
			case 4:
				{
				_localctx = new String_class_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 416;
				Match(STRING_CLASS);
				}
				break;
			case 5:
				{
				_localctx = new Class_capture_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 417;
				Match(CLASS);
				State = 418;
				Match(COLON);
				State = 419;
				Match(LEFT_BRACKET);
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 420;
					((Class_capture_selectorContext)_localctx).body = function_statement();
					}
					}
					State = 425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 426;
				Match(RIGHT_BRACKET);
				}
				break;
			case 6:
				{
				_localctx = new String_class_capture_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 427;
				Match(STRING_CLASS);
				State = 428;
				Match(COLON);
				State = 429;
				Match(LEFT_BRACKET);
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 430;
					((String_class_capture_selectorContext)_localctx).body = function_statement();
					}
					}
					State = 435;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 436;
				Match(RIGHT_BRACKET);
				}
				break;
			case 7:
				{
				_localctx = new NameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 437;
				Match(NAME);
				}
				break;
			case 8:
				{
				_localctx = new String_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 438;
				Match(STRING_NAME);
				}
				break;
			case 9:
				{
				_localctx = new Ruleset_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 439;
				Match(RULESET);
				}
				break;
			case 10:
				{
				_localctx = new Sub_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 440;
				Match(LEFT_PAREN);
				State = 441;
				((Sub_selectorContext)_localctx).internal_selector = selector_no_children(0);
				State = 442;
				Match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new Add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 444;
				Match(ADD);
				State = 445;
				((Add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 12:
				{
				_localctx = new Add_string_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 446;
				Match(ADD);
				State = 447;
				((Add_string_elementContext)_localctx).str_element = Match(STRING);
				}
				break;
			case 13:
				{
				_localctx = new Without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 448;
				Match(WITHOUT);
				State = 449;
				((Without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 14:
				{
				_localctx = new Without_string_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 450;
				Match(WITHOUT);
				State = 451;
				((Without_string_classContext)_localctx).str_field = Match(STRING_CLASS);
				}
				break;
			case 15:
				{
				_localctx = new Without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 452;
				Match(WITHOUT);
				State = 453;
				((Without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 16:
				{
				_localctx = new Without_string_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 454;
				Match(WITHOUT);
				State = 455;
				((Without_string_nameContext)_localctx).str_name = Match(STRING_NAME);
				}
				break;
			case 17:
				{
				_localctx = new EverythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 456;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 466;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 464;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new Combination_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Combination_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 459;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 460;
						Match(COMMA);
						State = 461;
						((Combination_selectorContext)_localctx).rhs = selector_no_children(10);
						}
						break;
					case 2:
						{
						_localctx = new Intersection_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Intersection_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 462;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 463;
						((Intersection_selectorContext)_localctx).rhs = selector_no_children(9);
						}
						break;
					}
					} 
				}
				State = 468;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Selector_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_bodyContext selector_body() {
		Selector_bodyContext _localctx = new Selector_bodyContext(Context, State);
		EnterRule(_localctx, 46, RULE_selector_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 469;
				selector_statement();
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_conditionalContext sel_level_conditional() {
			return GetRuleContext<Sel_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_each_loopContext sel_level_each_loop() {
			return GetRuleContext<Sel_level_each_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_while_loopContext sel_level_while_loop() {
			return GetRuleContext<Sel_level_while_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_for_loopContext sel_level_for_loop() {
			return GetRuleContext<Sel_level_for_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_valueContext set_value() {
			return GetRuleContext<Set_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_valueContext delete_value() {
			return GetRuleContext<Delete_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_valueContext merge_value() {
			return GetRuleContext<Merge_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_setContext field_set() {
			return GetRuleContext<Field_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_includeContext mixin_include() {
			return GetRuleContext<Mixin_includeContext>(0);
		}
		public Selector_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_statementContext selector_statement() {
		Selector_statementContext _localctx = new Selector_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_selector_statement);
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				var_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				sel_level_conditional();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				sel_level_each_loop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 478;
				sel_level_while_loop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 479;
				sel_level_for_loop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 480;
				set_value();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 481;
				delete_value();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 482;
				merge_value();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 483;
				field_set();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 484;
				selection_block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 485;
				mixin_include();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_conditionalContext : ParserRuleContext {
		public ExpressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_conditionalContext sel_level_conditional() {
		Sel_level_conditionalContext _localctx = new Sel_level_conditionalContext(Context, State);
		EnterRule(_localctx, 50, RULE_sel_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(PRE_IF);
			State = 489;
			_localctx.cond = expression(0);
			State = 490;
			Match(LEFT_BRACE);
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 491;
				_localctx.body = selector_statement();
				}
				}
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 497;
			Match(RIGHT_BRACE);
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 498;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_elseContext sel_level_else_else() {
			return GetRuleContext<Sel_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_ifContext sel_level_else_if() {
			return GetRuleContext<Sel_level_else_ifContext>(0);
		}
		public Sel_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_elseContext sel_level_else() {
		Sel_level_elseContext _localctx = new Sel_level_elseContext(Context, State);
		EnterRule(_localctx, 52, RULE_sel_level_else);
		try {
			State = 503;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				sel_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 502;
				sel_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_elseContext : ParserRuleContext {
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_elseContext sel_level_else_else() {
		Sel_level_else_elseContext _localctx = new Sel_level_else_elseContext(Context, State);
		EnterRule(_localctx, 54, RULE_sel_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			Match(PRE_ELSE);
			State = 506;
			Match(LEFT_BRACE);
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 507;
				_localctx.body = selector_statement();
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 513;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_ifContext : ParserRuleContext {
		public ExpressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_ifContext sel_level_else_if() {
		Sel_level_else_ifContext _localctx = new Sel_level_else_ifContext(Context, State);
		EnterRule(_localctx, 56, RULE_sel_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(PRE_ELSE_IF);
			State = 516;
			_localctx.cond = expression(0);
			State = 517;
			Match(LEFT_BRACE);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 518;
				_localctx.body = selector_statement();
				}
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 524;
			Match(RIGHT_BRACE);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 525;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_valueContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(sassy_parser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Set_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_valueContext set_value() {
		Set_valueContext _localctx = new Set_valueContext(Context, State);
		EnterRule(_localctx, 58, RULE_set_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(SET);
			State = 529;
			_localctx.expr = expression(0);
			State = 530;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Delete_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_valueContext delete_value() {
		Delete_valueContext _localctx = new Delete_valueContext(Context, State);
		EnterRule(_localctx, 60, RULE_delete_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(DELETE);
			State = 533;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_valueContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(sassy_parser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Merge_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_valueContext merge_value() {
		Merge_valueContext _localctx = new Merge_valueContext(Context, State);
		EnterRule(_localctx, 62, RULE_merge_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(MERGE);
			State = 536;
			_localctx.expr = expression(0);
			State = 537;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_setContext : ParserRuleContext {
		public Field_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_set; } }
	 
		public Field_setContext() { }
		public virtual void CopyFrom(Field_setContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Add_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(sassy_parser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public Add_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_COLON() { return GetToken(sassy_parser.DIVIDE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public Divide_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivide_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivide_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtract_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(sassy_parser.MINUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public Subtract_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtract_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtract_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_COLON() { return GetToken(sassy_parser.MULTIPLY_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public Multiply_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiply_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiply_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Normal_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public Normal_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNormal_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNormal_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_setContext field_set() {
		Field_setContext _localctx = new Field_setContext(Context, State);
		EnterRule(_localctx, 64, RULE_field_set);
		int _la;
		try {
			State = 579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				_localctx = new Normal_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				sassy_string();
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 540;
					((Normal_field_setContext)_localctx).indexor = index();
					}
				}

				State = 543;
				Match(COLON);
				State = 544;
				((Normal_field_setContext)_localctx).expr = expression(0);
				State = 545;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Add_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 547;
				sassy_string();
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 548;
					((Add_field_setContext)_localctx).indexor = index();
					}
				}

				State = 551;
				Match(PLUS_COLON);
				State = 552;
				((Add_field_setContext)_localctx).expr = expression(0);
				State = 553;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new Subtract_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 555;
				sassy_string();
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 556;
					((Subtract_field_setContext)_localctx).indexor = index();
					}
				}

				State = 559;
				Match(MINUS_COLON);
				State = 560;
				((Subtract_field_setContext)_localctx).expr = expression(0);
				State = 561;
				Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new Multiply_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 563;
				sassy_string();
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 564;
					((Multiply_field_setContext)_localctx).indexor = index();
					}
				}

				State = 567;
				Match(MULTIPLY_COLON);
				State = 568;
				((Multiply_field_setContext)_localctx).expr = expression(0);
				State = 569;
				Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new Divide_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 571;
				sassy_string();
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 572;
					((Divide_field_setContext)_localctx).indexor = index();
					}
				}

				State = 575;
				Match(DIVIDE_COLON);
				State = 576;
				((Divide_field_setContext)_localctx).expr = expression(0);
				State = 577;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
	 
		public IndexContext() { }
		public virtual void CopyFrom(IndexContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_indexorContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_indexorContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Element_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_indexorContext : IndexContext {
		public IToken num;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_indexorContext : IndexContext {
		public IToken clazz;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 66, RULE_index);
		try {
			State = 593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new Number_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				Match(LEFT_BRACKET);
				State = 582;
				((Number_indexorContext)_localctx).num = Match(NUMBER);
				State = 583;
				Match(RIGHT_BRACKET);
				}
				break;
			case 2:
				_localctx = new Element_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				Match(LEFT_BRACKET);
				State = 585;
				((Element_indexorContext)_localctx).elem = Match(ELEMENT);
				State = 586;
				Match(RIGHT_BRACKET);
				}
				break;
			case 3:
				_localctx = new Class_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 587;
				Match(LEFT_BRACKET);
				State = 588;
				((Class_indexorContext)_localctx).clazz = Match(CLASS);
				State = 589;
				Match(RIGHT_BRACKET);
				}
				break;
			case 4:
				_localctx = new String_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 590;
				Match(LEFT_BRACKET);
				State = 591;
				((String_indexorContext)_localctx).elem = Match(STRING);
				State = 592;
				Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Not_equal_toContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_TO() { return GetToken(sassy_parser.NOT_EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Not_equal_toContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_equal_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Variable_referenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Variable_referenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equal_toContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_TO() { return GetToken(sassy_parser.EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Equal_toContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_variable_referenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALVARIABLE() { return GetToken(sassy_parser.LOCALVARIABLE, 0); }
		public Local_variable_referenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_call_rulesetContext : ExpressionContext {
		public ExpressionContext lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_call_rulesetContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_referenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Value_referenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(sassy_parser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivisionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeContext : ExpressionContext {
		public ExpressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExpressionContext {
		public ExpressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(sassy_parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_thanContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN() { return GetToken(sassy_parser.LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Lesser_thanContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_callContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken name;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_callContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_thanContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Greater_thanContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sassy_parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_sub_expressionContext : ExpressionContext {
		public ExpressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Sub_sub_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_sub_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_than_equalContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_EQUAL() { return GetToken(sassy_parser.GREATER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Greater_than_equalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexorContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(sassy_parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_than_equalContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN_EQUAL() { return GetToken(sassy_parser.LESSER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Lesser_than_equalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositiveContext : ExpressionContext {
		public ExpressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositiveContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_callContext : ExpressionContext {
		public IToken lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Simple_callContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_local_variable_referenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LOCALVARIABLE() { return GetToken(sassy_parser.STRING_LOCALVARIABLE, 0); }
		public String_local_variable_referenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_local_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_local_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_local_variable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RemainderContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULUS() { return GetToken(sassy_parser.MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RemainderContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext cond;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(sassy_parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(sassy_parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				_localctx = new Simple_callContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 596;
				((Simple_callContext)_localctx).lhs = Match(ELEMENT);
				State = 597;
				Match(LEFT_PAREN);
				State = 598;
				((Simple_callContext)_localctx).args = argument_list();
				State = 599;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new Value_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 601;
				value();
				}
				break;
			case 3:
				{
				_localctx = new Variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 602;
				Match(VARIABLE);
				}
				break;
			case 4:
				{
				_localctx = new Local_variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 603;
				Match(LOCALVARIABLE);
				}
				break;
			case 5:
				{
				_localctx = new String_local_variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 604;
				Match(STRING_LOCALVARIABLE);
				}
				break;
			case 6:
				{
				_localctx = new Sub_sub_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 605;
				Match(LEFT_PAREN);
				State = 606;
				((Sub_sub_expressionContext)_localctx).internal_expr = expression(0);
				State = 607;
				Match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new NegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 609;
				Match(SUBTRACT);
				State = 610;
				((NegativeContext)_localctx).child = expression(20);
				}
				break;
			case 8:
				{
				_localctx = new PositiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 611;
				Match(ADD);
				State = 612;
				((PositiveContext)_localctx).child = expression(19);
				}
				break;
			case 9:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 613;
				Match(NOT);
				State = 614;
				((NotContext)_localctx).child = expression(18);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 682;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 680;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 617;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 618;
						Match(MULTIPLY);
						State = 619;
						((MultiplicationContext)_localctx).rhs = expression(15);
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new ExpressionContext(_parentctx, _parentState));
						((DivisionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 620;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 621;
						Match(DIVIDE);
						State = 622;
						((DivisionContext)_localctx).rhs = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RemainderContext(new ExpressionContext(_parentctx, _parentState));
						((RemainderContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 623;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 624;
						Match(MODULUS);
						State = 625;
						((RemainderContext)_localctx).rhs = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new AdditionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 626;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 627;
						Match(ADD);
						State = 628;
						((AdditionContext)_localctx).rhs = expression(12);
						}
						break;
					case 5:
						{
						_localctx = new SubtractionContext(new ExpressionContext(_parentctx, _parentState));
						((SubtractionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 629;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 630;
						Match(SUBTRACT);
						State = 631;
						((SubtractionContext)_localctx).rhs = expression(11);
						}
						break;
					case 6:
						{
						_localctx = new Greater_thanContext(new ExpressionContext(_parentctx, _parentState));
						((Greater_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 632;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 633;
						Match(GREATER_THAN);
						State = 634;
						((Greater_thanContext)_localctx).rhs = expression(10);
						}
						break;
					case 7:
						{
						_localctx = new Lesser_thanContext(new ExpressionContext(_parentctx, _parentState));
						((Lesser_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 635;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 636;
						Match(LESSER_THAN);
						State = 637;
						((Lesser_thanContext)_localctx).rhs = expression(9);
						}
						break;
					case 8:
						{
						_localctx = new Greater_than_equalContext(new ExpressionContext(_parentctx, _parentState));
						((Greater_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 638;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 639;
						Match(GREATER_THAN_EQUAL);
						State = 640;
						((Greater_than_equalContext)_localctx).rhs = expression(8);
						}
						break;
					case 9:
						{
						_localctx = new Lesser_than_equalContext(new ExpressionContext(_parentctx, _parentState));
						((Lesser_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 641;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 642;
						Match(LESSER_THAN_EQUAL);
						State = 643;
						((Lesser_than_equalContext)_localctx).rhs = expression(7);
						}
						break;
					case 10:
						{
						_localctx = new Equal_toContext(new ExpressionContext(_parentctx, _parentState));
						((Equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 644;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 645;
						Match(EQUAL_TO);
						State = 646;
						((Equal_toContext)_localctx).rhs = expression(6);
						}
						break;
					case 11:
						{
						_localctx = new Not_equal_toContext(new ExpressionContext(_parentctx, _parentState));
						((Not_equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 647;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 648;
						Match(NOT_EQUAL_TO);
						State = 649;
						((Not_equal_toContext)_localctx).rhs = expression(5);
						}
						break;
					case 12:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						((AndContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 650;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 651;
						Match(AND);
						State = 652;
						((AndContext)_localctx).rhs = expression(4);
						}
						break;
					case 13:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						((OrContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 653;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 654;
						Match(OR);
						State = 655;
						((OrContext)_localctx).rhs = expression(3);
						}
						break;
					case 14:
						{
						_localctx = new TernaryContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 656;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 657;
						Match(IF);
						State = 658;
						((TernaryContext)_localctx).cond = expression(0);
						State = 659;
						Match(ELSE);
						State = 660;
						((TernaryContext)_localctx).rhs = expression(2);
						}
						break;
					case 15:
						{
						_localctx = new Member_callContext(new ExpressionContext(_parentctx, _parentState));
						((Member_callContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 662;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 663;
						Match(COLON);
						State = 664;
						((Member_callContext)_localctx).name = Match(ELEMENT);
						State = 665;
						Match(LEFT_PAREN);
						State = 666;
						((Member_callContext)_localctx).args = argument_list();
						State = 667;
						Match(RIGHT_PAREN);
						}
						break;
					case 16:
						{
						_localctx = new Member_call_rulesetContext(new ExpressionContext(_parentctx, _parentState));
						((Member_call_rulesetContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 669;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 670;
						Match(RULESET);
						State = 671;
						Match(LEFT_PAREN);
						State = 672;
						((Member_call_rulesetContext)_localctx).args = argument_list();
						State = 673;
						Match(RIGHT_PAREN);
						}
						break;
					case 17:
						{
						_localctx = new IndexorContext(new ExpressionContext(_parentctx, _parentState));
						((IndexorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 675;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 676;
						Match(LEFT_BRACKET);
						State = 677;
						((IndexorContext)_localctx).rhs = expression(0);
						State = 678;
						Match(RIGHT_BRACKET);
						}
						break;
					}
					} 
				}
				State = 684;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class List_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public List_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_falseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(sassy_parser.FALSE, 0); }
		public Boolean_falseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_false(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_stringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Element_stringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Object_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public Object_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(sassy_parser.NONE, 0); }
		public NoneContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClosureContext : ValueContext {
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public ClosureContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClosure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClosure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_deletionContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		public Value_deletionContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_deletion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_trueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(sassy_parser.TRUE, 0); }
		public Boolean_trueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_true(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 70, RULE_value);
		try {
			State = 702;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				_localctx = new Value_deletionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 685;
				Match(DELETE);
				}
				break;
			case TRUE:
				_localctx = new Boolean_trueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Boolean_falseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 687;
				Match(FALSE);
				}
				break;
			case NUMBER:
				_localctx = new Number_valueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 688;
				Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new String_valueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 689;
				Match(STRING);
				}
				break;
			case ELEMENT:
				_localctx = new Element_stringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 690;
				Match(ELEMENT);
				}
				break;
			case NONE:
				_localctx = new NoneContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 691;
				Match(NONE);
				}
				break;
			case FUNCTION:
				_localctx = new ClosureContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 692;
				Match(FUNCTION);
				State = 693;
				Match(LEFT_PAREN);
				State = 694;
				((ClosureContext)_localctx).args = arg_decl_list();
				State = 695;
				Match(RIGHT_PAREN);
				State = 696;
				Match(LEFT_BRACE);
				State = 697;
				((ClosureContext)_localctx).body = function_body();
				State = 698;
				Match(RIGHT_BRACE);
				}
				break;
			case LEFT_BRACKET:
				_localctx = new List_valueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 700;
				list();
				}
				break;
			case LEFT_BRACE:
				_localctx = new Object_valueContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 701;
				obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Require_expressionContext : ParserRuleContext {
		public Require_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_require_expression; } }
	 
		public Require_expressionContext() { }
		public virtual void CopyFrom(Require_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Require_subContext : Require_expressionContext {
		public Require_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_subContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_sub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_orContext : Require_expressionContext {
		public Require_expressionContext lhs;
		public Require_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(sassy_parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext[] require_expression() {
			return GetRuleContexts<Require_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression(int i) {
			return GetRuleContext<Require_expressionContext>(i);
		}
		public Require_orContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_notContext : Require_expressionContext {
		public Require_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(sassy_parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_notContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_not(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_guidContext : Require_expressionContext {
		public Sassy_stringContext modid;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Require_guidContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_guid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_guid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_guid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_andContext : Require_expressionContext {
		public Require_expressionContext lhs;
		public Require_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sassy_parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext[] require_expression() {
			return GetRuleContexts<Require_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression(int i) {
			return GetRuleContext<Require_expressionContext>(i);
		}
		public Require_andContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Require_expressionContext require_expression() {
		return require_expression(0);
	}

	private Require_expressionContext require_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Require_expressionContext _localctx = new Require_expressionContext(Context, _parentState);
		Require_expressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_require_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				_localctx = new Require_subContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 705;
				Match(LEFT_PAREN);
				State = 706;
				((Require_subContext)_localctx).internal_expr = require_expression(0);
				State = 707;
				Match(RIGHT_PAREN);
				}
				break;
			case NOT:
				{
				_localctx = new Require_notContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 709;
				Match(NOT);
				State = 710;
				((Require_notContext)_localctx).internal_expr = require_expression(2);
				}
				break;
			case STRING:
			case ELEMENT:
				{
				_localctx = new Require_guidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 711;
				((Require_guidContext)_localctx).modid = sassy_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 722;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 720;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
					case 1:
						{
						_localctx = new Require_andContext(new Require_expressionContext(_parentctx, _parentState));
						((Require_andContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_require_expression);
						State = 714;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 715;
						Match(AND);
						State = 716;
						((Require_andContext)_localctx).rhs = require_expression(5);
						}
						break;
					case 2:
						{
						_localctx = new Require_orContext(new Require_expressionContext(_parentctx, _parentState));
						((Require_orContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_require_expression);
						State = 717;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 718;
						Match(OR);
						State = 719;
						((Require_orContext)_localctx).rhs = require_expression(4);
						}
						break;
					}
					} 
				}
				State = 724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_valuesContext list_values() {
			return GetRuleContext<List_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 74, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			Match(LEFT_BRACKET);
			State = 726;
			_localctx.@values = list_values();
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 727;
				Match(COMMA);
				}
			}

			State = 730;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public List_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_valuesContext list_values() {
		List_valuesContext _localctx = new List_valuesContext(Context, State);
		EnterRule(_localctx, 76, RULE_list_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070758418052284432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9095L) != 0)) {
					{
					State = 732;
					expression(0);
					}
				}

				State = 739;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 735;
						Match(COMMA);
						State = 736;
						expression(0);
						}
						} 
					}
					State = 741;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public Obj_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Obj_valuesContext obj_values() {
			return GetRuleContext<Obj_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 78, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(LEFT_BRACE);
			State = 745;
			_localctx.@values = obj_values();
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 746;
				Match(COMMA);
				}
			}

			State = 749;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext[] key_value() {
			return GetRuleContexts<Key_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext key_value(int i) {
			return GetRuleContext<Key_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Obj_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_valuesContext obj_values() {
		Obj_valuesContext _localctx = new Obj_valuesContext(Context, State);
		EnterRule(_localctx, 80, RULE_obj_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING || _la==ELEMENT) {
					{
					State = 751;
					key_value();
					}
				}

				State = 758;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 754;
						Match(COMMA);
						State = 755;
						key_value();
						}
						} 
					}
					State = 760;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_valueContext : ParserRuleContext {
		public Key_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value; } }
	 
		public Key_valueContext() { }
		public virtual void CopyFrom(Key_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_keyContext : Key_valueContext {
		public IToken key;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public String_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_key(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal_keyContext : Key_valueContext {
		public IToken key;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Literal_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_valueContext key_value() {
		Key_valueContext _localctx = new Key_valueContext(Context, State);
		EnterRule(_localctx, 82, RULE_key_value);
		try {
			State = 769;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				_localctx = new Literal_keyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 763;
				((Literal_keyContext)_localctx).key = Match(ELEMENT);
				State = 764;
				Match(COLON);
				State = 765;
				((Literal_keyContext)_localctx).val = expression(0);
				}
				break;
			case STRING:
				_localctx = new String_keyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 766;
				((String_keyContext)_localctx).key = Match(STRING);
				State = 767;
				Match(COLON);
				State = 768;
				((String_keyContext)_localctx).val = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_argument_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070758418052284432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9095L) != 0)) {
					{
					State = 771;
					argument();
					}
				}

				State = 778;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 774;
						Match(COMMA);
						State = 775;
						argument();
						}
						} 
					}
					State = 780;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
				}
				}
				break;
			}
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 783;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Named_argumentContext : ArgumentContext {
		public IToken key;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Named_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unnamed_argumentContext : ArgumentContext {
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unnamed_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 86, RULE_argument);
		try {
			State = 790;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				_localctx = new Named_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 786;
				((Named_argumentContext)_localctx).key = Match(VARIABLE);
				State = 787;
				Match(COLON);
				State = 788;
				((Named_argumentContext)_localctx).val = expression(0);
				}
				break;
			case 2:
				_localctx = new Unnamed_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 789;
				((Unnamed_argumentContext)_localctx).val = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext[] arg_decl() {
			return GetRuleContexts<Arg_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext arg_decl(int i) {
			return GetRuleContext<Arg_declContext>(i);
		}
		public Arg_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_decl_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_decl_listContext arg_decl_list() {
		Arg_decl_listContext _localctx = new Arg_decl_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_arg_decl_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 792;
					arg_decl();
					}
				}

				State = 799;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 795;
						Match(COMMA);
						State = 796;
						arg_decl();
						}
						} 
					}
					State = 801;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				}
				break;
			}
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 804;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declContext : ParserRuleContext {
		public Arg_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl; } }
	 
		public Arg_declContext() { }
		public virtual void CopyFrom(Arg_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Argument_without_defaultContext : Arg_declContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Argument_without_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_without_default(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Argument_with_defaultContext : Arg_declContext {
		public IToken name;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Argument_with_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declContext arg_decl() {
		Arg_declContext _localctx = new Arg_declContext(Context, State);
		EnterRule(_localctx, 90, RULE_arg_decl);
		try {
			State = 811;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				_localctx = new Argument_without_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 807;
				((Argument_without_defaultContext)_localctx).name = Match(VARIABLE);
				}
				break;
			case 2:
				_localctx = new Argument_with_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 808;
				((Argument_with_defaultContext)_localctx).name = Match(VARIABLE);
				State = 809;
				Match(COLON);
				State = 810;
				((Argument_with_defaultContext)_localctx).val = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 92, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 813;
				function_statement();
				}
				}
				State = 818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_conditionalContext fn_level_conditional() {
			return GetRuleContext<Fn_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_returnContext fn_return() {
			return GetRuleContext<Fn_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Each_loopContext each_loop() {
			return GetRuleContext<Each_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public Function_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_statementContext function_statement() {
		Function_statementContext _localctx = new Function_statementContext(Context, State);
		EnterRule(_localctx, 94, RULE_function_statement);
		try {
			State = 825;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 819;
				var_decl();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 820;
				fn_level_conditional();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 821;
				fn_return();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 822;
				for_loop();
				}
				break;
			case EACH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 823;
				each_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 824;
				while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_conditionalContext : ParserRuleContext {
		public ExpressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_conditionalContext fn_level_conditional() {
		Fn_level_conditionalContext _localctx = new Fn_level_conditionalContext(Context, State);
		EnterRule(_localctx, 96, RULE_fn_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			Match(PRE_IF);
			State = 828;
			_localctx.cond = expression(0);
			State = 829;
			Match(LEFT_BRACE);
			State = 833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 830;
				_localctx.body = function_statement();
				}
				}
				State = 835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 836;
			Match(RIGHT_BRACE);
			State = 838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 837;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_elseContext fn_level_else_else() {
			return GetRuleContext<Fn_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_ifContext fn_level_else_if() {
			return GetRuleContext<Fn_level_else_ifContext>(0);
		}
		public Fn_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_elseContext fn_level_else() {
		Fn_level_elseContext _localctx = new Fn_level_elseContext(Context, State);
		EnterRule(_localctx, 98, RULE_fn_level_else);
		try {
			State = 842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 840;
				fn_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 841;
				fn_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_elseContext : ParserRuleContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Fn_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_elseContext fn_level_else_else() {
		Fn_level_else_elseContext _localctx = new Fn_level_else_elseContext(Context, State);
		EnterRule(_localctx, 100, RULE_fn_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			Match(PRE_ELSE);
			State = 845;
			Match(LEFT_BRACE);
			State = 849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 846;
				_localctx.body = function_statement();
				}
				}
				State = 851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 852;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_ifContext : ParserRuleContext {
		public ExpressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_ifContext fn_level_else_if() {
		Fn_level_else_ifContext _localctx = new Fn_level_else_ifContext(Context, State);
		EnterRule(_localctx, 102, RULE_fn_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			Match(PRE_ELSE_IF);
			State = 855;
			_localctx.cond = expression(0);
			State = 856;
			Match(LEFT_BRACE);
			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 857;
				_localctx.body = function_statement();
				}
				}
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 863;
			Match(RIGHT_BRACE);
			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 864;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(sassy_parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Fn_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_returnContext fn_return() {
		Fn_returnContext _localctx = new Fn_returnContext(Context, State);
		EnterRule(_localctx, 104, RULE_fn_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			Match(RETURN);
			State = 868;
			expression(0);
			State = 869;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_includeContext : ParserRuleContext {
		public IToken mixin;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(sassy_parser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Mixin_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_include(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_includeContext mixin_include() {
		Mixin_includeContext _localctx = new Mixin_includeContext(Context, State);
		EnterRule(_localctx, 106, RULE_mixin_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			Match(INCLUDE);
			State = 872;
			_localctx.mixin = Match(ELEMENT);
			State = 873;
			Match(LEFT_PAREN);
			State = 874;
			_localctx.args = argument_list();
			State = 875;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
	 
		public For_loopContext() { }
		public virtual void CopyFrom(For_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class For_to_loopContext : For_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(sassy_parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public For_to_loopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFor_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFor_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_to_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class For_through_loopContext : For_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(sassy_parser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public For_through_loopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFor_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFor_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_through_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 108, RULE_for_loop);
		int _la;
		try {
			State = 907;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				_localctx = new For_to_loopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 877;
				Match(FOR);
				State = 878;
				((For_to_loopContext)_localctx).idx = Match(VARIABLE);
				State = 879;
				Match(FROM);
				State = 880;
				((For_to_loopContext)_localctx).for_start = expression(0);
				State = 881;
				Match(TO);
				State = 882;
				((For_to_loopContext)_localctx).end = expression(0);
				State = 883;
				Match(LEFT_BRACE);
				State = 887;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 884;
					((For_to_loopContext)_localctx).body = function_statement();
					}
					}
					State = 889;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 890;
				Match(RIGHT_BRACE);
				}
				break;
			case 2:
				_localctx = new For_through_loopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 892;
				Match(FOR);
				State = 893;
				((For_through_loopContext)_localctx).idx = Match(VARIABLE);
				State = 894;
				Match(FROM);
				State = 895;
				((For_through_loopContext)_localctx).for_start = expression(0);
				State = 896;
				Match(THROUGH);
				State = 897;
				((For_through_loopContext)_localctx).end = expression(0);
				State = 898;
				Match(LEFT_BRACE);
				State = 902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 899;
					((For_through_loopContext)_localctx).body = function_statement();
					}
					}
					State = 904;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 905;
				Match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_for_loopContext : ParserRuleContext {
		public Top_level_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_for_loop; } }
	 
		public Top_level_for_loopContext() { }
		public virtual void CopyFrom(Top_level_for_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Top_level_for_through_loopContext : Top_level_for_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(sassy_parser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_for_through_loopContext(Top_level_for_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_for_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_for_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_for_through_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Top_level_for_to_loopContext : Top_level_for_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(sassy_parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_for_to_loopContext(Top_level_for_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_for_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_for_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_for_to_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_for_loopContext top_level_for_loop() {
		Top_level_for_loopContext _localctx = new Top_level_for_loopContext(Context, State);
		EnterRule(_localctx, 110, RULE_top_level_for_loop);
		int _la;
		try {
			State = 939;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				_localctx = new Top_level_for_to_loopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 909;
				Match(FOR);
				State = 910;
				((Top_level_for_to_loopContext)_localctx).idx = Match(VARIABLE);
				State = 911;
				Match(FROM);
				State = 912;
				((Top_level_for_to_loopContext)_localctx).for_start = expression(0);
				State = 913;
				Match(TO);
				State = 914;
				((Top_level_for_to_loopContext)_localctx).end = expression(0);
				State = 915;
				Match(LEFT_BRACE);
				State = 919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
					{
					{
					State = 916;
					((Top_level_for_to_loopContext)_localctx).body = top_level_statement();
					}
					}
					State = 921;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 922;
				Match(RIGHT_BRACE);
				}
				break;
			case 2:
				_localctx = new Top_level_for_through_loopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 924;
				Match(FOR);
				State = 925;
				((Top_level_for_through_loopContext)_localctx).idx = Match(VARIABLE);
				State = 926;
				Match(FROM);
				State = 927;
				((Top_level_for_through_loopContext)_localctx).for_start = expression(0);
				State = 928;
				Match(THROUGH);
				State = 929;
				((Top_level_for_through_loopContext)_localctx).end = expression(0);
				State = 930;
				Match(LEFT_BRACE);
				State = 934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
					{
					{
					State = 931;
					((Top_level_for_through_loopContext)_localctx).body = top_level_statement();
					}
					}
					State = 936;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 937;
				Match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_for_loopContext : ParserRuleContext {
		public Sel_level_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_for_loop; } }
	 
		public Sel_level_for_loopContext() { }
		public virtual void CopyFrom(Sel_level_for_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sel_level_for_through_loopContext : Sel_level_for_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(sassy_parser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_for_through_loopContext(Sel_level_for_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_for_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_for_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_for_through_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_level_for_to_loopContext : Sel_level_for_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(sassy_parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_for_to_loopContext(Sel_level_for_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_for_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_for_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_for_to_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_for_loopContext sel_level_for_loop() {
		Sel_level_for_loopContext _localctx = new Sel_level_for_loopContext(Context, State);
		EnterRule(_localctx, 112, RULE_sel_level_for_loop);
		int _la;
		try {
			State = 971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				_localctx = new Sel_level_for_to_loopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 941;
				Match(FOR);
				State = 942;
				((Sel_level_for_to_loopContext)_localctx).idx = Match(VARIABLE);
				State = 943;
				Match(FROM);
				State = 944;
				((Sel_level_for_to_loopContext)_localctx).for_start = expression(0);
				State = 945;
				Match(TO);
				State = 946;
				((Sel_level_for_to_loopContext)_localctx).end = expression(0);
				State = 947;
				Match(LEFT_BRACE);
				State = 951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
					{
					{
					State = 948;
					((Sel_level_for_to_loopContext)_localctx).body = selector_statement();
					}
					}
					State = 953;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 954;
				Match(RIGHT_BRACE);
				}
				break;
			case 2:
				_localctx = new Sel_level_for_through_loopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				Match(FOR);
				State = 957;
				((Sel_level_for_through_loopContext)_localctx).idx = Match(VARIABLE);
				State = 958;
				Match(FROM);
				State = 959;
				((Sel_level_for_through_loopContext)_localctx).for_start = expression(0);
				State = 960;
				Match(THROUGH);
				State = 961;
				((Sel_level_for_through_loopContext)_localctx).end = expression(0);
				State = 962;
				Match(LEFT_BRACE);
				State = 966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
					{
					{
					State = 963;
					((Sel_level_for_through_loopContext)_localctx).body = selector_statement();
					}
					}
					State = 968;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 969;
				Match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Each_loopContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ExpressionContext iter;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(sassy_parser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(sassy_parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(sassy_parser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(sassy_parser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Each_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_each_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEach_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Each_loopContext each_loop() {
		Each_loopContext _localctx = new Each_loopContext(Context, State);
		EnterRule(_localctx, 114, RULE_each_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(EACH);
			State = 976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 974;
				_localctx.key = Match(VARIABLE);
				State = 975;
				Match(COMMA);
				}
				break;
			}
			State = 978;
			_localctx.val = Match(VARIABLE);
			State = 979;
			Match(IN);
			State = 980;
			_localctx.iter = expression(0);
			State = 981;
			Match(LEFT_BRACE);
			State = 985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 982;
				_localctx.body = function_statement();
				}
				}
				State = 987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 988;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_each_loopContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ExpressionContext iter;
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(sassy_parser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(sassy_parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(sassy_parser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(sassy_parser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_each_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_each_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_each_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_each_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_each_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_each_loopContext top_level_each_loop() {
		Top_level_each_loopContext _localctx = new Top_level_each_loopContext(Context, State);
		EnterRule(_localctx, 116, RULE_top_level_each_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(EACH);
			State = 993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 991;
				_localctx.key = Match(VARIABLE);
				State = 992;
				Match(COMMA);
				}
				break;
			}
			State = 995;
			_localctx.val = Match(VARIABLE);
			State = 996;
			Match(IN);
			State = 997;
			_localctx.iter = expression(0);
			State = 998;
			Match(LEFT_BRACE);
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 999;
				_localctx.body = top_level_statement();
				}
				}
				State = 1004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1005;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_each_loopContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ExpressionContext iter;
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(sassy_parser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(sassy_parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(sassy_parser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(sassy_parser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_each_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_each_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_each_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_each_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_each_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_each_loopContext sel_level_each_loop() {
		Sel_level_each_loopContext _localctx = new Sel_level_each_loopContext(Context, State);
		EnterRule(_localctx, 118, RULE_sel_level_each_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			Match(EACH);
			State = 1010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1008;
				_localctx.key = Match(VARIABLE);
				State = 1009;
				Match(COMMA);
				}
				break;
			}
			State = 1012;
			_localctx.val = Match(VARIABLE);
			State = 1013;
			Match(IN);
			State = 1014;
			_localctx.iter = expression(0);
			State = 1015;
			Match(LEFT_BRACE);
			State = 1019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 1016;
				_localctx.body = selector_statement();
				}
				}
				State = 1021;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1022;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		public ExpressionContext cond;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(sassy_parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 120, RULE_while_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			Match(WHILE);
			State = 1025;
			_localctx.cond = expression(0);
			State = 1026;
			Match(LEFT_BRACE);
			State = 1030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 1027;
				_localctx.body = function_statement();
				}
				}
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1033;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_while_loopContext : ParserRuleContext {
		public ExpressionContext cond;
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(sassy_parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_while_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_while_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_while_loopContext top_level_while_loop() {
		Top_level_while_loopContext _localctx = new Top_level_while_loopContext(Context, State);
		EnterRule(_localctx, 122, RULE_top_level_while_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			Match(WHILE);
			State = 1036;
			_localctx.cond = expression(0);
			State = 1037;
			Match(LEFT_BRACE);
			State = 1041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 1038;
				_localctx.body = top_level_statement();
				}
				}
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1044;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_while_loopContext : ParserRuleContext {
		public ExpressionContext cond;
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(sassy_parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_while_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_while_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_while_loopContext sel_level_while_loop() {
		Sel_level_while_loopContext _localctx = new Sel_level_while_loopContext(Context, State);
		EnterRule(_localctx, 124, RULE_sel_level_while_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			Match(WHILE);
			State = 1047;
			_localctx.cond = expression(0);
			State = 1048;
			Match(LEFT_BRACE);
			State = 1052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 1049;
				_localctx.body = selector_statement();
				}
				}
				State = 1054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1055;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return selector_sempred((SelectorContext)_localctx, predIndex);
		case 22: return selector_no_children_sempred((Selector_no_childrenContext)_localctx, predIndex);
		case 34: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 36: return require_expression_sempred((Require_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selector_sempred(SelectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		}
		return true;
	}
	private bool selector_no_children_sempred(Selector_no_childrenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 5);
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		case 19: return Precpred(Context, 17);
		case 20: return Precpred(Context, 16);
		case 21: return Precpred(Context, 15);
		}
		return true;
	}
	private bool require_expression_sempred(Require_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 4);
		case 23: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,77,1058,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,4,0,128,
		8,0,11,0,12,0,129,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,3,1,147,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,5,3,156,8,3,10,3,12,3,
		159,9,3,1,4,1,4,3,4,163,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,3,6,194,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,5,7,211,8,7,10,7,12,7,214,9,7,1,7,1,7,1,7,3,7,219,8,7,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,3,9,247,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,257,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,5,13,281,8,13,
		10,13,12,13,284,9,13,1,13,1,13,3,13,288,8,13,1,14,1,14,3,14,292,8,14,1,
		15,1,15,1,15,5,15,297,8,15,10,15,12,15,300,9,15,1,15,1,15,1,16,1,16,1,
		16,1,16,5,16,308,8,16,10,16,12,16,311,9,16,1,16,1,16,3,16,315,8,16,1,17,
		1,17,1,17,1,17,1,17,1,18,5,18,323,8,18,10,18,12,18,326,9,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,19,3,19,336,8,19,1,20,1,20,1,20,1,20,5,20,342,
		8,20,10,20,12,20,345,9,20,3,20,347,8,20,1,20,1,20,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,5,21,360,8,21,10,21,12,21,363,9,21,1,21,1,21,
		1,21,1,21,1,21,5,21,370,8,21,10,21,12,21,373,9,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,3,21,398,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,5,21,408,8,21,10,21,12,21,411,9,21,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,5,22,422,8,22,10,22,12,22,425,9,22,1,22,1,22,1,22,1,
		22,1,22,5,22,432,8,22,10,22,12,22,435,9,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,3,22,458,8,22,1,22,1,22,1,22,1,22,1,22,5,22,465,8,22,10,22,12,
		22,468,9,22,1,23,5,23,471,8,23,10,23,12,23,474,9,23,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,487,8,24,1,25,1,25,1,25,1,25,5,
		25,493,8,25,10,25,12,25,496,9,25,1,25,1,25,3,25,500,8,25,1,26,1,26,3,26,
		504,8,26,1,27,1,27,1,27,5,27,509,8,27,10,27,12,27,512,9,27,1,27,1,27,1,
		28,1,28,1,28,1,28,5,28,520,8,28,10,28,12,28,523,9,28,1,28,1,28,3,28,527,
		8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,
		3,32,542,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,550,8,32,1,32,1,32,1,
		32,1,32,1,32,1,32,3,32,558,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,566,
		8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,574,8,32,1,32,1,32,1,32,1,32,3,
		32,580,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		3,33,594,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,616,8,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,5,34,681,8,34,10,34,12,34,684,9,34,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		3,35,703,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,713,8,36,1,
		36,1,36,1,36,1,36,1,36,1,36,5,36,721,8,36,10,36,12,36,724,9,36,1,37,1,
		37,1,37,3,37,729,8,37,1,37,1,37,1,38,3,38,734,8,38,1,38,1,38,5,38,738,
		8,38,10,38,12,38,741,9,38,3,38,743,8,38,1,39,1,39,1,39,3,39,748,8,39,1,
		39,1,39,1,40,3,40,753,8,40,1,40,1,40,5,40,757,8,40,10,40,12,40,760,9,40,
		3,40,762,8,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,770,8,41,1,42,3,42,773,
		8,42,1,42,1,42,5,42,777,8,42,10,42,12,42,780,9,42,3,42,782,8,42,1,42,3,
		42,785,8,42,1,43,1,43,1,43,1,43,3,43,791,8,43,1,44,3,44,794,8,44,1,44,
		1,44,5,44,798,8,44,10,44,12,44,801,9,44,3,44,803,8,44,1,44,3,44,806,8,
		44,1,45,1,45,1,45,1,45,3,45,812,8,45,1,46,5,46,815,8,46,10,46,12,46,818,
		9,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,826,8,47,1,48,1,48,1,48,1,48,5,
		48,832,8,48,10,48,12,48,835,9,48,1,48,1,48,3,48,839,8,48,1,49,1,49,3,49,
		843,8,49,1,50,1,50,1,50,5,50,848,8,50,10,50,12,50,851,9,50,1,50,1,50,1,
		51,1,51,1,51,1,51,5,51,859,8,51,10,51,12,51,862,9,51,1,51,1,51,3,51,866,
		8,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,
		1,54,1,54,1,54,1,54,1,54,5,54,886,8,54,10,54,12,54,889,9,54,1,54,1,54,
		1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,901,8,54,10,54,12,54,904,
		9,54,1,54,1,54,3,54,908,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,
		55,918,8,55,10,55,12,55,921,9,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
		55,1,55,1,55,5,55,933,8,55,10,55,12,55,936,9,55,1,55,1,55,3,55,940,8,55,
		1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,950,8,56,10,56,12,56,953,
		9,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,965,8,56,10,
		56,12,56,968,9,56,1,56,1,56,3,56,972,8,56,1,57,1,57,1,57,3,57,977,8,57,
		1,57,1,57,1,57,1,57,1,57,5,57,984,8,57,10,57,12,57,987,9,57,1,57,1,57,
		1,58,1,58,1,58,3,58,994,8,58,1,58,1,58,1,58,1,58,1,58,5,58,1001,8,58,10,
		58,12,58,1004,9,58,1,58,1,58,1,59,1,59,1,59,3,59,1011,8,59,1,59,1,59,1,
		59,1,59,1,59,5,59,1018,8,59,10,59,12,59,1021,9,59,1,59,1,59,1,60,1,60,
		1,60,1,60,5,60,1029,8,60,10,60,12,60,1032,9,60,1,60,1,60,1,61,1,61,1,61,
		1,61,5,61,1040,8,61,10,61,12,61,1043,9,61,1,61,1,61,1,62,1,62,1,62,1,62,
		5,62,1051,8,62,10,62,12,62,1054,9,62,1,62,1,62,1,62,0,4,42,44,68,72,63,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,108,110,112,114,116,118,120,122,124,0,0,1188,0,127,
		1,0,0,0,2,146,1,0,0,0,4,148,1,0,0,0,6,152,1,0,0,0,8,162,1,0,0,0,10,164,
		1,0,0,0,12,193,1,0,0,0,14,218,1,0,0,0,16,220,1,0,0,0,18,246,1,0,0,0,20,
		256,1,0,0,0,22,258,1,0,0,0,24,267,1,0,0,0,26,276,1,0,0,0,28,291,1,0,0,
		0,30,293,1,0,0,0,32,303,1,0,0,0,34,316,1,0,0,0,36,324,1,0,0,0,38,335,1,
		0,0,0,40,337,1,0,0,0,42,397,1,0,0,0,44,457,1,0,0,0,46,472,1,0,0,0,48,486,
		1,0,0,0,50,488,1,0,0,0,52,503,1,0,0,0,54,505,1,0,0,0,56,515,1,0,0,0,58,
		528,1,0,0,0,60,532,1,0,0,0,62,535,1,0,0,0,64,579,1,0,0,0,66,593,1,0,0,
		0,68,615,1,0,0,0,70,702,1,0,0,0,72,712,1,0,0,0,74,725,1,0,0,0,76,742,1,
		0,0,0,78,744,1,0,0,0,80,761,1,0,0,0,82,769,1,0,0,0,84,781,1,0,0,0,86,790,
		1,0,0,0,88,802,1,0,0,0,90,811,1,0,0,0,92,816,1,0,0,0,94,825,1,0,0,0,96,
		827,1,0,0,0,98,842,1,0,0,0,100,844,1,0,0,0,102,854,1,0,0,0,104,867,1,0,
		0,0,106,871,1,0,0,0,108,907,1,0,0,0,110,939,1,0,0,0,112,971,1,0,0,0,114,
		973,1,0,0,0,116,990,1,0,0,0,118,1007,1,0,0,0,120,1024,1,0,0,0,122,1035,
		1,0,0,0,124,1046,1,0,0,0,126,128,3,2,1,0,127,126,1,0,0,0,128,129,1,0,0,
		0,129,127,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,5,0,0,1,132,
		1,1,0,0,0,133,147,3,10,5,0,134,147,3,12,6,0,135,147,3,14,7,0,136,147,3,
		22,11,0,137,147,3,24,12,0,138,147,3,26,13,0,139,147,3,34,17,0,140,147,
		3,4,2,0,141,147,3,16,8,0,142,147,3,18,9,0,143,147,3,110,55,0,144,147,3,
		116,58,0,145,147,3,122,61,0,146,133,1,0,0,0,146,134,1,0,0,0,146,135,1,
		0,0,0,146,136,1,0,0,0,146,137,1,0,0,0,146,138,1,0,0,0,146,139,1,0,0,0,
		146,140,1,0,0,0,146,141,1,0,0,0,146,142,1,0,0,0,146,143,1,0,0,0,146,144,
		1,0,0,0,146,145,1,0,0,0,147,3,1,0,0,0,148,149,5,23,0,0,149,150,3,6,3,0,
		150,151,5,36,0,0,151,5,1,0,0,0,152,157,3,8,4,0,153,154,5,42,0,0,154,156,
		3,8,4,0,155,153,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,
		0,158,7,1,0,0,0,159,157,1,0,0,0,160,163,5,65,0,0,161,163,5,77,0,0,162,
		160,1,0,0,0,162,161,1,0,0,0,163,9,1,0,0,0,164,165,5,3,0,0,165,166,3,8,
		4,0,166,167,5,36,0,0,167,11,1,0,0,0,168,169,5,71,0,0,169,170,5,37,0,0,
		170,171,3,68,34,0,171,172,5,36,0,0,172,194,1,0,0,0,173,174,5,71,0,0,174,
		175,5,38,0,0,175,176,3,68,34,0,176,177,5,36,0,0,177,194,1,0,0,0,178,179,
		5,71,0,0,179,180,5,39,0,0,180,181,3,68,34,0,181,182,5,36,0,0,182,194,1,
		0,0,0,183,184,5,71,0,0,184,185,5,40,0,0,185,186,3,68,34,0,186,187,5,36,
		0,0,187,194,1,0,0,0,188,189,5,71,0,0,189,190,5,41,0,0,190,191,3,68,34,
		0,191,192,5,36,0,0,192,194,1,0,0,0,193,168,1,0,0,0,193,173,1,0,0,0,193,
		178,1,0,0,0,193,183,1,0,0,0,193,188,1,0,0,0,194,13,1,0,0,0,195,196,5,20,
		0,0,196,197,3,8,4,0,197,198,5,36,0,0,198,219,1,0,0,0,199,200,5,20,0,0,
		200,201,3,8,4,0,201,202,5,37,0,0,202,203,5,27,0,0,203,204,5,36,0,0,204,
		219,1,0,0,0,205,206,5,20,0,0,206,207,3,8,4,0,207,208,5,37,0,0,208,212,
		5,30,0,0,209,211,3,20,10,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,
		0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,31,0,0,216,
		217,5,36,0,0,217,219,1,0,0,0,218,195,1,0,0,0,218,199,1,0,0,0,218,205,1,
		0,0,0,219,15,1,0,0,0,220,221,5,28,0,0,221,222,3,8,4,0,222,223,5,42,0,0,
		223,224,3,8,4,0,224,225,5,37,0,0,225,226,3,68,34,0,226,227,5,36,0,0,227,
		17,1,0,0,0,228,229,5,29,0,0,229,230,3,68,34,0,230,231,5,42,0,0,231,232,
		3,8,4,0,232,233,5,42,0,0,233,234,3,8,4,0,234,235,5,37,0,0,235,236,3,68,
		34,0,236,237,5,36,0,0,237,247,1,0,0,0,238,239,5,29,0,0,239,240,3,68,34,
		0,240,241,5,42,0,0,241,242,3,8,4,0,242,243,5,37,0,0,243,244,3,68,34,0,
		244,245,5,36,0,0,245,247,1,0,0,0,246,228,1,0,0,0,246,238,1,0,0,0,247,19,
		1,0,0,0,248,249,5,25,0,0,249,250,3,8,4,0,250,251,5,36,0,0,251,257,1,0,
		0,0,252,253,5,26,0,0,253,254,3,8,4,0,254,255,5,36,0,0,255,257,1,0,0,0,
		256,248,1,0,0,0,256,252,1,0,0,0,257,21,1,0,0,0,258,259,5,4,0,0,259,260,
		5,77,0,0,260,261,5,32,0,0,261,262,3,88,44,0,262,263,5,33,0,0,263,264,5,
		30,0,0,264,265,3,92,46,0,265,266,5,31,0,0,266,23,1,0,0,0,267,268,5,8,0,
		0,268,269,5,77,0,0,269,270,5,32,0,0,270,271,3,88,44,0,271,272,5,33,0,0,
		272,273,5,30,0,0,273,274,3,46,23,0,274,275,5,31,0,0,275,25,1,0,0,0,276,
		277,5,5,0,0,277,278,3,68,34,0,278,282,5,30,0,0,279,281,3,2,1,0,280,279,
		1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,
		0,284,282,1,0,0,0,285,287,5,31,0,0,286,288,3,28,14,0,287,286,1,0,0,0,287,
		288,1,0,0,0,288,27,1,0,0,0,289,292,3,30,15,0,290,292,3,32,16,0,291,289,
		1,0,0,0,291,290,1,0,0,0,292,29,1,0,0,0,293,294,5,6,0,0,294,298,5,30,0,
		0,295,297,3,2,1,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,
		299,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,5,31,0,0,302,31,1,
		0,0,0,303,304,5,7,0,0,304,305,3,68,34,0,305,309,5,30,0,0,306,308,3,2,1,
		0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,
		312,1,0,0,0,311,309,1,0,0,0,312,314,5,31,0,0,313,315,3,28,14,0,314,313,
		1,0,0,0,314,315,1,0,0,0,315,33,1,0,0,0,316,317,3,36,18,0,317,318,5,30,
		0,0,318,319,3,46,23,0,319,320,5,31,0,0,320,35,1,0,0,0,321,323,3,38,19,
		0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,
		327,1,0,0,0,326,324,1,0,0,0,327,328,3,42,21,0,328,37,1,0,0,0,329,330,5,
		18,0,0,330,336,3,72,36,0,331,332,5,19,0,0,332,336,3,8,4,0,333,334,5,24,
		0,0,334,336,3,40,20,0,335,329,1,0,0,0,335,331,1,0,0,0,335,333,1,0,0,0,
		336,39,1,0,0,0,337,346,5,32,0,0,338,343,3,68,34,0,339,340,5,42,0,0,340,
		342,3,68,34,0,341,339,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,
		1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,346,338,1,0,0,0,346,347,1,0,0,
		0,347,348,1,0,0,0,348,349,5,33,0,0,349,41,1,0,0,0,350,351,6,21,-1,0,351,
		398,5,77,0,0,352,398,5,65,0,0,353,398,5,69,0,0,354,398,5,70,0,0,355,356,
		5,69,0,0,356,357,5,37,0,0,357,361,5,34,0,0,358,360,3,94,47,0,359,358,1,
		0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,
		363,361,1,0,0,0,364,398,5,35,0,0,365,366,5,70,0,0,366,367,5,37,0,0,367,
		371,5,34,0,0,368,370,3,94,47,0,369,368,1,0,0,0,370,373,1,0,0,0,371,369,
		1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,1,0,0,0,374,398,5,35,0,
		0,375,398,5,67,0,0,376,398,5,68,0,0,377,398,5,74,0,0,378,398,5,75,0,0,
		379,398,5,76,0,0,380,381,5,32,0,0,381,382,3,42,21,0,382,383,5,33,0,0,383,
		398,1,0,0,0,384,385,5,43,0,0,385,398,5,77,0,0,386,387,5,43,0,0,387,398,
		5,65,0,0,388,389,5,59,0,0,389,398,5,69,0,0,390,391,5,59,0,0,391,398,5,
		70,0,0,392,393,5,59,0,0,393,398,5,67,0,0,394,395,5,59,0,0,395,398,5,68,
		0,0,396,398,5,45,0,0,397,350,1,0,0,0,397,352,1,0,0,0,397,353,1,0,0,0,397,
		354,1,0,0,0,397,355,1,0,0,0,397,365,1,0,0,0,397,375,1,0,0,0,397,376,1,
		0,0,0,397,377,1,0,0,0,397,378,1,0,0,0,397,379,1,0,0,0,397,380,1,0,0,0,
		397,384,1,0,0,0,397,386,1,0,0,0,397,388,1,0,0,0,397,390,1,0,0,0,397,392,
		1,0,0,0,397,394,1,0,0,0,397,396,1,0,0,0,398,409,1,0,0,0,399,400,10,10,
		0,0,400,401,5,42,0,0,401,408,3,44,22,0,402,403,10,9,0,0,403,404,5,49,0,
		0,404,408,3,44,22,0,405,406,10,8,0,0,406,408,3,44,22,0,407,399,1,0,0,0,
		407,402,1,0,0,0,407,405,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,
		1,0,0,0,410,43,1,0,0,0,411,409,1,0,0,0,412,413,6,22,-1,0,413,458,5,77,
		0,0,414,458,5,65,0,0,415,458,5,69,0,0,416,458,5,70,0,0,417,418,5,69,0,
		0,418,419,5,37,0,0,419,423,5,34,0,0,420,422,3,94,47,0,421,420,1,0,0,0,
		422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,423,
		1,0,0,0,426,458,5,35,0,0,427,428,5,70,0,0,428,429,5,37,0,0,429,433,5,34,
		0,0,430,432,3,94,47,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,
		433,434,1,0,0,0,434,436,1,0,0,0,435,433,1,0,0,0,436,458,5,35,0,0,437,458,
		5,67,0,0,438,458,5,68,0,0,439,458,5,74,0,0,440,441,5,32,0,0,441,442,3,
		44,22,0,442,443,5,33,0,0,443,458,1,0,0,0,444,445,5,43,0,0,445,458,5,77,
		0,0,446,447,5,43,0,0,447,458,5,65,0,0,448,449,5,59,0,0,449,458,5,69,0,
		0,450,451,5,59,0,0,451,458,5,70,0,0,452,453,5,59,0,0,453,458,5,67,0,0,
		454,455,5,59,0,0,455,458,5,68,0,0,456,458,5,45,0,0,457,412,1,0,0,0,457,
		414,1,0,0,0,457,415,1,0,0,0,457,416,1,0,0,0,457,417,1,0,0,0,457,427,1,
		0,0,0,457,437,1,0,0,0,457,438,1,0,0,0,457,439,1,0,0,0,457,440,1,0,0,0,
		457,444,1,0,0,0,457,446,1,0,0,0,457,448,1,0,0,0,457,450,1,0,0,0,457,452,
		1,0,0,0,457,454,1,0,0,0,457,456,1,0,0,0,458,466,1,0,0,0,459,460,10,9,0,
		0,460,461,5,42,0,0,461,465,3,44,22,10,462,463,10,8,0,0,463,465,3,44,22,
		9,464,459,1,0,0,0,464,462,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,
		467,1,0,0,0,467,45,1,0,0,0,468,466,1,0,0,0,469,471,3,48,24,0,470,469,1,
		0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,47,1,0,0,0,474,
		472,1,0,0,0,475,487,3,12,6,0,476,487,3,50,25,0,477,487,3,118,59,0,478,
		487,3,124,62,0,479,487,3,112,56,0,480,487,3,58,29,0,481,487,3,60,30,0,
		482,487,3,62,31,0,483,487,3,64,32,0,484,487,3,34,17,0,485,487,3,106,53,
		0,486,475,1,0,0,0,486,476,1,0,0,0,486,477,1,0,0,0,486,478,1,0,0,0,486,
		479,1,0,0,0,486,480,1,0,0,0,486,481,1,0,0,0,486,482,1,0,0,0,486,483,1,
		0,0,0,486,484,1,0,0,0,486,485,1,0,0,0,487,49,1,0,0,0,488,489,5,5,0,0,489,
		490,3,68,34,0,490,494,5,30,0,0,491,493,3,48,24,0,492,491,1,0,0,0,493,496,
		1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,497,1,0,0,0,496,494,1,0,0,
		0,497,499,5,31,0,0,498,500,3,52,26,0,499,498,1,0,0,0,499,500,1,0,0,0,500,
		51,1,0,0,0,501,504,3,54,27,0,502,504,3,56,28,0,503,501,1,0,0,0,503,502,
		1,0,0,0,504,53,1,0,0,0,505,506,5,6,0,0,506,510,5,30,0,0,507,509,3,48,24,
		0,508,507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,
		513,1,0,0,0,512,510,1,0,0,0,513,514,5,31,0,0,514,55,1,0,0,0,515,516,5,
		7,0,0,516,517,3,68,34,0,517,521,5,30,0,0,518,520,3,48,24,0,519,518,1,0,
		0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,
		521,1,0,0,0,524,526,5,31,0,0,525,527,3,52,26,0,526,525,1,0,0,0,526,527,
		1,0,0,0,527,57,1,0,0,0,528,529,5,16,0,0,529,530,3,68,34,0,530,531,5,36,
		0,0,531,59,1,0,0,0,532,533,5,66,0,0,533,534,5,36,0,0,534,61,1,0,0,0,535,
		536,5,17,0,0,536,537,3,68,34,0,537,538,5,36,0,0,538,63,1,0,0,0,539,541,
		3,8,4,0,540,542,3,66,33,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,
		0,0,543,544,5,37,0,0,544,545,3,68,34,0,545,546,5,36,0,0,546,580,1,0,0,
		0,547,549,3,8,4,0,548,550,3,66,33,0,549,548,1,0,0,0,549,550,1,0,0,0,550,
		551,1,0,0,0,551,552,5,38,0,0,552,553,3,68,34,0,553,554,5,36,0,0,554,580,
		1,0,0,0,555,557,3,8,4,0,556,558,3,66,33,0,557,556,1,0,0,0,557,558,1,0,
		0,0,558,559,1,0,0,0,559,560,5,39,0,0,560,561,3,68,34,0,561,562,5,36,0,
		0,562,580,1,0,0,0,563,565,3,8,4,0,564,566,3,66,33,0,565,564,1,0,0,0,565,
		566,1,0,0,0,566,567,1,0,0,0,567,568,5,41,0,0,568,569,3,68,34,0,569,570,
		5,36,0,0,570,580,1,0,0,0,571,573,3,8,4,0,572,574,3,66,33,0,573,572,1,0,
		0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,5,40,0,0,576,577,3,68,34,0,
		577,578,5,36,0,0,578,580,1,0,0,0,579,539,1,0,0,0,579,547,1,0,0,0,579,555,
		1,0,0,0,579,563,1,0,0,0,579,571,1,0,0,0,580,65,1,0,0,0,581,582,5,34,0,
		0,582,583,5,64,0,0,583,594,5,35,0,0,584,585,5,34,0,0,585,586,5,77,0,0,
		586,594,5,35,0,0,587,588,5,34,0,0,588,589,5,69,0,0,589,594,5,35,0,0,590,
		591,5,34,0,0,591,592,5,65,0,0,592,594,5,35,0,0,593,581,1,0,0,0,593,584,
		1,0,0,0,593,587,1,0,0,0,593,590,1,0,0,0,594,67,1,0,0,0,595,596,6,34,-1,
		0,596,597,5,77,0,0,597,598,5,32,0,0,598,599,3,84,42,0,599,600,5,33,0,0,
		600,616,1,0,0,0,601,616,3,70,35,0,602,616,5,71,0,0,603,616,5,72,0,0,604,
		616,5,73,0,0,605,606,5,32,0,0,606,607,3,68,34,0,607,608,5,33,0,0,608,616,
		1,0,0,0,609,610,5,44,0,0,610,616,3,68,34,20,611,612,5,43,0,0,612,616,3,
		68,34,19,613,614,5,48,0,0,614,616,3,68,34,18,615,595,1,0,0,0,615,601,1,
		0,0,0,615,602,1,0,0,0,615,603,1,0,0,0,615,604,1,0,0,0,615,605,1,0,0,0,
		615,609,1,0,0,0,615,611,1,0,0,0,615,613,1,0,0,0,616,682,1,0,0,0,617,618,
		10,14,0,0,618,619,5,45,0,0,619,681,3,68,34,15,620,621,10,13,0,0,621,622,
		5,46,0,0,622,681,3,68,34,14,623,624,10,12,0,0,624,625,5,47,0,0,625,681,
		3,68,34,13,626,627,10,11,0,0,627,628,5,43,0,0,628,681,3,68,34,12,629,630,
		10,10,0,0,630,631,5,44,0,0,631,681,3,68,34,11,632,633,10,9,0,0,633,634,
		5,49,0,0,634,681,3,68,34,10,635,636,10,8,0,0,636,637,5,51,0,0,637,681,
		3,68,34,9,638,639,10,7,0,0,639,640,5,50,0,0,640,681,3,68,34,8,641,642,
		10,6,0,0,642,643,5,52,0,0,643,681,3,68,34,7,644,645,10,5,0,0,645,646,5,
		53,0,0,646,681,3,68,34,6,647,648,10,4,0,0,648,649,5,54,0,0,649,681,3,68,
		34,5,650,651,10,3,0,0,651,652,5,55,0,0,652,681,3,68,34,4,653,654,10,2,
		0,0,654,655,5,56,0,0,655,681,3,68,34,3,656,657,10,1,0,0,657,658,5,57,0,
		0,658,659,3,68,34,0,659,660,5,58,0,0,660,661,3,68,34,2,661,681,1,0,0,0,
		662,663,10,17,0,0,663,664,5,37,0,0,664,665,5,77,0,0,665,666,5,32,0,0,666,
		667,3,84,42,0,667,668,5,33,0,0,668,681,1,0,0,0,669,670,10,16,0,0,670,671,
		5,74,0,0,671,672,5,32,0,0,672,673,3,84,42,0,673,674,5,33,0,0,674,681,1,
		0,0,0,675,676,10,15,0,0,676,677,5,34,0,0,677,678,3,68,34,0,678,679,5,35,
		0,0,679,681,1,0,0,0,680,617,1,0,0,0,680,620,1,0,0,0,680,623,1,0,0,0,680,
		626,1,0,0,0,680,629,1,0,0,0,680,632,1,0,0,0,680,635,1,0,0,0,680,638,1,
		0,0,0,680,641,1,0,0,0,680,644,1,0,0,0,680,647,1,0,0,0,680,650,1,0,0,0,
		680,653,1,0,0,0,680,656,1,0,0,0,680,662,1,0,0,0,680,669,1,0,0,0,680,675,
		1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,69,1,0,0,0,
		684,682,1,0,0,0,685,703,5,66,0,0,686,703,5,61,0,0,687,703,5,62,0,0,688,
		703,5,64,0,0,689,703,5,65,0,0,690,703,5,77,0,0,691,703,5,60,0,0,692,693,
		5,4,0,0,693,694,5,32,0,0,694,695,3,88,44,0,695,696,5,33,0,0,696,697,5,
		30,0,0,697,698,3,92,46,0,698,699,5,31,0,0,699,703,1,0,0,0,700,703,3,74,
		37,0,701,703,3,78,39,0,702,685,1,0,0,0,702,686,1,0,0,0,702,687,1,0,0,0,
		702,688,1,0,0,0,702,689,1,0,0,0,702,690,1,0,0,0,702,691,1,0,0,0,702,692,
		1,0,0,0,702,700,1,0,0,0,702,701,1,0,0,0,703,71,1,0,0,0,704,705,6,36,-1,
		0,705,706,5,32,0,0,706,707,3,72,36,0,707,708,5,33,0,0,708,713,1,0,0,0,
		709,710,5,48,0,0,710,713,3,72,36,2,711,713,3,8,4,0,712,704,1,0,0,0,712,
		709,1,0,0,0,712,711,1,0,0,0,713,722,1,0,0,0,714,715,10,4,0,0,715,716,5,
		55,0,0,716,721,3,72,36,5,717,718,10,3,0,0,718,719,5,56,0,0,719,721,3,72,
		36,4,720,714,1,0,0,0,720,717,1,0,0,0,721,724,1,0,0,0,722,720,1,0,0,0,722,
		723,1,0,0,0,723,73,1,0,0,0,724,722,1,0,0,0,725,726,5,34,0,0,726,728,3,
		76,38,0,727,729,5,42,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,
		0,730,731,5,35,0,0,731,75,1,0,0,0,732,734,3,68,34,0,733,732,1,0,0,0,733,
		734,1,0,0,0,734,739,1,0,0,0,735,736,5,42,0,0,736,738,3,68,34,0,737,735,
		1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,743,1,0,0,
		0,741,739,1,0,0,0,742,733,1,0,0,0,742,743,1,0,0,0,743,77,1,0,0,0,744,745,
		5,30,0,0,745,747,3,80,40,0,746,748,5,42,0,0,747,746,1,0,0,0,747,748,1,
		0,0,0,748,749,1,0,0,0,749,750,5,31,0,0,750,79,1,0,0,0,751,753,3,82,41,
		0,752,751,1,0,0,0,752,753,1,0,0,0,753,758,1,0,0,0,754,755,5,42,0,0,755,
		757,3,82,41,0,756,754,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,
		1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,761,752,1,0,0,0,761,762,1,0,0,
		0,762,81,1,0,0,0,763,764,5,77,0,0,764,765,5,37,0,0,765,770,3,68,34,0,766,
		767,5,65,0,0,767,768,5,37,0,0,768,770,3,68,34,0,769,763,1,0,0,0,769,766,
		1,0,0,0,770,83,1,0,0,0,771,773,3,86,43,0,772,771,1,0,0,0,772,773,1,0,0,
		0,773,778,1,0,0,0,774,775,5,42,0,0,775,777,3,86,43,0,776,774,1,0,0,0,777,
		780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,782,1,0,0,0,780,778,1,
		0,0,0,781,772,1,0,0,0,781,782,1,0,0,0,782,784,1,0,0,0,783,785,5,42,0,0,
		784,783,1,0,0,0,784,785,1,0,0,0,785,85,1,0,0,0,786,787,5,71,0,0,787,788,
		5,37,0,0,788,791,3,68,34,0,789,791,3,68,34,0,790,786,1,0,0,0,790,789,1,
		0,0,0,791,87,1,0,0,0,792,794,3,90,45,0,793,792,1,0,0,0,793,794,1,0,0,0,
		794,799,1,0,0,0,795,796,5,42,0,0,796,798,3,90,45,0,797,795,1,0,0,0,798,
		801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,803,1,0,0,0,801,799,1,
		0,0,0,802,793,1,0,0,0,802,803,1,0,0,0,803,805,1,0,0,0,804,806,5,42,0,0,
		805,804,1,0,0,0,805,806,1,0,0,0,806,89,1,0,0,0,807,812,5,71,0,0,808,809,
		5,71,0,0,809,810,5,37,0,0,810,812,3,68,34,0,811,807,1,0,0,0,811,808,1,
		0,0,0,812,91,1,0,0,0,813,815,3,94,47,0,814,813,1,0,0,0,815,818,1,0,0,0,
		816,814,1,0,0,0,816,817,1,0,0,0,817,93,1,0,0,0,818,816,1,0,0,0,819,826,
		3,12,6,0,820,826,3,96,48,0,821,826,3,104,52,0,822,826,3,108,54,0,823,826,
		3,114,57,0,824,826,3,120,60,0,825,819,1,0,0,0,825,820,1,0,0,0,825,821,
		1,0,0,0,825,822,1,0,0,0,825,823,1,0,0,0,825,824,1,0,0,0,826,95,1,0,0,0,
		827,828,5,5,0,0,828,829,3,68,34,0,829,833,5,30,0,0,830,832,3,94,47,0,831,
		830,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,836,1,
		0,0,0,835,833,1,0,0,0,836,838,5,31,0,0,837,839,3,98,49,0,838,837,1,0,0,
		0,838,839,1,0,0,0,839,97,1,0,0,0,840,843,3,100,50,0,841,843,3,102,51,0,
		842,840,1,0,0,0,842,841,1,0,0,0,843,99,1,0,0,0,844,845,5,6,0,0,845,849,
		5,30,0,0,846,848,3,94,47,0,847,846,1,0,0,0,848,851,1,0,0,0,849,847,1,0,
		0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,849,1,0,0,0,852,853,5,31,0,0,853,
		101,1,0,0,0,854,855,5,7,0,0,855,856,3,68,34,0,856,860,5,30,0,0,857,859,
		3,94,47,0,858,857,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,1,0,
		0,0,861,863,1,0,0,0,862,860,1,0,0,0,863,865,5,31,0,0,864,866,3,98,49,0,
		865,864,1,0,0,0,865,866,1,0,0,0,866,103,1,0,0,0,867,868,5,22,0,0,868,869,
		3,68,34,0,869,870,5,36,0,0,870,105,1,0,0,0,871,872,5,21,0,0,872,873,5,
		77,0,0,873,874,5,32,0,0,874,875,3,84,42,0,875,876,5,33,0,0,876,107,1,0,
		0,0,877,878,5,10,0,0,878,879,5,71,0,0,879,880,5,11,0,0,880,881,3,68,34,
		0,881,882,5,13,0,0,882,883,3,68,34,0,883,887,5,30,0,0,884,886,3,94,47,
		0,885,884,1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,
		890,1,0,0,0,889,887,1,0,0,0,890,891,5,31,0,0,891,908,1,0,0,0,892,893,5,
		10,0,0,893,894,5,71,0,0,894,895,5,11,0,0,895,896,3,68,34,0,896,897,5,12,
		0,0,897,898,3,68,34,0,898,902,5,30,0,0,899,901,3,94,47,0,900,899,1,0,0,
		0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,905,1,0,0,0,904,
		902,1,0,0,0,905,906,5,31,0,0,906,908,1,0,0,0,907,877,1,0,0,0,907,892,1,
		0,0,0,908,109,1,0,0,0,909,910,5,10,0,0,910,911,5,71,0,0,911,912,5,11,0,
		0,912,913,3,68,34,0,913,914,5,13,0,0,914,915,3,68,34,0,915,919,5,30,0,
		0,916,918,3,2,1,0,917,916,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,0,919,
		920,1,0,0,0,920,922,1,0,0,0,921,919,1,0,0,0,922,923,5,31,0,0,923,940,1,
		0,0,0,924,925,5,10,0,0,925,926,5,71,0,0,926,927,5,11,0,0,927,928,3,68,
		34,0,928,929,5,12,0,0,929,930,3,68,34,0,930,934,5,30,0,0,931,933,3,2,1,
		0,932,931,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,934,935,1,0,0,0,935,
		937,1,0,0,0,936,934,1,0,0,0,937,938,5,31,0,0,938,940,1,0,0,0,939,909,1,
		0,0,0,939,924,1,0,0,0,940,111,1,0,0,0,941,942,5,10,0,0,942,943,5,71,0,
		0,943,944,5,11,0,0,944,945,3,68,34,0,945,946,5,13,0,0,946,947,3,68,34,
		0,947,951,5,30,0,0,948,950,3,48,24,0,949,948,1,0,0,0,950,953,1,0,0,0,951,
		949,1,0,0,0,951,952,1,0,0,0,952,954,1,0,0,0,953,951,1,0,0,0,954,955,5,
		31,0,0,955,972,1,0,0,0,956,957,5,10,0,0,957,958,5,71,0,0,958,959,5,11,
		0,0,959,960,3,68,34,0,960,961,5,12,0,0,961,962,3,68,34,0,962,966,5,30,
		0,0,963,965,3,48,24,0,964,963,1,0,0,0,965,968,1,0,0,0,966,964,1,0,0,0,
		966,967,1,0,0,0,967,969,1,0,0,0,968,966,1,0,0,0,969,970,5,31,0,0,970,972,
		1,0,0,0,971,941,1,0,0,0,971,956,1,0,0,0,972,113,1,0,0,0,973,976,5,14,0,
		0,974,975,5,71,0,0,975,977,5,42,0,0,976,974,1,0,0,0,976,977,1,0,0,0,977,
		978,1,0,0,0,978,979,5,71,0,0,979,980,5,15,0,0,980,981,3,68,34,0,981,985,
		5,30,0,0,982,984,3,94,47,0,983,982,1,0,0,0,984,987,1,0,0,0,985,983,1,0,
		0,0,985,986,1,0,0,0,986,988,1,0,0,0,987,985,1,0,0,0,988,989,5,31,0,0,989,
		115,1,0,0,0,990,993,5,14,0,0,991,992,5,71,0,0,992,994,5,42,0,0,993,991,
		1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,71,0,0,996,997,5,15,
		0,0,997,998,3,68,34,0,998,1002,5,30,0,0,999,1001,3,2,1,0,1000,999,1,0,
		0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1005,1,
		0,0,0,1004,1002,1,0,0,0,1005,1006,5,31,0,0,1006,117,1,0,0,0,1007,1010,
		5,14,0,0,1008,1009,5,71,0,0,1009,1011,5,42,0,0,1010,1008,1,0,0,0,1010,
		1011,1,0,0,0,1011,1012,1,0,0,0,1012,1013,5,71,0,0,1013,1014,5,15,0,0,1014,
		1015,3,68,34,0,1015,1019,5,30,0,0,1016,1018,3,48,24,0,1017,1016,1,0,0,
		0,1018,1021,1,0,0,0,1019,1017,1,0,0,0,1019,1020,1,0,0,0,1020,1022,1,0,
		0,0,1021,1019,1,0,0,0,1022,1023,5,31,0,0,1023,119,1,0,0,0,1024,1025,5,
		9,0,0,1025,1026,3,68,34,0,1026,1030,5,30,0,0,1027,1029,3,94,47,0,1028,
		1027,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,
		1033,1,0,0,0,1032,1030,1,0,0,0,1033,1034,5,31,0,0,1034,121,1,0,0,0,1035,
		1036,5,9,0,0,1036,1037,3,68,34,0,1037,1041,5,30,0,0,1038,1040,3,2,1,0,
		1039,1038,1,0,0,0,1040,1043,1,0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,
		0,1042,1044,1,0,0,0,1043,1041,1,0,0,0,1044,1045,5,31,0,0,1045,123,1,0,
		0,0,1046,1047,5,9,0,0,1047,1048,3,68,34,0,1048,1052,5,30,0,0,1049,1051,
		3,48,24,0,1050,1049,1,0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,0,1052,1053,
		1,0,0,0,1053,1055,1,0,0,0,1054,1052,1,0,0,0,1055,1056,5,31,0,0,1056,125,
		1,0,0,0,96,129,146,157,162,193,212,218,246,256,282,287,291,298,309,314,
		324,335,343,346,361,371,397,407,409,423,433,457,464,466,472,486,494,499,
		503,510,521,526,541,549,557,565,573,579,593,615,680,682,702,712,720,722,
		728,733,739,742,747,752,758,761,769,772,778,781,784,790,793,799,802,805,
		811,816,825,833,838,842,849,860,865,887,902,907,919,934,939,951,966,971,
		976,985,993,1002,1010,1019,1030,1041,1052
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SassyPatchGrammar
