//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/arall/PatchManager/src/PatchManager.SassyPatching/SassyPatchGrammar\sassy_parser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SassyPatchGrammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class sassy_parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, SPACE=2, USE=3, FUNCTION=4, PRE_IF=5, PRE_ELSE=6, PRE_ELSE_IF=7, 
		MIXIN=8, WHILE=9, FOR=10, FROM=11, THROUGH=12, TO=13, EACH=14, IN=15, 
		SET=16, MERGE=17, REQUIRE=18, STAGE=19, DEFINE_STAGE=20, INCLUDE=21, RETURN=22, 
		PATCH=23, NEW=24, BEFORE=25, AFTER=26, GLOBAL=27, CREATE_CONFIG=28, UPDATE_CONFIG=29, 
		LEFT_BRACE=30, RIGHT_BRACE=31, LEFT_PAREN=32, RIGHT_PAREN=33, LEFT_BRACKET=34, 
		RIGHT_BRACKET=35, SEMICOLON=36, COLON=37, COMMA=38, ADD=39, SUBTRACT=40, 
		MULTIPLY=41, DIVIDE=42, MODULUS=43, NOT=44, GREATER_THAN=45, GREATER_THAN_EQUAL=46, 
		LESSER_THAN=47, LESSER_THAN_EQUAL=48, EQUAL_TO=49, NOT_EQUAL_TO=50, AND=51, 
		OR=52, IF=53, ELSE=54, WITHOUT=55, NONE=56, TRUE=57, FALSE=58, HEX_NUMBER=59, 
		NUMBER=60, STRING=61, DELETE=62, NAME=63, CLASS=64, VARIABLE=65, LOCALVARIABLE=66, 
		RULESET=67, ENSURE=68, ELEMENT=69;
	public const int
		RULE_patch = 0, RULE_top_level_statement = 1, RULE_patch_declaration = 2, 
		RULE_patch_list = 3, RULE_import_declaration = 4, RULE_var_decl = 5, RULE_stage_def = 6, 
		RULE_config_creation = 7, RULE_config_mutation = 8, RULE_stage_attribute = 9, 
		RULE_function_def = 10, RULE_mixin_def = 11, RULE_top_level_conditional = 12, 
		RULE_top_level_else = 13, RULE_top_level_else_else = 14, RULE_top_level_else_if = 15, 
		RULE_selection_block = 16, RULE_attributed_selector = 17, RULE_attribute = 18, 
		RULE_constructor_arguments = 19, RULE_selector = 20, RULE_selector_no_children = 21, 
		RULE_selector_body = 22, RULE_selector_statement = 23, RULE_sel_level_conditional = 24, 
		RULE_sel_level_else = 25, RULE_sel_level_else_else = 26, RULE_sel_level_else_if = 27, 
		RULE_set_value = 28, RULE_delete_value = 29, RULE_merge_value = 30, RULE_field_set = 31, 
		RULE_index = 32, RULE_expression = 33, RULE_sub_expression = 34, RULE_value = 35, 
		RULE_require_expression = 36, RULE_list = 37, RULE_list_values = 38, RULE_obj = 39, 
		RULE_obj_values = 40, RULE_key_value = 41, RULE_argument_list = 42, RULE_argument = 43, 
		RULE_arg_decl_list = 44, RULE_arg_decl = 45, RULE_function_body = 46, 
		RULE_function_statement = 47, RULE_fn_level_conditional = 48, RULE_fn_level_else = 49, 
		RULE_fn_level_else_else = 50, RULE_fn_level_else_if = 51, RULE_fn_return = 52, 
		RULE_mixin_include = 53, RULE_for_loop = 54, RULE_each_loop = 55, RULE_while_loop = 56;
	public static readonly string[] ruleNames = {
		"patch", "top_level_statement", "patch_declaration", "patch_list", "import_declaration", 
		"var_decl", "stage_def", "config_creation", "config_mutation", "stage_attribute", 
		"function_def", "mixin_def", "top_level_conditional", "top_level_else", 
		"top_level_else_else", "top_level_else_if", "selection_block", "attributed_selector", 
		"attribute", "constructor_arguments", "selector", "selector_no_children", 
		"selector_body", "selector_statement", "sel_level_conditional", "sel_level_else", 
		"sel_level_else_else", "sel_level_else_if", "set_value", "delete_value", 
		"merge_value", "field_set", "index", "expression", "sub_expression", "value", 
		"require_expression", "list", "list_values", "obj", "obj_values", "key_value", 
		"argument_list", "argument", "arg_decl_list", "arg_decl", "function_body", 
		"function_statement", "fn_level_conditional", "fn_level_else", "fn_level_else_else", 
		"fn_level_else_if", "fn_return", "mixin_include", "for_loop", "each_loop", 
		"while_loop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'@use'", "'@function'", "'@if'", "'@else'", "'@else-if'", 
		"'@mixin'", "'@while'", "'@for'", "'from'", "'through'", "'to'", "'@each'", 
		"'in'", "'@set'", "'@merge'", "'@require'", "'@stage'", "'@define-stage'", 
		"'@include'", "'@return'", "'@patch'", "'@new'", "'@before'", "'@after'", 
		"'@global'", "'@create-config'", "'@update-config'", "'{'", "'}'", "'('", 
		"')'", "'['", "']'", "';'", "':'", "','", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'not'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'and'", 
		"'or'", "'if'", "'else'", "'~'", "'null'", "'true'", "'false'", null, 
		null, null, "'@delete'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "SPACE", "USE", "FUNCTION", "PRE_IF", "PRE_ELSE", "PRE_ELSE_IF", 
		"MIXIN", "WHILE", "FOR", "FROM", "THROUGH", "TO", "EACH", "IN", "SET", 
		"MERGE", "REQUIRE", "STAGE", "DEFINE_STAGE", "INCLUDE", "RETURN", "PATCH", 
		"NEW", "BEFORE", "AFTER", "GLOBAL", "CREATE_CONFIG", "UPDATE_CONFIG", 
		"LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", 
		"RIGHT_BRACKET", "SEMICOLON", "COLON", "COMMA", "ADD", "SUBTRACT", "MULTIPLY", 
		"DIVIDE", "MODULUS", "NOT", "GREATER_THAN", "GREATER_THAN_EQUAL", "LESSER_THAN", 
		"LESSER_THAN_EQUAL", "EQUAL_TO", "NOT_EQUAL_TO", "AND", "OR", "IF", "ELSE", 
		"WITHOUT", "NONE", "TRUE", "FALSE", "HEX_NUMBER", "NUMBER", "STRING", 
		"DELETE", "NAME", "CLASS", "VARIABLE", "LOCALVARIABLE", "RULESET", "ENSURE", 
		"ELEMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sassy_parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static sassy_parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sassy_parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sassy_parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(sassy_parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public PatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatchContext patch() {
		PatchContext _localctx = new PatchContext(Context, State);
		EnterRule(_localctx, 0, RULE_patch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 114;
				top_level_statement();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -9187340485929467592L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0) );
			State = 119;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_declarationContext import_declaration() {
			return GetRuleContext<Import_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_defContext stage_def() {
			return GetRuleContext<Stage_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_defContext mixin_def() {
			return GetRuleContext<Mixin_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_conditionalContext top_level_conditional() {
			return GetRuleContext<Top_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Patch_declarationContext patch_declaration() {
			return GetRuleContext<Patch_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_creationContext config_creation() {
			return GetRuleContext<Config_creationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_mutationContext config_mutation() {
			return GetRuleContext<Config_mutationContext>(0);
		}
		public Top_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementContext top_level_statement() {
		Top_level_statementContext _localctx = new Top_level_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_top_level_statement);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				import_declaration();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				var_decl();
				}
				break;
			case DEFINE_STAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				stage_def();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				function_def();
				}
				break;
			case MIXIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 125;
				mixin_def();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 126;
				top_level_conditional();
				}
				break;
			case REQUIRE:
			case STAGE:
			case NEW:
			case LEFT_PAREN:
			case ADD:
			case MULTIPLY:
			case WITHOUT:
			case NAME:
			case CLASS:
			case RULESET:
			case ENSURE:
			case ELEMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 127;
				selection_block();
				}
				break;
			case PATCH:
				EnterOuterAlt(_localctx, 8);
				{
				State = 128;
				patch_declaration();
				}
				break;
			case CREATE_CONFIG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 129;
				config_creation();
				}
				break;
			case UPDATE_CONFIG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 130;
				config_mutation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Patch_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(sassy_parser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Patch_listContext patch_list() {
			return GetRuleContext<Patch_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Patch_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Patch_declarationContext patch_declaration() {
		Patch_declarationContext _localctx = new Patch_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_patch_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(PATCH);
			State = 134;
			patch_list();
			State = 135;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Patch_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(sassy_parser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(sassy_parser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Patch_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Patch_listContext patch_list() {
		Patch_listContext _localctx = new Patch_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_patch_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(STRING);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 138;
				Match(COMMA);
				State = 139;
				Match(STRING);
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_declarationContext : ParserRuleContext {
		public IToken imp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(sassy_parser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Import_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_declarationContext import_declaration() {
		Import_declarationContext _localctx = new Import_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(USE);
			State = 146;
			_localctx.imp = Match(STRING);
			State = 147;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public IToken variable;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 10, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_localctx.variable = Match(VARIABLE);
			State = 150;
			Match(COLON);
			State = 151;
			_localctx.val = expression();
			State = 152;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_defContext : ParserRuleContext {
		public Stage_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_def; } }
	 
		public Stage_defContext() { }
		public virtual void CopyFrom(Stage_defContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Implicit_stage_defContext : Stage_defContext {
		public IToken stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Implicit_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Relative_stage_defContext : Stage_defContext {
		public IToken stage;
		public Stage_attributeContext attributes;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stage_attributeContext[] stage_attribute() {
			return GetRuleContexts<Stage_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_attributeContext stage_attribute(int i) {
			return GetRuleContext<Stage_attributeContext>(i);
		}
		public Relative_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRelative_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRelative_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelative_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Global_stage_defContext : Stage_defContext {
		public IToken stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(sassy_parser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Global_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGlobal_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGlobal_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_defContext stage_def() {
		Stage_defContext _localctx = new Stage_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_stage_def);
		int _la;
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new Implicit_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				Match(DEFINE_STAGE);
				State = 155;
				((Implicit_stage_defContext)_localctx).stage = Match(STRING);
				State = 156;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Global_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				Match(DEFINE_STAGE);
				State = 158;
				((Global_stage_defContext)_localctx).stage = Match(STRING);
				State = 159;
				Match(COLON);
				State = 160;
				Match(GLOBAL);
				State = 161;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new Relative_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 162;
				Match(DEFINE_STAGE);
				State = 163;
				((Relative_stage_defContext)_localctx).stage = Match(STRING);
				State = 164;
				Match(COLON);
				State = 165;
				Match(LEFT_BRACE);
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BEFORE || _la==AFTER) {
					{
					{
					State = 166;
					((Relative_stage_defContext)_localctx).attributes = stage_attribute();
					}
					}
					State = 171;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 172;
				Match(RIGHT_BRACE);
				State = 173;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_creationContext : ParserRuleContext {
		public IToken label;
		public IToken config_name;
		public Sub_expressionContext config_value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_CONFIG() { return GetToken(sassy_parser.CREATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(sassy_parser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(sassy_parser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Config_creationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_creation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterConfig_creation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitConfig_creation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfig_creation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Config_creationContext config_creation() {
		Config_creationContext _localctx = new Config_creationContext(Context, State);
		EnterRule(_localctx, 14, RULE_config_creation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(CREATE_CONFIG);
			State = 177;
			_localctx.label = Match(STRING);
			State = 178;
			Match(COMMA);
			State = 179;
			_localctx.config_name = Match(STRING);
			State = 180;
			Match(COLON);
			State = 181;
			_localctx.config_value = sub_expression(0);
			State = 182;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_mutationContext : ParserRuleContext {
		public Config_mutationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_mutation; } }
	 
		public Config_mutationContext() { }
		public virtual void CopyFrom(Config_mutationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Update_config_labelContext : Config_mutationContext {
		public Sub_expressionContext priority;
		public IToken label;
		public ExpressionContext config_update;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_CONFIG() { return GetToken(sassy_parser.UPDATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Update_config_labelContext(Config_mutationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUpdate_config_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUpdate_config_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_config_label(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Update_config_fullContext : Config_mutationContext {
		public Sub_expressionContext priority;
		public IToken label;
		public IToken config_name;
		public ExpressionContext config_update;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_CONFIG() { return GetToken(sassy_parser.UPDATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(sassy_parser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(sassy_parser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Update_config_fullContext(Config_mutationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUpdate_config_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUpdate_config_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_config_full(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Config_mutationContext config_mutation() {
		Config_mutationContext _localctx = new Config_mutationContext(Context, State);
		EnterRule(_localctx, 16, RULE_config_mutation);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new Update_config_fullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				Match(UPDATE_CONFIG);
				State = 185;
				((Update_config_fullContext)_localctx).priority = sub_expression(0);
				State = 186;
				Match(COMMA);
				State = 187;
				((Update_config_fullContext)_localctx).label = Match(STRING);
				State = 188;
				Match(COMMA);
				State = 189;
				((Update_config_fullContext)_localctx).config_name = Match(STRING);
				State = 190;
				Match(COLON);
				State = 191;
				((Update_config_fullContext)_localctx).config_update = expression();
				State = 192;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Update_config_labelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(UPDATE_CONFIG);
				State = 195;
				((Update_config_labelContext)_localctx).priority = sub_expression(0);
				State = 196;
				Match(COMMA);
				State = 197;
				((Update_config_labelContext)_localctx).label = Match(STRING);
				State = 198;
				Match(COLON);
				State = 199;
				((Update_config_labelContext)_localctx).config_update = expression();
				State = 200;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_attributeContext : ParserRuleContext {
		public Stage_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_attribute; } }
	 
		public Stage_attributeContext() { }
		public virtual void CopyFrom(Stage_attributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Stage_value_beforeContext : Stage_attributeContext {
		public IToken stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(sassy_parser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Stage_value_beforeContext(Stage_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterStage_value_before(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitStage_value_before(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_value_before(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stage_value_afterContext : Stage_attributeContext {
		public IToken stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(sassy_parser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Stage_value_afterContext(Stage_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterStage_value_after(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitStage_value_after(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_value_after(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_attributeContext stage_attribute() {
		Stage_attributeContext _localctx = new Stage_attributeContext(Context, State);
		EnterRule(_localctx, 18, RULE_stage_attribute);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				_localctx = new Stage_value_beforeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				Match(BEFORE);
				State = 205;
				((Stage_value_beforeContext)_localctx).stage = Match(STRING);
				State = 206;
				Match(SEMICOLON);
				}
				break;
			case AFTER:
				_localctx = new Stage_value_afterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				Match(AFTER);
				State = 208;
				((Stage_value_afterContext)_localctx).stage = Match(STRING);
				State = 209;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(FUNCTION);
			State = 213;
			_localctx.name = Match(ELEMENT);
			State = 214;
			Match(LEFT_PAREN);
			State = 215;
			_localctx.args = arg_decl_list();
			State = 216;
			Match(RIGHT_PAREN);
			State = 217;
			Match(LEFT_BRACE);
			State = 218;
			_localctx.body = function_body();
			State = 219;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Selector_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIXIN() { return GetToken(sassy_parser.MIXIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		public Mixin_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_defContext mixin_def() {
		Mixin_defContext _localctx = new Mixin_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_mixin_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(MIXIN);
			State = 222;
			_localctx.name = Match(ELEMENT);
			State = 223;
			Match(LEFT_PAREN);
			State = 224;
			_localctx.args = arg_decl_list();
			State = 225;
			Match(RIGHT_PAREN);
			State = 226;
			Match(LEFT_BRACE);
			State = 227;
			_localctx.body = selector_body();
			State = 228;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_conditionalContext top_level_conditional() {
		Top_level_conditionalContext _localctx = new Top_level_conditionalContext(Context, State);
		EnterRule(_localctx, 24, RULE_top_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(PRE_IF);
			State = 231;
			_localctx.cond = sub_expression(0);
			State = 232;
			Match(LEFT_BRACE);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9187340485929467592L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				{
				State = 233;
				_localctx.body = top_level_statement();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 239;
			Match(RIGHT_BRACE);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 240;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_elseContext top_level_else_else() {
			return GetRuleContext<Top_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_ifContext top_level_else_if() {
			return GetRuleContext<Top_level_else_ifContext>(0);
		}
		public Top_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_elseContext top_level_else() {
		Top_level_elseContext _localctx = new Top_level_elseContext(Context, State);
		EnterRule(_localctx, 26, RULE_top_level_else);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				top_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				top_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_elseContext : ParserRuleContext {
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_elseContext top_level_else_else() {
		Top_level_else_elseContext _localctx = new Top_level_else_elseContext(Context, State);
		EnterRule(_localctx, 28, RULE_top_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(PRE_ELSE);
			State = 248;
			Match(LEFT_BRACE);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9187340485929467592L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				{
				State = 249;
				_localctx.body = top_level_statement();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 255;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_ifContext top_level_else_if() {
		Top_level_else_ifContext _localctx = new Top_level_else_ifContext(Context, State);
		EnterRule(_localctx, 30, RULE_top_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(PRE_ELSE_IF);
			State = 258;
			_localctx.cond = sub_expression(0);
			State = 259;
			Match(LEFT_BRACE);
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9187340485929467592L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				{
				State = 260;
				_localctx.body = top_level_statement();
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 266;
			Match(RIGHT_BRACE);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 267;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attributed_selectorContext attributed_selector() {
			return GetRuleContext<Attributed_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		public Selection_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_blockContext selection_block() {
		Selection_blockContext _localctx = new Selection_blockContext(Context, State);
		EnterRule(_localctx, 32, RULE_selection_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			attributed_selector();
			State = 271;
			Match(LEFT_BRACE);
			State = 272;
			selector_body();
			State = 273;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attributed_selectorContext : ParserRuleContext {
		public AttributeContext attributes;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributed_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_selector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attributed_selectorContext attributed_selector() {
		Attributed_selectorContext _localctx = new Attributed_selectorContext(Context, State);
		EnterRule(_localctx, 34, RULE_attributed_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17563648L) != 0)) {
				{
				{
				State = 275;
				_localctx.attributes = attribute();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 281;
			selector(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	 
		public AttributeContext() { }
		public virtual void CopyFrom(AttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Run_at_stageContext : AttributeContext {
		public IToken stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAGE() { return GetToken(sassy_parser.STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Run_at_stageContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRun_at_stage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_modContext : AttributeContext {
		public Require_expressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(sassy_parser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_modContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_mod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class New_assetContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(sassy_parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_argumentsContext constructor_arguments() {
			return GetRuleContext<Constructor_argumentsContext>(0);
		}
		public New_assetContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNew_asset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNew_asset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_asset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 36, RULE_attribute);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE:
				_localctx = new Require_modContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				Match(REQUIRE);
				State = 284;
				((Require_modContext)_localctx).expr = require_expression(0);
				}
				break;
			case STAGE:
				_localctx = new Run_at_stageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 285;
				Match(STAGE);
				State = 286;
				((Run_at_stageContext)_localctx).stage = Match(STRING);
				}
				break;
			case NEW:
				_localctx = new New_assetContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 287;
				Match(NEW);
				State = 288;
				constructor_arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Constructor_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterConstructor_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitConstructor_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_argumentsContext constructor_arguments() {
		Constructor_argumentsContext _localctx = new Constructor_argumentsContext(Context, State);
		EnterRule(_localctx, 38, RULE_constructor_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(LEFT_PAREN);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8574879551585255440L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 19L) != 0)) {
				{
				State = 292;
				expression();
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 293;
					Match(COMMA);
					State = 294;
					expression();
					}
					}
					State = 299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 302;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sel_class_captureContext : SelectorContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Sel_class_captureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_class_capture(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_childContext : SelectorContext {
		public SelectorContext parent;
		public Selector_no_childrenContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_childContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_child(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_classContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_nameContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_intersectionContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_intersectionContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_intersection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_ensureContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENSURE() { return GetToken(sassy_parser.ENSURE, 0); }
		public Sel_ensureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_ensure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_everythingContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public Sel_everythingContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_everything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_elementContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_rulesetContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Sel_rulesetContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_add_elementContext : SelectorContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_add_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_add_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_classContext : SelectorContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_without_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_nameContext : SelectorContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_without_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_combinationContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_combinationContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_combination(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_subContext : SelectorContext {
		public SelectorContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Sel_subContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		return selector(0);
	}

	private SelectorContext selector(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectorContext _localctx = new SelectorContext(Context, _parentState);
		SelectorContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_selector, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				_localctx = new Sel_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 305;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new Sel_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 306;
				Match(CLASS);
				}
				break;
			case 3:
				{
				_localctx = new Sel_class_captureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 307;
				Match(CLASS);
				State = 308;
				Match(COLON);
				State = 309;
				Match(LEFT_BRACKET);
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
					{
					{
					State = 310;
					((Sel_class_captureContext)_localctx).body = function_statement();
					}
					}
					State = 315;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 316;
				Match(RIGHT_BRACKET);
				}
				break;
			case 4:
				{
				_localctx = new Sel_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 317;
				Match(NAME);
				}
				break;
			case 5:
				{
				_localctx = new Sel_rulesetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 318;
				Match(RULESET);
				}
				break;
			case 6:
				{
				_localctx = new Sel_ensureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 319;
				Match(ENSURE);
				}
				break;
			case 7:
				{
				_localctx = new Sel_subContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 320;
				Match(LEFT_PAREN);
				State = 321;
				((Sel_subContext)_localctx).internal_selector = selector(0);
				State = 322;
				Match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new Sel_add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 324;
				Match(ADD);
				State = 325;
				((Sel_add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 9:
				{
				_localctx = new Sel_without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 326;
				Match(WITHOUT);
				State = 327;
				((Sel_without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 10:
				{
				_localctx = new Sel_without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 328;
				Match(WITHOUT);
				State = 329;
				((Sel_without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 11:
				{
				_localctx = new Sel_everythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 330;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 341;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new Sel_combinationContext(new SelectorContext(_parentctx, _parentState));
						((Sel_combinationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 333;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 334;
						Match(COMMA);
						State = 335;
						((Sel_combinationContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					case 2:
						{
						_localctx = new Sel_childContext(new SelectorContext(_parentctx, _parentState));
						((Sel_childContext)_localctx).parent = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 336;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 337;
						Match(GREATER_THAN);
						State = 338;
						((Sel_childContext)_localctx).child = selector_no_children(0);
						}
						break;
					case 3:
						{
						_localctx = new Sel_intersectionContext(new SelectorContext(_parentctx, _parentState));
						((Sel_intersectionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 339;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 340;
						((Sel_intersectionContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					}
					} 
				}
				State = 345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_no_childrenContext : ParserRuleContext {
		public Selector_no_childrenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_no_children; } }
	 
		public Selector_no_childrenContext() { }
		public virtual void CopyFrom(Selector_no_childrenContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ruleset_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Ruleset_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Combination_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Combination_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombination_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_capture_selectorContext : Selector_no_childrenContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Class_capture_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_capture_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_nameContext : Selector_no_childrenContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Without_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sub_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_classContext : Selector_no_childrenContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Without_classContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public NameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_elementContext : Selector_no_childrenContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Add_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EverythingContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public EverythingContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEverything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Intersection_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Intersection_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersection_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public ElementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_no_childrenContext selector_no_children() {
		return selector_no_children(0);
	}

	private Selector_no_childrenContext selector_no_children(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Selector_no_childrenContext _localctx = new Selector_no_childrenContext(Context, _parentState);
		Selector_no_childrenContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_selector_no_children, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new ElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 347;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new Class_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 348;
				Match(CLASS);
				}
				break;
			case 3:
				{
				_localctx = new Class_capture_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 349;
				Match(CLASS);
				State = 350;
				Match(COLON);
				State = 351;
				Match(LEFT_BRACKET);
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
					{
					{
					State = 352;
					((Class_capture_selectorContext)_localctx).body = function_statement();
					}
					}
					State = 357;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 358;
				Match(RIGHT_BRACKET);
				}
				break;
			case 4:
				{
				_localctx = new NameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 359;
				Match(NAME);
				}
				break;
			case 5:
				{
				_localctx = new Ruleset_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 360;
				Match(RULESET);
				}
				break;
			case 6:
				{
				_localctx = new Sub_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361;
				Match(LEFT_PAREN);
				State = 362;
				((Sub_selectorContext)_localctx).internal_selector = selector_no_children(0);
				State = 363;
				Match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new Add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 365;
				Match(ADD);
				State = 366;
				((Add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 8:
				{
				_localctx = new Without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 367;
				Match(WITHOUT);
				State = 368;
				((Without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 9:
				{
				_localctx = new Without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 369;
				Match(WITHOUT);
				State = 370;
				((Without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 10:
				{
				_localctx = new EverythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 371;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 381;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 379;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new Combination_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Combination_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 374;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 375;
						Match(COMMA);
						State = 376;
						((Combination_selectorContext)_localctx).rhs = selector_no_children(7);
						}
						break;
					case 2:
						{
						_localctx = new Intersection_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Intersection_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 377;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 378;
						((Intersection_selectorContext)_localctx).rhs = selector_no_children(6);
						}
						break;
					}
					} 
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Selector_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_bodyContext selector_body() {
		Selector_bodyContext _localctx = new Selector_bodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_selector_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2269811459100835808L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				{
				State = 384;
				selector_statement();
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_conditionalContext sel_level_conditional() {
			return GetRuleContext<Sel_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_valueContext set_value() {
			return GetRuleContext<Set_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_valueContext delete_value() {
			return GetRuleContext<Delete_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_valueContext merge_value() {
			return GetRuleContext<Merge_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_setContext field_set() {
			return GetRuleContext<Field_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_includeContext mixin_include() {
			return GetRuleContext<Mixin_includeContext>(0);
		}
		public Selector_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_statementContext selector_statement() {
		Selector_statementContext _localctx = new Selector_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_selector_statement);
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				var_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				sel_level_conditional();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392;
				set_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 393;
				delete_value();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 394;
				merge_value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 395;
				field_set();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 396;
				selection_block();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 397;
				mixin_include();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_conditionalContext sel_level_conditional() {
		Sel_level_conditionalContext _localctx = new Sel_level_conditionalContext(Context, State);
		EnterRule(_localctx, 48, RULE_sel_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(PRE_IF);
			State = 401;
			_localctx.cond = sub_expression(0);
			State = 402;
			Match(LEFT_BRACE);
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2269811459100835808L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				{
				State = 403;
				_localctx.body = selector_statement();
				}
				}
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 409;
			Match(RIGHT_BRACE);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 410;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_elseContext sel_level_else_else() {
			return GetRuleContext<Sel_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_ifContext sel_level_else_if() {
			return GetRuleContext<Sel_level_else_ifContext>(0);
		}
		public Sel_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_elseContext sel_level_else() {
		Sel_level_elseContext _localctx = new Sel_level_elseContext(Context, State);
		EnterRule(_localctx, 50, RULE_sel_level_else);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413;
				sel_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414;
				sel_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_elseContext : ParserRuleContext {
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_elseContext sel_level_else_else() {
		Sel_level_else_elseContext _localctx = new Sel_level_else_elseContext(Context, State);
		EnterRule(_localctx, 52, RULE_sel_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(PRE_ELSE);
			State = 418;
			Match(LEFT_BRACE);
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2269811459100835808L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				{
				State = 419;
				_localctx.body = selector_statement();
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 425;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_ifContext sel_level_else_if() {
		Sel_level_else_ifContext _localctx = new Sel_level_else_ifContext(Context, State);
		EnterRule(_localctx, 54, RULE_sel_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(PRE_ELSE_IF);
			State = 428;
			_localctx.cond = sub_expression(0);
			State = 429;
			Match(LEFT_BRACE);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2269811459100835808L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 59L) != 0)) {
				{
				{
				State = 430;
				_localctx.body = selector_statement();
				}
				}
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 436;
			Match(RIGHT_BRACE);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 437;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_valueContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(sassy_parser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Set_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_valueContext set_value() {
		Set_valueContext _localctx = new Set_valueContext(Context, State);
		EnterRule(_localctx, 56, RULE_set_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(SET);
			State = 441;
			_localctx.expr = expression();
			State = 442;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Delete_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_valueContext delete_value() {
		Delete_valueContext _localctx = new Delete_valueContext(Context, State);
		EnterRule(_localctx, 58, RULE_delete_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(DELETE);
			State = 445;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_valueContext : ParserRuleContext {
		public Sub_expressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(sassy_parser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Merge_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_valueContext merge_value() {
		Merge_valueContext _localctx = new Merge_valueContext(Context, State);
		EnterRule(_localctx, 60, RULE_merge_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(MERGE);
			State = 448;
			_localctx.expr = sub_expression(0);
			State = 449;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_setContext : ParserRuleContext {
		public Field_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_set; } }
	 
		public Field_setContext() { }
		public virtual void CopyFrom(Field_setContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_key_fieldContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public String_key_fieldContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_key_field(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_key_fieldContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public Element_key_fieldContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_key_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_setContext field_set() {
		Field_setContext _localctx = new Field_setContext(Context, State);
		EnterRule(_localctx, 62, RULE_field_set);
		int _la;
		try {
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				_localctx = new Element_key_fieldContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				Match(ELEMENT);
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 452;
					((Element_key_fieldContext)_localctx).indexor = index();
					}
				}

				State = 455;
				Match(COLON);
				State = 456;
				((Element_key_fieldContext)_localctx).expr = expression();
				State = 457;
				Match(SEMICOLON);
				}
				break;
			case STRING:
				_localctx = new String_key_fieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				Match(STRING);
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 460;
					((String_key_fieldContext)_localctx).indexor = index();
					}
				}

				State = 463;
				Match(COLON);
				State = 464;
				((String_key_fieldContext)_localctx).expr = expression();
				State = 465;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
	 
		public IndexContext() { }
		public virtual void CopyFrom(IndexContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_indexorContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_indexorContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Element_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_indexorContext : IndexContext {
		public IToken num;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_indexorContext : IndexContext {
		public IToken clazz;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 64, RULE_index);
		try {
			State = 481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new Number_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 469;
				Match(LEFT_BRACKET);
				State = 470;
				((Number_indexorContext)_localctx).num = Match(NUMBER);
				State = 471;
				Match(RIGHT_BRACKET);
				}
				break;
			case 2:
				_localctx = new Element_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 472;
				Match(LEFT_BRACKET);
				State = 473;
				((Element_indexorContext)_localctx).elem = Match(ELEMENT);
				State = 474;
				Match(RIGHT_BRACKET);
				}
				break;
			case 3:
				_localctx = new Class_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 475;
				Match(LEFT_BRACKET);
				State = 476;
				((Class_indexorContext)_localctx).clazz = Match(CLASS);
				State = 477;
				Match(RIGHT_BRACKET);
				}
				break;
			case 4:
				_localctx = new String_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 478;
				Match(LEFT_BRACKET);
				State = 479;
				((String_indexorContext)_localctx).elem = Match(STRING);
				State = 480;
				Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Implicit_divideContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(sassy_parser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_divideContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_divide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_divide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_divide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NormalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_multiplyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_multiplyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_multiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_multiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_multiply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_addContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_subtractContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_subtractContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_subtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_subtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_subtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_expression);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new Implicit_addContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				Match(ADD);
				State = 484;
				sub_expression(0);
				}
				break;
			case 2:
				_localctx = new Implicit_subtractContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 485;
				Match(SUBTRACT);
				State = 486;
				sub_expression(0);
				}
				break;
			case 3:
				_localctx = new Implicit_multiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 487;
				Match(MULTIPLY);
				State = 488;
				sub_expression(0);
				}
				break;
			case 4:
				_localctx = new Implicit_divideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 489;
				Match(DIVIDE);
				State = 490;
				sub_expression(0);
				}
				break;
			case 5:
				_localctx = new NormalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 491;
				sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_expressionContext : ParserRuleContext {
		public Sub_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_expression; } }
	 
		public Sub_expressionContext() { }
		public virtual void CopyFrom(Sub_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Not_equal_toContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_TO() { return GetToken(sassy_parser.NOT_EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Not_equal_toContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_equal_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Variable_referenceContext : Sub_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Variable_referenceContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equal_toContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_TO() { return GetToken(sassy_parser.EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Equal_toContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_variable_referenceContext : Sub_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALVARIABLE() { return GetToken(sassy_parser.LOCALVARIABLE, 0); }
		public Local_variable_referenceContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_call_rulesetContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_call_rulesetContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_referenceContext : Sub_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Value_referenceContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public SubtractionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(sassy_parser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public DivisionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NegativeContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(sassy_parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NotContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_thanContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN() { return GetToken(sassy_parser.LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Lesser_thanContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_callContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public IToken name;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_callContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_thanContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Greater_thanContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sassy_parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public AndContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_sub_expressionContext : Sub_expressionContext {
		public Sub_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Sub_sub_expressionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_sub_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public MultiplicationContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_than_equalContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_EQUAL() { return GetToken(sassy_parser.GREATER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Greater_than_equalContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public AdditionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexorContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public IndexorContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(sassy_parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public OrContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_than_equalContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN_EQUAL() { return GetToken(sassy_parser.LESSER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Lesser_than_equalContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositiveContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public PositiveContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_callContext : Sub_expressionContext {
		public IToken lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Simple_callContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RemainderContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULUS() { return GetToken(sassy_parser.MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public RemainderContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext cond;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(sassy_parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(sassy_parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public TernaryContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_expressionContext sub_expression() {
		return sub_expression(0);
	}

	private Sub_expressionContext sub_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Sub_expressionContext _localctx = new Sub_expressionContext(Context, _parentState);
		Sub_expressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_sub_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case NONE:
			case TRUE:
			case FALSE:
			case NUMBER:
			case STRING:
			case DELETE:
				{
				_localctx = new Value_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 495;
				value();
				}
				break;
			case VARIABLE:
				{
				_localctx = new Variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 496;
				Match(VARIABLE);
				}
				break;
			case LOCALVARIABLE:
				{
				_localctx = new Local_variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 497;
				Match(LOCALVARIABLE);
				}
				break;
			case LEFT_PAREN:
				{
				_localctx = new Sub_sub_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 498;
				Match(LEFT_PAREN);
				State = 499;
				((Sub_sub_expressionContext)_localctx).internal_expr = sub_expression(0);
				State = 500;
				Match(RIGHT_PAREN);
				}
				break;
			case SUBTRACT:
				{
				_localctx = new NegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 502;
				Match(SUBTRACT);
				State = 503;
				((NegativeContext)_localctx).child = sub_expression(21);
				}
				break;
			case ADD:
				{
				_localctx = new PositiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 504;
				Match(ADD);
				State = 505;
				((PositiveContext)_localctx).child = sub_expression(20);
				}
				break;
			case NOT:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 506;
				Match(NOT);
				State = 507;
				((NotContext)_localctx).child = sub_expression(19);
				}
				break;
			case ELEMENT:
				{
				_localctx = new Simple_callContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 508;
				((Simple_callContext)_localctx).lhs = Match(ELEMENT);
				State = 509;
				Match(LEFT_PAREN);
				State = 510;
				((Simple_callContext)_localctx).args = argument_list();
				State = 511;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 580;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 578;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new Sub_expressionContext(_parentctx, _parentState));
						((MultiplicationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 515;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 516;
						Match(MULTIPLY);
						State = 517;
						((MultiplicationContext)_localctx).rhs = sub_expression(15);
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new Sub_expressionContext(_parentctx, _parentState));
						((DivisionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 518;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 519;
						Match(DIVIDE);
						State = 520;
						((DivisionContext)_localctx).rhs = sub_expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RemainderContext(new Sub_expressionContext(_parentctx, _parentState));
						((RemainderContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 521;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 522;
						Match(MODULUS);
						State = 523;
						((RemainderContext)_localctx).rhs = sub_expression(13);
						}
						break;
					case 4:
						{
						_localctx = new AdditionContext(new Sub_expressionContext(_parentctx, _parentState));
						((AdditionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 524;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 525;
						Match(ADD);
						State = 526;
						((AdditionContext)_localctx).rhs = sub_expression(12);
						}
						break;
					case 5:
						{
						_localctx = new SubtractionContext(new Sub_expressionContext(_parentctx, _parentState));
						((SubtractionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 527;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 528;
						Match(SUBTRACT);
						State = 529;
						((SubtractionContext)_localctx).rhs = sub_expression(11);
						}
						break;
					case 6:
						{
						_localctx = new Greater_thanContext(new Sub_expressionContext(_parentctx, _parentState));
						((Greater_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 530;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 531;
						Match(GREATER_THAN);
						State = 532;
						((Greater_thanContext)_localctx).rhs = sub_expression(10);
						}
						break;
					case 7:
						{
						_localctx = new Lesser_thanContext(new Sub_expressionContext(_parentctx, _parentState));
						((Lesser_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 533;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 534;
						Match(LESSER_THAN);
						State = 535;
						((Lesser_thanContext)_localctx).rhs = sub_expression(9);
						}
						break;
					case 8:
						{
						_localctx = new Greater_than_equalContext(new Sub_expressionContext(_parentctx, _parentState));
						((Greater_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 536;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 537;
						Match(GREATER_THAN_EQUAL);
						State = 538;
						((Greater_than_equalContext)_localctx).rhs = sub_expression(8);
						}
						break;
					case 9:
						{
						_localctx = new Lesser_than_equalContext(new Sub_expressionContext(_parentctx, _parentState));
						((Lesser_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 539;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 540;
						Match(LESSER_THAN_EQUAL);
						State = 541;
						((Lesser_than_equalContext)_localctx).rhs = sub_expression(7);
						}
						break;
					case 10:
						{
						_localctx = new Equal_toContext(new Sub_expressionContext(_parentctx, _parentState));
						((Equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 542;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 543;
						Match(EQUAL_TO);
						State = 544;
						((Equal_toContext)_localctx).rhs = sub_expression(6);
						}
						break;
					case 11:
						{
						_localctx = new Not_equal_toContext(new Sub_expressionContext(_parentctx, _parentState));
						((Not_equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 545;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 546;
						Match(NOT_EQUAL_TO);
						State = 547;
						((Not_equal_toContext)_localctx).rhs = sub_expression(5);
						}
						break;
					case 12:
						{
						_localctx = new AndContext(new Sub_expressionContext(_parentctx, _parentState));
						((AndContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 548;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 549;
						Match(AND);
						State = 550;
						((AndContext)_localctx).rhs = sub_expression(4);
						}
						break;
					case 13:
						{
						_localctx = new OrContext(new Sub_expressionContext(_parentctx, _parentState));
						((OrContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 551;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 552;
						Match(OR);
						State = 553;
						((OrContext)_localctx).rhs = sub_expression(3);
						}
						break;
					case 14:
						{
						_localctx = new TernaryContext(new Sub_expressionContext(_parentctx, _parentState));
						((TernaryContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 554;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 555;
						Match(IF);
						State = 556;
						((TernaryContext)_localctx).cond = sub_expression(0);
						State = 557;
						Match(ELSE);
						State = 558;
						((TernaryContext)_localctx).rhs = sub_expression(2);
						}
						break;
					case 15:
						{
						_localctx = new Member_callContext(new Sub_expressionContext(_parentctx, _parentState));
						((Member_callContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 560;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 561;
						Match(COLON);
						State = 562;
						((Member_callContext)_localctx).name = Match(ELEMENT);
						State = 563;
						Match(LEFT_PAREN);
						State = 564;
						((Member_callContext)_localctx).args = argument_list();
						State = 565;
						Match(RIGHT_PAREN);
						}
						break;
					case 16:
						{
						_localctx = new Member_call_rulesetContext(new Sub_expressionContext(_parentctx, _parentState));
						((Member_call_rulesetContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 567;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 568;
						Match(RULESET);
						State = 569;
						Match(LEFT_PAREN);
						State = 570;
						((Member_call_rulesetContext)_localctx).args = argument_list();
						State = 571;
						Match(RIGHT_PAREN);
						}
						break;
					case 17:
						{
						_localctx = new IndexorContext(new Sub_expressionContext(_parentctx, _parentState));
						((IndexorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 573;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 574;
						Match(LEFT_BRACKET);
						State = 575;
						((IndexorContext)_localctx).rhs = sub_expression(0);
						State = 576;
						Match(RIGHT_BRACKET);
						}
						break;
					}
					} 
				}
				State = 582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class List_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public List_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_falseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(sassy_parser.FALSE, 0); }
		public Boolean_falseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_false(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Object_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public Object_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(sassy_parser.NONE, 0); }
		public NoneContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClosureContext : ValueContext {
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public ClosureContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClosure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClosure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_deletionContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		public Value_deletionContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_deletion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_trueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(sassy_parser.TRUE, 0); }
		public Boolean_trueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_true(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 70, RULE_value);
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				_localctx = new Value_deletionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 583;
				Match(DELETE);
				}
				break;
			case TRUE:
				_localctx = new Boolean_trueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Boolean_falseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 585;
				Match(FALSE);
				}
				break;
			case NUMBER:
				_localctx = new Number_valueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 586;
				Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new String_valueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 587;
				Match(STRING);
				}
				break;
			case NONE:
				_localctx = new NoneContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 588;
				Match(NONE);
				}
				break;
			case FUNCTION:
				_localctx = new ClosureContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 589;
				Match(FUNCTION);
				State = 590;
				Match(LEFT_PAREN);
				State = 591;
				((ClosureContext)_localctx).args = arg_decl_list();
				State = 592;
				Match(RIGHT_PAREN);
				State = 593;
				Match(LEFT_BRACE);
				State = 594;
				((ClosureContext)_localctx).body = function_body();
				State = 595;
				Match(RIGHT_BRACE);
				}
				break;
			case LEFT_BRACKET:
				_localctx = new List_valueContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 597;
				list();
				}
				break;
			case LEFT_BRACE:
				_localctx = new Object_valueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 598;
				obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Require_expressionContext : ParserRuleContext {
		public Require_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_require_expression; } }
	 
		public Require_expressionContext() { }
		public virtual void CopyFrom(Require_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Require_subContext : Require_expressionContext {
		public Require_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_subContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_sub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_orContext : Require_expressionContext {
		public Require_expressionContext lhs;
		public Require_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(sassy_parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext[] require_expression() {
			return GetRuleContexts<Require_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression(int i) {
			return GetRuleContext<Require_expressionContext>(i);
		}
		public Require_orContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_notContext : Require_expressionContext {
		public Require_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(sassy_parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_notContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_not(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_guidContext : Require_expressionContext {
		public IToken modid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Require_guidContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_guid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_guid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_guid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_andContext : Require_expressionContext {
		public Require_expressionContext lhs;
		public Require_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sassy_parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext[] require_expression() {
			return GetRuleContexts<Require_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression(int i) {
			return GetRuleContext<Require_expressionContext>(i);
		}
		public Require_andContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Require_expressionContext require_expression() {
		return require_expression(0);
	}

	private Require_expressionContext require_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Require_expressionContext _localctx = new Require_expressionContext(Context, _parentState);
		Require_expressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_require_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				_localctx = new Require_subContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 602;
				Match(LEFT_PAREN);
				State = 603;
				((Require_subContext)_localctx).internal_expr = require_expression(0);
				State = 604;
				Match(RIGHT_PAREN);
				}
				break;
			case NOT:
				{
				_localctx = new Require_notContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 606;
				Match(NOT);
				State = 607;
				((Require_notContext)_localctx).internal_expr = require_expression(2);
				}
				break;
			case STRING:
				{
				_localctx = new Require_guidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 608;
				((Require_guidContext)_localctx).modid = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 619;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 617;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						_localctx = new Require_andContext(new Require_expressionContext(_parentctx, _parentState));
						((Require_andContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_require_expression);
						State = 611;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 612;
						Match(AND);
						State = 613;
						((Require_andContext)_localctx).rhs = require_expression(5);
						}
						break;
					case 2:
						{
						_localctx = new Require_orContext(new Require_expressionContext(_parentctx, _parentState));
						((Require_orContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_require_expression);
						State = 614;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 615;
						Match(OR);
						State = 616;
						((Require_orContext)_localctx).rhs = require_expression(4);
						}
						break;
					}
					} 
				}
				State = 621;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_valuesContext list_values() {
			return GetRuleContext<List_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 74, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(LEFT_BRACKET);
			State = 623;
			_localctx.@values = list_values();
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 624;
				Match(COMMA);
				}
			}

			State = 627;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public List_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_valuesContext list_values() {
		List_valuesContext _localctx = new List_valuesContext(Context, State);
		EnterRule(_localctx, 76, RULE_list_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8574872954515488784L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 19L) != 0)) {
					{
					State = 629;
					sub_expression(0);
					}
				}

				State = 636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 632;
						Match(COMMA);
						State = 633;
						sub_expression(0);
						}
						} 
					}
					State = 638;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public Obj_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Obj_valuesContext obj_values() {
			return GetRuleContext<Obj_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 78, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			Match(LEFT_BRACE);
			State = 642;
			_localctx.@values = obj_values();
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 643;
				Match(COMMA);
				}
			}

			State = 646;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext[] key_value() {
			return GetRuleContexts<Key_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext key_value(int i) {
			return GetRuleContext<Key_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Obj_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_valuesContext obj_values() {
		Obj_valuesContext _localctx = new Obj_valuesContext(Context, State);
		EnterRule(_localctx, 80, RULE_obj_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING || _la==ELEMENT) {
					{
					State = 648;
					key_value();
					}
				}

				State = 655;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 651;
						Match(COMMA);
						State = 652;
						key_value();
						}
						} 
					}
					State = 657;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_valueContext : ParserRuleContext {
		public Key_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value; } }
	 
		public Key_valueContext() { }
		public virtual void CopyFrom(Key_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_keyContext : Key_valueContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public String_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_key(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal_keyContext : Key_valueContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Literal_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_valueContext key_value() {
		Key_valueContext _localctx = new Key_valueContext(Context, State);
		EnterRule(_localctx, 82, RULE_key_value);
		try {
			State = 666;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				_localctx = new Literal_keyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 660;
				((Literal_keyContext)_localctx).key = Match(ELEMENT);
				State = 661;
				Match(COLON);
				State = 662;
				((Literal_keyContext)_localctx).val = sub_expression(0);
				}
				break;
			case STRING:
				_localctx = new String_keyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 663;
				((String_keyContext)_localctx).key = Match(STRING);
				State = 664;
				Match(COLON);
				State = 665;
				((String_keyContext)_localctx).val = sub_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_argument_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8574872954515488784L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 19L) != 0)) {
					{
					State = 668;
					argument();
					}
				}

				State = 675;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 671;
						Match(COMMA);
						State = 672;
						argument();
						}
						} 
					}
					State = 677;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				}
				}
				break;
			}
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 680;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Named_argumentContext : ArgumentContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Named_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unnamed_argumentContext : ArgumentContext {
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Unnamed_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 86, RULE_argument);
		try {
			State = 687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new Named_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 683;
				((Named_argumentContext)_localctx).key = Match(VARIABLE);
				State = 684;
				Match(COLON);
				State = 685;
				((Named_argumentContext)_localctx).val = sub_expression(0);
				}
				break;
			case 2:
				_localctx = new Unnamed_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				((Unnamed_argumentContext)_localctx).val = sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext[] arg_decl() {
			return GetRuleContexts<Arg_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext arg_decl(int i) {
			return GetRuleContext<Arg_declContext>(i);
		}
		public Arg_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_decl_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_decl_listContext arg_decl_list() {
		Arg_decl_listContext _localctx = new Arg_decl_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_arg_decl_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 689;
					arg_decl();
					}
				}

				State = 696;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 692;
						Match(COMMA);
						State = 693;
						arg_decl();
						}
						} 
					}
					State = 698;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				}
				}
				break;
			}
			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 701;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declContext : ParserRuleContext {
		public Arg_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl; } }
	 
		public Arg_declContext() { }
		public virtual void CopyFrom(Arg_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Argument_without_defaultContext : Arg_declContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Argument_without_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_without_default(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Argument_with_defaultContext : Arg_declContext {
		public IToken name;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Argument_with_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declContext arg_decl() {
		Arg_declContext _localctx = new Arg_declContext(Context, State);
		EnterRule(_localctx, 90, RULE_arg_decl);
		try {
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				_localctx = new Argument_without_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				((Argument_without_defaultContext)_localctx).name = Match(VARIABLE);
				}
				break;
			case 2:
				_localctx = new Argument_with_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 705;
				((Argument_with_defaultContext)_localctx).name = Match(VARIABLE);
				State = 706;
				Match(COLON);
				State = 707;
				((Argument_with_defaultContext)_localctx).val = sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 92, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
				{
				{
				State = 710;
				function_statement();
				}
				}
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_conditionalContext fn_level_conditional() {
			return GetRuleContext<Fn_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_returnContext fn_return() {
			return GetRuleContext<Fn_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Each_loopContext each_loop() {
			return GetRuleContext<Each_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public Function_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_statementContext function_statement() {
		Function_statementContext _localctx = new Function_statementContext(Context, State);
		EnterRule(_localctx, 94, RULE_function_statement);
		try {
			State = 722;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716;
				var_decl();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 717;
				fn_level_conditional();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 718;
				fn_return();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 719;
				for_loop();
				}
				break;
			case EACH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 720;
				each_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 721;
				while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_conditionalContext fn_level_conditional() {
		Fn_level_conditionalContext _localctx = new Fn_level_conditionalContext(Context, State);
		EnterRule(_localctx, 96, RULE_fn_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(PRE_IF);
			State = 725;
			_localctx.cond = sub_expression(0);
			State = 726;
			Match(LEFT_BRACE);
			State = 730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
				{
				{
				State = 727;
				_localctx.body = function_statement();
				}
				}
				State = 732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 733;
			Match(RIGHT_BRACE);
			State = 735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 734;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_elseContext fn_level_else_else() {
			return GetRuleContext<Fn_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_ifContext fn_level_else_if() {
			return GetRuleContext<Fn_level_else_ifContext>(0);
		}
		public Fn_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_elseContext fn_level_else() {
		Fn_level_elseContext _localctx = new Fn_level_elseContext(Context, State);
		EnterRule(_localctx, 98, RULE_fn_level_else);
		try {
			State = 739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 737;
				fn_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 738;
				fn_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_elseContext : ParserRuleContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Fn_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_elseContext fn_level_else_else() {
		Fn_level_else_elseContext _localctx = new Fn_level_else_elseContext(Context, State);
		EnterRule(_localctx, 100, RULE_fn_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			Match(PRE_ELSE);
			State = 742;
			Match(LEFT_BRACE);
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
				{
				{
				State = 743;
				_localctx.body = function_statement();
				}
				}
				State = 748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 749;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_ifContext fn_level_else_if() {
		Fn_level_else_ifContext _localctx = new Fn_level_else_ifContext(Context, State);
		EnterRule(_localctx, 102, RULE_fn_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			Match(PRE_ELSE_IF);
			State = 752;
			_localctx.cond = sub_expression(0);
			State = 753;
			Match(LEFT_BRACE);
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
				{
				{
				State = 754;
				_localctx.body = function_statement();
				}
				}
				State = 759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 760;
			Match(RIGHT_BRACE);
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 761;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(sassy_parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Fn_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_returnContext fn_return() {
		Fn_returnContext _localctx = new Fn_returnContext(Context, State);
		EnterRule(_localctx, 104, RULE_fn_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			Match(RETURN);
			State = 765;
			sub_expression(0);
			State = 766;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_includeContext : ParserRuleContext {
		public IToken mixin;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(sassy_parser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Mixin_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_include(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_includeContext mixin_include() {
		Mixin_includeContext _localctx = new Mixin_includeContext(Context, State);
		EnterRule(_localctx, 106, RULE_mixin_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			Match(INCLUDE);
			State = 769;
			_localctx.mixin = Match(ELEMENT);
			State = 770;
			Match(LEFT_PAREN);
			State = 771;
			_localctx.args = argument_list();
			State = 772;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
	 
		public For_loopContext() { }
		public virtual void CopyFrom(For_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class For_to_loopContext : For_loopContext {
		public IToken idx;
		public Sub_expressionContext start;
		public Sub_expressionContext end;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(sassy_parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public For_to_loopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFor_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFor_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_to_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class For_through_loopContext : For_loopContext {
		public IToken idx;
		public Sub_expressionContext start;
		public Sub_expressionContext end;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(sassy_parser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public For_through_loopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFor_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFor_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_through_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 108, RULE_for_loop);
		int _la;
		try {
			State = 804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				_localctx = new For_to_loopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 774;
				Match(FOR);
				State = 775;
				((For_to_loopContext)_localctx).idx = Match(VARIABLE);
				State = 776;
				Match(FROM);
				State = 777;
				((For_to_loopContext)_localctx).start = sub_expression(0);
				State = 778;
				Match(TO);
				State = 779;
				((For_to_loopContext)_localctx).end = sub_expression(0);
				State = 780;
				Match(LEFT_BRACE);
				State = 784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
					{
					{
					State = 781;
					((For_to_loopContext)_localctx).body = function_statement();
					}
					}
					State = 786;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 787;
				Match(RIGHT_BRACE);
				}
				break;
			case 2:
				_localctx = new For_through_loopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 789;
				Match(FOR);
				State = 790;
				((For_through_loopContext)_localctx).idx = Match(VARIABLE);
				State = 791;
				Match(FROM);
				State = 792;
				((For_through_loopContext)_localctx).start = sub_expression(0);
				State = 793;
				Match(THROUGH);
				State = 794;
				((For_through_loopContext)_localctx).end = sub_expression(0);
				State = 795;
				Match(LEFT_BRACE);
				State = 799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
					{
					{
					State = 796;
					((For_through_loopContext)_localctx).body = function_statement();
					}
					}
					State = 801;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 802;
				Match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Each_loopContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public Sub_expressionContext iter;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(sassy_parser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(sassy_parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(sassy_parser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(sassy_parser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Each_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_each_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEach_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Each_loopContext each_loop() {
		Each_loopContext _localctx = new Each_loopContext(Context, State);
		EnterRule(_localctx, 110, RULE_each_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(EACH);
			State = 809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 807;
				_localctx.key = Match(VARIABLE);
				State = 808;
				Match(COMMA);
				}
				break;
			}
			State = 811;
			_localctx.val = Match(VARIABLE);
			State = 812;
			Match(IN);
			State = 813;
			_localctx.iter = sub_expression(0);
			State = 814;
			Match(LEFT_BRACE);
			State = 818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
				{
				{
				State = 815;
				_localctx.body = function_statement();
				}
				}
				State = 820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 821;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(sassy_parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 112, RULE_while_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(WHILE);
			State = 824;
			_localctx.cond = sub_expression(0);
			State = 825;
			Match(LEFT_BRACE);
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606978609L) != 0)) {
				{
				{
				State = 826;
				_localctx.body = function_statement();
				}
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 832;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return selector_sempred((SelectorContext)_localctx, predIndex);
		case 21: return selector_no_children_sempred((Selector_no_childrenContext)_localctx, predIndex);
		case 34: return sub_expression_sempred((Sub_expressionContext)_localctx, predIndex);
		case 36: return require_expression_sempred((Require_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selector_sempred(SelectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		}
		return true;
	}
	private bool selector_no_children_sempred(Selector_no_childrenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		}
		return true;
	}
	private bool sub_expression_sempred(Sub_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 5);
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		case 19: return Precpred(Context, 17);
		case 20: return Precpred(Context, 16);
		case 21: return Precpred(Context, 15);
		}
		return true;
	}
	private bool require_expression_sempred(Require_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 4);
		case 23: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,69,835,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		1,0,4,0,116,8,0,11,0,12,0,117,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,3,1,132,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,5,3,141,8,3,10,3,12,3,
		144,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,168,8,6,10,6,12,6,171,9,6,1,6,1,6,3,6,175,
		8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,203,8,8,1,9,1,9,1,9,1,9,1,9,
		1,9,3,9,211,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,235,8,12,10,
		12,12,12,238,9,12,1,12,1,12,3,12,242,8,12,1,13,1,13,3,13,246,8,13,1,14,
		1,14,1,14,5,14,251,8,14,10,14,12,14,254,9,14,1,14,1,14,1,15,1,15,1,15,
		1,15,5,15,262,8,15,10,15,12,15,265,9,15,1,15,1,15,3,15,269,8,15,1,16,1,
		16,1,16,1,16,1,16,1,17,5,17,277,8,17,10,17,12,17,280,9,17,1,17,1,17,1,
		18,1,18,1,18,1,18,1,18,1,18,3,18,290,8,18,1,19,1,19,1,19,1,19,5,19,296,
		8,19,10,19,12,19,299,9,19,3,19,301,8,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,5,20,312,8,20,10,20,12,20,315,9,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,332,8,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,342,8,20,10,20,12,20,345,9,
		20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,354,8,21,10,21,12,21,357,9,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,3,21,373,8,21,1,21,1,21,1,21,1,21,1,21,5,21,380,8,21,10,21,12,21,383,
		9,21,1,22,5,22,386,8,22,10,22,12,22,389,9,22,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,3,23,399,8,23,1,24,1,24,1,24,1,24,5,24,405,8,24,10,24,12,
		24,408,9,24,1,24,1,24,3,24,412,8,24,1,25,1,25,3,25,416,8,25,1,26,1,26,
		1,26,5,26,421,8,26,10,26,12,26,424,9,26,1,26,1,26,1,27,1,27,1,27,1,27,
		5,27,432,8,27,10,27,12,27,435,9,27,1,27,1,27,3,27,439,8,27,1,28,1,28,1,
		28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,3,31,454,8,31,1,31,
		1,31,1,31,1,31,1,31,1,31,3,31,462,8,31,1,31,1,31,1,31,1,31,3,31,468,8,
		31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,482,
		8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,493,8,33,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,3,34,514,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,
		579,8,34,10,34,12,34,582,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,600,8,35,1,36,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,3,36,610,8,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,
		618,8,36,10,36,12,36,621,9,36,1,37,1,37,1,37,3,37,626,8,37,1,37,1,37,1,
		38,3,38,631,8,38,1,38,1,38,5,38,635,8,38,10,38,12,38,638,9,38,3,38,640,
		8,38,1,39,1,39,1,39,3,39,645,8,39,1,39,1,39,1,40,3,40,650,8,40,1,40,1,
		40,5,40,654,8,40,10,40,12,40,657,9,40,3,40,659,8,40,1,41,1,41,1,41,1,41,
		1,41,1,41,3,41,667,8,41,1,42,3,42,670,8,42,1,42,1,42,5,42,674,8,42,10,
		42,12,42,677,9,42,3,42,679,8,42,1,42,3,42,682,8,42,1,43,1,43,1,43,1,43,
		3,43,688,8,43,1,44,3,44,691,8,44,1,44,1,44,5,44,695,8,44,10,44,12,44,698,
		9,44,3,44,700,8,44,1,44,3,44,703,8,44,1,45,1,45,1,45,1,45,3,45,709,8,45,
		1,46,5,46,712,8,46,10,46,12,46,715,9,46,1,47,1,47,1,47,1,47,1,47,1,47,
		3,47,723,8,47,1,48,1,48,1,48,1,48,5,48,729,8,48,10,48,12,48,732,9,48,1,
		48,1,48,3,48,736,8,48,1,49,1,49,3,49,740,8,49,1,50,1,50,1,50,5,50,745,
		8,50,10,50,12,50,748,9,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,756,8,51,
		10,51,12,51,759,9,51,1,51,1,51,3,51,763,8,51,1,52,1,52,1,52,1,52,1,53,
		1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,
		783,8,54,10,54,12,54,786,9,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
		1,54,1,54,5,54,798,8,54,10,54,12,54,801,9,54,1,54,1,54,3,54,805,8,54,1,
		55,1,55,1,55,3,55,810,8,55,1,55,1,55,1,55,1,55,1,55,5,55,817,8,55,10,55,
		12,55,820,9,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,828,8,56,10,56,12,56,
		831,9,56,1,56,1,56,1,56,0,4,40,42,68,72,57,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		0,0,927,0,115,1,0,0,0,2,131,1,0,0,0,4,133,1,0,0,0,6,137,1,0,0,0,8,145,
		1,0,0,0,10,149,1,0,0,0,12,174,1,0,0,0,14,176,1,0,0,0,16,202,1,0,0,0,18,
		210,1,0,0,0,20,212,1,0,0,0,22,221,1,0,0,0,24,230,1,0,0,0,26,245,1,0,0,
		0,28,247,1,0,0,0,30,257,1,0,0,0,32,270,1,0,0,0,34,278,1,0,0,0,36,289,1,
		0,0,0,38,291,1,0,0,0,40,331,1,0,0,0,42,372,1,0,0,0,44,387,1,0,0,0,46,398,
		1,0,0,0,48,400,1,0,0,0,50,415,1,0,0,0,52,417,1,0,0,0,54,427,1,0,0,0,56,
		440,1,0,0,0,58,444,1,0,0,0,60,447,1,0,0,0,62,467,1,0,0,0,64,481,1,0,0,
		0,66,492,1,0,0,0,68,513,1,0,0,0,70,599,1,0,0,0,72,609,1,0,0,0,74,622,1,
		0,0,0,76,639,1,0,0,0,78,641,1,0,0,0,80,658,1,0,0,0,82,666,1,0,0,0,84,678,
		1,0,0,0,86,687,1,0,0,0,88,699,1,0,0,0,90,708,1,0,0,0,92,713,1,0,0,0,94,
		722,1,0,0,0,96,724,1,0,0,0,98,739,1,0,0,0,100,741,1,0,0,0,102,751,1,0,
		0,0,104,764,1,0,0,0,106,768,1,0,0,0,108,804,1,0,0,0,110,806,1,0,0,0,112,
		823,1,0,0,0,114,116,3,2,1,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,
		0,0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,120,5,0,0,1,120,1,1,0,0,0,121,
		132,3,8,4,0,122,132,3,10,5,0,123,132,3,12,6,0,124,132,3,20,10,0,125,132,
		3,22,11,0,126,132,3,24,12,0,127,132,3,32,16,0,128,132,3,4,2,0,129,132,
		3,14,7,0,130,132,3,16,8,0,131,121,1,0,0,0,131,122,1,0,0,0,131,123,1,0,
		0,0,131,124,1,0,0,0,131,125,1,0,0,0,131,126,1,0,0,0,131,127,1,0,0,0,131,
		128,1,0,0,0,131,129,1,0,0,0,131,130,1,0,0,0,132,3,1,0,0,0,133,134,5,23,
		0,0,134,135,3,6,3,0,135,136,5,36,0,0,136,5,1,0,0,0,137,142,5,61,0,0,138,
		139,5,38,0,0,139,141,5,61,0,0,140,138,1,0,0,0,141,144,1,0,0,0,142,140,
		1,0,0,0,142,143,1,0,0,0,143,7,1,0,0,0,144,142,1,0,0,0,145,146,5,3,0,0,
		146,147,5,61,0,0,147,148,5,36,0,0,148,9,1,0,0,0,149,150,5,65,0,0,150,151,
		5,37,0,0,151,152,3,66,33,0,152,153,5,36,0,0,153,11,1,0,0,0,154,155,5,20,
		0,0,155,156,5,61,0,0,156,175,5,36,0,0,157,158,5,20,0,0,158,159,5,61,0,
		0,159,160,5,37,0,0,160,161,5,27,0,0,161,175,5,36,0,0,162,163,5,20,0,0,
		163,164,5,61,0,0,164,165,5,37,0,0,165,169,5,30,0,0,166,168,3,18,9,0,167,
		166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,
		0,0,0,171,169,1,0,0,0,172,173,5,31,0,0,173,175,5,36,0,0,174,154,1,0,0,
		0,174,157,1,0,0,0,174,162,1,0,0,0,175,13,1,0,0,0,176,177,5,28,0,0,177,
		178,5,61,0,0,178,179,5,38,0,0,179,180,5,61,0,0,180,181,5,37,0,0,181,182,
		3,68,34,0,182,183,5,36,0,0,183,15,1,0,0,0,184,185,5,29,0,0,185,186,3,68,
		34,0,186,187,5,38,0,0,187,188,5,61,0,0,188,189,5,38,0,0,189,190,5,61,0,
		0,190,191,5,37,0,0,191,192,3,66,33,0,192,193,5,36,0,0,193,203,1,0,0,0,
		194,195,5,29,0,0,195,196,3,68,34,0,196,197,5,38,0,0,197,198,5,61,0,0,198,
		199,5,37,0,0,199,200,3,66,33,0,200,201,5,36,0,0,201,203,1,0,0,0,202,184,
		1,0,0,0,202,194,1,0,0,0,203,17,1,0,0,0,204,205,5,25,0,0,205,206,5,61,0,
		0,206,211,5,36,0,0,207,208,5,26,0,0,208,209,5,61,0,0,209,211,5,36,0,0,
		210,204,1,0,0,0,210,207,1,0,0,0,211,19,1,0,0,0,212,213,5,4,0,0,213,214,
		5,69,0,0,214,215,5,32,0,0,215,216,3,88,44,0,216,217,5,33,0,0,217,218,5,
		30,0,0,218,219,3,92,46,0,219,220,5,31,0,0,220,21,1,0,0,0,221,222,5,8,0,
		0,222,223,5,69,0,0,223,224,5,32,0,0,224,225,3,88,44,0,225,226,5,33,0,0,
		226,227,5,30,0,0,227,228,3,44,22,0,228,229,5,31,0,0,229,23,1,0,0,0,230,
		231,5,5,0,0,231,232,3,68,34,0,232,236,5,30,0,0,233,235,3,2,1,0,234,233,
		1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,
		0,238,236,1,0,0,0,239,241,5,31,0,0,240,242,3,26,13,0,241,240,1,0,0,0,241,
		242,1,0,0,0,242,25,1,0,0,0,243,246,3,28,14,0,244,246,3,30,15,0,245,243,
		1,0,0,0,245,244,1,0,0,0,246,27,1,0,0,0,247,248,5,6,0,0,248,252,5,30,0,
		0,249,251,3,2,1,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,
		253,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,256,5,31,0,0,256,29,1,
		0,0,0,257,258,5,7,0,0,258,259,3,68,34,0,259,263,5,30,0,0,260,262,3,2,1,
		0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,
		266,1,0,0,0,265,263,1,0,0,0,266,268,5,31,0,0,267,269,3,26,13,0,268,267,
		1,0,0,0,268,269,1,0,0,0,269,31,1,0,0,0,270,271,3,34,17,0,271,272,5,30,
		0,0,272,273,3,44,22,0,273,274,5,31,0,0,274,33,1,0,0,0,275,277,3,36,18,
		0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,
		281,1,0,0,0,280,278,1,0,0,0,281,282,3,40,20,0,282,35,1,0,0,0,283,284,5,
		18,0,0,284,290,3,72,36,0,285,286,5,19,0,0,286,290,5,61,0,0,287,288,5,24,
		0,0,288,290,3,38,19,0,289,283,1,0,0,0,289,285,1,0,0,0,289,287,1,0,0,0,
		290,37,1,0,0,0,291,300,5,32,0,0,292,297,3,66,33,0,293,294,5,38,0,0,294,
		296,3,66,33,0,295,293,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,
		1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,300,292,1,0,0,0,300,301,1,0,0,
		0,301,302,1,0,0,0,302,303,5,33,0,0,303,39,1,0,0,0,304,305,6,20,-1,0,305,
		332,5,69,0,0,306,332,5,64,0,0,307,308,5,64,0,0,308,309,5,37,0,0,309,313,
		5,34,0,0,310,312,3,94,47,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,
		0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,332,5,35,0,0,317,
		332,5,63,0,0,318,332,5,67,0,0,319,332,5,68,0,0,320,321,5,32,0,0,321,322,
		3,40,20,0,322,323,5,33,0,0,323,332,1,0,0,0,324,325,5,39,0,0,325,332,5,
		69,0,0,326,327,5,55,0,0,327,332,5,64,0,0,328,329,5,55,0,0,329,332,5,63,
		0,0,330,332,5,41,0,0,331,304,1,0,0,0,331,306,1,0,0,0,331,307,1,0,0,0,331,
		317,1,0,0,0,331,318,1,0,0,0,331,319,1,0,0,0,331,320,1,0,0,0,331,324,1,
		0,0,0,331,326,1,0,0,0,331,328,1,0,0,0,331,330,1,0,0,0,332,343,1,0,0,0,
		333,334,10,7,0,0,334,335,5,38,0,0,335,342,3,42,21,0,336,337,10,6,0,0,337,
		338,5,45,0,0,338,342,3,42,21,0,339,340,10,5,0,0,340,342,3,42,21,0,341,
		333,1,0,0,0,341,336,1,0,0,0,341,339,1,0,0,0,342,345,1,0,0,0,343,341,1,
		0,0,0,343,344,1,0,0,0,344,41,1,0,0,0,345,343,1,0,0,0,346,347,6,21,-1,0,
		347,373,5,69,0,0,348,373,5,64,0,0,349,350,5,64,0,0,350,351,5,37,0,0,351,
		355,5,34,0,0,352,354,3,94,47,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,
		1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,355,1,0,0,0,358,373,5,35,0,
		0,359,373,5,63,0,0,360,373,5,67,0,0,361,362,5,32,0,0,362,363,3,42,21,0,
		363,364,5,33,0,0,364,373,1,0,0,0,365,366,5,39,0,0,366,373,5,69,0,0,367,
		368,5,55,0,0,368,373,5,64,0,0,369,370,5,55,0,0,370,373,5,63,0,0,371,373,
		5,41,0,0,372,346,1,0,0,0,372,348,1,0,0,0,372,349,1,0,0,0,372,359,1,0,0,
		0,372,360,1,0,0,0,372,361,1,0,0,0,372,365,1,0,0,0,372,367,1,0,0,0,372,
		369,1,0,0,0,372,371,1,0,0,0,373,381,1,0,0,0,374,375,10,6,0,0,375,376,5,
		38,0,0,376,380,3,42,21,7,377,378,10,5,0,0,378,380,3,42,21,6,379,374,1,
		0,0,0,379,377,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,
		382,43,1,0,0,0,383,381,1,0,0,0,384,386,3,46,23,0,385,384,1,0,0,0,386,389,
		1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,45,1,0,0,0,389,387,1,0,0,0,
		390,399,3,10,5,0,391,399,3,48,24,0,392,399,3,56,28,0,393,399,3,58,29,0,
		394,399,3,60,30,0,395,399,3,62,31,0,396,399,3,32,16,0,397,399,3,106,53,
		0,398,390,1,0,0,0,398,391,1,0,0,0,398,392,1,0,0,0,398,393,1,0,0,0,398,
		394,1,0,0,0,398,395,1,0,0,0,398,396,1,0,0,0,398,397,1,0,0,0,399,47,1,0,
		0,0,400,401,5,5,0,0,401,402,3,68,34,0,402,406,5,30,0,0,403,405,3,46,23,
		0,404,403,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,
		409,1,0,0,0,408,406,1,0,0,0,409,411,5,31,0,0,410,412,3,50,25,0,411,410,
		1,0,0,0,411,412,1,0,0,0,412,49,1,0,0,0,413,416,3,52,26,0,414,416,3,54,
		27,0,415,413,1,0,0,0,415,414,1,0,0,0,416,51,1,0,0,0,417,418,5,6,0,0,418,
		422,5,30,0,0,419,421,3,46,23,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,
		1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,426,5,31,0,
		0,426,53,1,0,0,0,427,428,5,7,0,0,428,429,3,68,34,0,429,433,5,30,0,0,430,
		432,3,46,23,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,
		1,0,0,0,434,436,1,0,0,0,435,433,1,0,0,0,436,438,5,31,0,0,437,439,3,50,
		25,0,438,437,1,0,0,0,438,439,1,0,0,0,439,55,1,0,0,0,440,441,5,16,0,0,441,
		442,3,66,33,0,442,443,5,36,0,0,443,57,1,0,0,0,444,445,5,62,0,0,445,446,
		5,36,0,0,446,59,1,0,0,0,447,448,5,17,0,0,448,449,3,68,34,0,449,450,5,36,
		0,0,450,61,1,0,0,0,451,453,5,69,0,0,452,454,3,64,32,0,453,452,1,0,0,0,
		453,454,1,0,0,0,454,455,1,0,0,0,455,456,5,37,0,0,456,457,3,66,33,0,457,
		458,5,36,0,0,458,468,1,0,0,0,459,461,5,61,0,0,460,462,3,64,32,0,461,460,
		1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,37,0,0,464,465,3,66,
		33,0,465,466,5,36,0,0,466,468,1,0,0,0,467,451,1,0,0,0,467,459,1,0,0,0,
		468,63,1,0,0,0,469,470,5,34,0,0,470,471,5,60,0,0,471,482,5,35,0,0,472,
		473,5,34,0,0,473,474,5,69,0,0,474,482,5,35,0,0,475,476,5,34,0,0,476,477,
		5,64,0,0,477,482,5,35,0,0,478,479,5,34,0,0,479,480,5,61,0,0,480,482,5,
		35,0,0,481,469,1,0,0,0,481,472,1,0,0,0,481,475,1,0,0,0,481,478,1,0,0,0,
		482,65,1,0,0,0,483,484,5,39,0,0,484,493,3,68,34,0,485,486,5,40,0,0,486,
		493,3,68,34,0,487,488,5,41,0,0,488,493,3,68,34,0,489,490,5,42,0,0,490,
		493,3,68,34,0,491,493,3,68,34,0,492,483,1,0,0,0,492,485,1,0,0,0,492,487,
		1,0,0,0,492,489,1,0,0,0,492,491,1,0,0,0,493,67,1,0,0,0,494,495,6,34,-1,
		0,495,514,3,70,35,0,496,514,5,65,0,0,497,514,5,66,0,0,498,499,5,32,0,0,
		499,500,3,68,34,0,500,501,5,33,0,0,501,514,1,0,0,0,502,503,5,40,0,0,503,
		514,3,68,34,21,504,505,5,39,0,0,505,514,3,68,34,20,506,507,5,44,0,0,507,
		514,3,68,34,19,508,509,5,69,0,0,509,510,5,32,0,0,510,511,3,84,42,0,511,
		512,5,33,0,0,512,514,1,0,0,0,513,494,1,0,0,0,513,496,1,0,0,0,513,497,1,
		0,0,0,513,498,1,0,0,0,513,502,1,0,0,0,513,504,1,0,0,0,513,506,1,0,0,0,
		513,508,1,0,0,0,514,580,1,0,0,0,515,516,10,14,0,0,516,517,5,41,0,0,517,
		579,3,68,34,15,518,519,10,13,0,0,519,520,5,42,0,0,520,579,3,68,34,14,521,
		522,10,12,0,0,522,523,5,43,0,0,523,579,3,68,34,13,524,525,10,11,0,0,525,
		526,5,39,0,0,526,579,3,68,34,12,527,528,10,10,0,0,528,529,5,40,0,0,529,
		579,3,68,34,11,530,531,10,9,0,0,531,532,5,45,0,0,532,579,3,68,34,10,533,
		534,10,8,0,0,534,535,5,47,0,0,535,579,3,68,34,9,536,537,10,7,0,0,537,538,
		5,46,0,0,538,579,3,68,34,8,539,540,10,6,0,0,540,541,5,48,0,0,541,579,3,
		68,34,7,542,543,10,5,0,0,543,544,5,49,0,0,544,579,3,68,34,6,545,546,10,
		4,0,0,546,547,5,50,0,0,547,579,3,68,34,5,548,549,10,3,0,0,549,550,5,51,
		0,0,550,579,3,68,34,4,551,552,10,2,0,0,552,553,5,52,0,0,553,579,3,68,34,
		3,554,555,10,1,0,0,555,556,5,53,0,0,556,557,3,68,34,0,557,558,5,54,0,0,
		558,559,3,68,34,2,559,579,1,0,0,0,560,561,10,17,0,0,561,562,5,37,0,0,562,
		563,5,69,0,0,563,564,5,32,0,0,564,565,3,84,42,0,565,566,5,33,0,0,566,579,
		1,0,0,0,567,568,10,16,0,0,568,569,5,67,0,0,569,570,5,32,0,0,570,571,3,
		84,42,0,571,572,5,33,0,0,572,579,1,0,0,0,573,574,10,15,0,0,574,575,5,34,
		0,0,575,576,3,68,34,0,576,577,5,35,0,0,577,579,1,0,0,0,578,515,1,0,0,0,
		578,518,1,0,0,0,578,521,1,0,0,0,578,524,1,0,0,0,578,527,1,0,0,0,578,530,
		1,0,0,0,578,533,1,0,0,0,578,536,1,0,0,0,578,539,1,0,0,0,578,542,1,0,0,
		0,578,545,1,0,0,0,578,548,1,0,0,0,578,551,1,0,0,0,578,554,1,0,0,0,578,
		560,1,0,0,0,578,567,1,0,0,0,578,573,1,0,0,0,579,582,1,0,0,0,580,578,1,
		0,0,0,580,581,1,0,0,0,581,69,1,0,0,0,582,580,1,0,0,0,583,600,5,62,0,0,
		584,600,5,57,0,0,585,600,5,58,0,0,586,600,5,60,0,0,587,600,5,61,0,0,588,
		600,5,56,0,0,589,590,5,4,0,0,590,591,5,32,0,0,591,592,3,88,44,0,592,593,
		5,33,0,0,593,594,5,30,0,0,594,595,3,92,46,0,595,596,5,31,0,0,596,600,1,
		0,0,0,597,600,3,74,37,0,598,600,3,78,39,0,599,583,1,0,0,0,599,584,1,0,
		0,0,599,585,1,0,0,0,599,586,1,0,0,0,599,587,1,0,0,0,599,588,1,0,0,0,599,
		589,1,0,0,0,599,597,1,0,0,0,599,598,1,0,0,0,600,71,1,0,0,0,601,602,6,36,
		-1,0,602,603,5,32,0,0,603,604,3,72,36,0,604,605,5,33,0,0,605,610,1,0,0,
		0,606,607,5,44,0,0,607,610,3,72,36,2,608,610,5,61,0,0,609,601,1,0,0,0,
		609,606,1,0,0,0,609,608,1,0,0,0,610,619,1,0,0,0,611,612,10,4,0,0,612,613,
		5,51,0,0,613,618,3,72,36,5,614,615,10,3,0,0,615,616,5,52,0,0,616,618,3,
		72,36,4,617,611,1,0,0,0,617,614,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,
		0,619,620,1,0,0,0,620,73,1,0,0,0,621,619,1,0,0,0,622,623,5,34,0,0,623,
		625,3,76,38,0,624,626,5,38,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,627,
		1,0,0,0,627,628,5,35,0,0,628,75,1,0,0,0,629,631,3,68,34,0,630,629,1,0,
		0,0,630,631,1,0,0,0,631,636,1,0,0,0,632,633,5,38,0,0,633,635,3,68,34,0,
		634,632,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,640,
		1,0,0,0,638,636,1,0,0,0,639,630,1,0,0,0,639,640,1,0,0,0,640,77,1,0,0,0,
		641,642,5,30,0,0,642,644,3,80,40,0,643,645,5,38,0,0,644,643,1,0,0,0,644,
		645,1,0,0,0,645,646,1,0,0,0,646,647,5,31,0,0,647,79,1,0,0,0,648,650,3,
		82,41,0,649,648,1,0,0,0,649,650,1,0,0,0,650,655,1,0,0,0,651,652,5,38,0,
		0,652,654,3,82,41,0,653,651,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,
		656,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,658,649,1,0,0,0,658,659,1,
		0,0,0,659,81,1,0,0,0,660,661,5,69,0,0,661,662,5,37,0,0,662,667,3,68,34,
		0,663,664,5,61,0,0,664,665,5,37,0,0,665,667,3,68,34,0,666,660,1,0,0,0,
		666,663,1,0,0,0,667,83,1,0,0,0,668,670,3,86,43,0,669,668,1,0,0,0,669,670,
		1,0,0,0,670,675,1,0,0,0,671,672,5,38,0,0,672,674,3,86,43,0,673,671,1,0,
		0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,679,1,0,0,0,677,
		675,1,0,0,0,678,669,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,680,682,5,
		38,0,0,681,680,1,0,0,0,681,682,1,0,0,0,682,85,1,0,0,0,683,684,5,65,0,0,
		684,685,5,37,0,0,685,688,3,68,34,0,686,688,3,68,34,0,687,683,1,0,0,0,687,
		686,1,0,0,0,688,87,1,0,0,0,689,691,3,90,45,0,690,689,1,0,0,0,690,691,1,
		0,0,0,691,696,1,0,0,0,692,693,5,38,0,0,693,695,3,90,45,0,694,692,1,0,0,
		0,695,698,1,0,0,0,696,694,1,0,0,0,696,697,1,0,0,0,697,700,1,0,0,0,698,
		696,1,0,0,0,699,690,1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,703,5,
		38,0,0,702,701,1,0,0,0,702,703,1,0,0,0,703,89,1,0,0,0,704,709,5,65,0,0,
		705,706,5,65,0,0,706,707,5,37,0,0,707,709,3,68,34,0,708,704,1,0,0,0,708,
		705,1,0,0,0,709,91,1,0,0,0,710,712,3,94,47,0,711,710,1,0,0,0,712,715,1,
		0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,93,1,0,0,0,715,713,1,0,0,0,716,
		723,3,10,5,0,717,723,3,96,48,0,718,723,3,104,52,0,719,723,3,108,54,0,720,
		723,3,110,55,0,721,723,3,112,56,0,722,716,1,0,0,0,722,717,1,0,0,0,722,
		718,1,0,0,0,722,719,1,0,0,0,722,720,1,0,0,0,722,721,1,0,0,0,723,95,1,0,
		0,0,724,725,5,5,0,0,725,726,3,68,34,0,726,730,5,30,0,0,727,729,3,94,47,
		0,728,727,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,
		733,1,0,0,0,732,730,1,0,0,0,733,735,5,31,0,0,734,736,3,98,49,0,735,734,
		1,0,0,0,735,736,1,0,0,0,736,97,1,0,0,0,737,740,3,100,50,0,738,740,3,102,
		51,0,739,737,1,0,0,0,739,738,1,0,0,0,740,99,1,0,0,0,741,742,5,6,0,0,742,
		746,5,30,0,0,743,745,3,94,47,0,744,743,1,0,0,0,745,748,1,0,0,0,746,744,
		1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,749,750,5,31,0,
		0,750,101,1,0,0,0,751,752,5,7,0,0,752,753,3,68,34,0,753,757,5,30,0,0,754,
		756,3,94,47,0,755,754,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,
		1,0,0,0,758,760,1,0,0,0,759,757,1,0,0,0,760,762,5,31,0,0,761,763,3,98,
		49,0,762,761,1,0,0,0,762,763,1,0,0,0,763,103,1,0,0,0,764,765,5,22,0,0,
		765,766,3,68,34,0,766,767,5,36,0,0,767,105,1,0,0,0,768,769,5,21,0,0,769,
		770,5,69,0,0,770,771,5,32,0,0,771,772,3,84,42,0,772,773,5,33,0,0,773,107,
		1,0,0,0,774,775,5,10,0,0,775,776,5,65,0,0,776,777,5,11,0,0,777,778,3,68,
		34,0,778,779,5,13,0,0,779,780,3,68,34,0,780,784,5,30,0,0,781,783,3,94,
		47,0,782,781,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,
		787,1,0,0,0,786,784,1,0,0,0,787,788,5,31,0,0,788,805,1,0,0,0,789,790,5,
		10,0,0,790,791,5,65,0,0,791,792,5,11,0,0,792,793,3,68,34,0,793,794,5,12,
		0,0,794,795,3,68,34,0,795,799,5,30,0,0,796,798,3,94,47,0,797,796,1,0,0,
		0,798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,802,1,0,0,0,801,
		799,1,0,0,0,802,803,5,31,0,0,803,805,1,0,0,0,804,774,1,0,0,0,804,789,1,
		0,0,0,805,109,1,0,0,0,806,809,5,14,0,0,807,808,5,65,0,0,808,810,5,38,0,
		0,809,807,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,812,5,65,0,0,812,
		813,5,15,0,0,813,814,3,68,34,0,814,818,5,30,0,0,815,817,3,94,47,0,816,
		815,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,1,
		0,0,0,820,818,1,0,0,0,821,822,5,31,0,0,822,111,1,0,0,0,823,824,5,9,0,0,
		824,825,3,68,34,0,825,829,5,30,0,0,826,828,3,94,47,0,827,826,1,0,0,0,828,
		831,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,829,1,
		0,0,0,832,833,5,31,0,0,833,113,1,0,0,0,78,117,131,142,169,174,202,210,
		236,241,245,252,263,268,278,289,297,300,313,331,341,343,355,372,379,381,
		387,398,406,411,415,422,433,438,453,461,467,481,492,513,578,580,599,609,
		617,619,625,630,636,639,644,649,655,658,666,669,675,678,681,687,690,696,
		699,702,708,713,722,730,735,739,746,757,762,784,799,804,809,818,829
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SassyPatchGrammar
