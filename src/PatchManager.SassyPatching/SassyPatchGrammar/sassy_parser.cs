//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/arall/PatchManager/src/PatchManager.SassyPatching/SassyPatchGrammar/sassy_parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SassyPatchGrammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class sassy_parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, SPACE=2, USE=3, FUNCTION=4, PRE_IF=5, PRE_ELSE=6, PRE_ELSE_IF=7, 
		MIXIN=8, WHILE=9, FOR=10, FROM=11, THROUGH=12, TO=13, EACH=14, IN=15, 
		SET=16, MERGE=17, REQUIRE=18, STAGE=19, DEFINE_STAGE=20, INCLUDE=21, RETURN=22, 
		PATCH=23, NEW=24, BEFORE=25, AFTER=26, GLOBAL=27, CREATE_CONFIG=28, UPDATE_CONFIG=29, 
		LEFT_BRACE=30, RIGHT_BRACE=31, LEFT_PAREN=32, RIGHT_PAREN=33, LEFT_BRACKET=34, 
		RIGHT_BRACKET=35, SEMICOLON=36, COLON=37, PLUS_COLON=38, MINUS_COLON=39, 
		DIVIDE_COLON=40, MULTIPLY_COLON=41, COMMA=42, ADD=43, SUBTRACT=44, MULTIPLY=45, 
		DIVIDE=46, MODULUS=47, NOT=48, GREATER_THAN=49, GREATER_THAN_EQUAL=50, 
		LESSER_THAN=51, LESSER_THAN_EQUAL=52, EQUAL_TO=53, NOT_EQUAL_TO=54, AND=55, 
		OR=56, IF=57, ELSE=58, WITHOUT=59, NONE=60, TRUE=61, FALSE=62, HEX_NUMBER=63, 
		NUMBER=64, STRING=65, DELETE=66, NAME=67, STRING_NAME=68, CLASS=69, STRING_CLASS=70, 
		VARIABLE=71, LOCALVARIABLE=72, STRING_LOCALVARIABLE=73, RULESET=74, ENSURE=75, 
		STRING_ENSURE=76, ELEMENT=77;
	public const int
		RULE_patch = 0, RULE_top_level_statement = 1, RULE_patch_declaration = 2, 
		RULE_patch_list = 3, RULE_sassy_string = 4, RULE_import_declaration = 5, 
		RULE_var_decl = 6, RULE_stage_def = 7, RULE_config_creation = 8, RULE_config_mutation = 9, 
		RULE_stage_attribute = 10, RULE_function_def = 11, RULE_mixin_def = 12, 
		RULE_top_level_conditional = 13, RULE_top_level_else = 14, RULE_top_level_else_else = 15, 
		RULE_top_level_else_if = 16, RULE_selection_block = 17, RULE_attributed_selector = 18, 
		RULE_attribute = 19, RULE_constructor_arguments = 20, RULE_selector = 21, 
		RULE_selector_no_children = 22, RULE_selector_body = 23, RULE_selector_statement = 24, 
		RULE_sel_level_conditional = 25, RULE_sel_level_else = 26, RULE_sel_level_else_else = 27, 
		RULE_sel_level_else_if = 28, RULE_set_value = 29, RULE_delete_value = 30, 
		RULE_merge_value = 31, RULE_field_set = 32, RULE_index = 33, RULE_expression = 34, 
		RULE_value = 35, RULE_require_expression = 36, RULE_list = 37, RULE_list_values = 38, 
		RULE_obj = 39, RULE_obj_values = 40, RULE_key_value = 41, RULE_argument_list = 42, 
		RULE_argument = 43, RULE_arg_decl_list = 44, RULE_arg_decl = 45, RULE_function_body = 46, 
		RULE_function_statement = 47, RULE_fn_level_conditional = 48, RULE_fn_level_else = 49, 
		RULE_fn_level_else_else = 50, RULE_fn_level_else_if = 51, RULE_fn_return = 52, 
		RULE_mixin_include = 53, RULE_for_loop = 54, RULE_top_level_for_loop = 55, 
		RULE_sel_level_for_loop = 56, RULE_each_loop = 57, RULE_top_level_each_loop = 58, 
		RULE_sel_level_each_loop = 59, RULE_while_loop = 60, RULE_top_level_while_loop = 61, 
		RULE_sel_level_while_loop = 62;
	public static readonly string[] ruleNames = {
		"patch", "top_level_statement", "patch_declaration", "patch_list", "sassy_string", 
		"import_declaration", "var_decl", "stage_def", "config_creation", "config_mutation", 
		"stage_attribute", "function_def", "mixin_def", "top_level_conditional", 
		"top_level_else", "top_level_else_else", "top_level_else_if", "selection_block", 
		"attributed_selector", "attribute", "constructor_arguments", "selector", 
		"selector_no_children", "selector_body", "selector_statement", "sel_level_conditional", 
		"sel_level_else", "sel_level_else_else", "sel_level_else_if", "set_value", 
		"delete_value", "merge_value", "field_set", "index", "expression", "value", 
		"require_expression", "list", "list_values", "obj", "obj_values", "key_value", 
		"argument_list", "argument", "arg_decl_list", "arg_decl", "function_body", 
		"function_statement", "fn_level_conditional", "fn_level_else", "fn_level_else_else", 
		"fn_level_else_if", "fn_return", "mixin_include", "for_loop", "top_level_for_loop", 
		"sel_level_for_loop", "each_loop", "top_level_each_loop", "sel_level_each_loop", 
		"while_loop", "top_level_while_loop", "sel_level_while_loop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'@use'", "'@function'", "'@if'", "'@else'", "'@else-if'", 
		"'@mixin'", "'@while'", "'@for'", "'from'", "'through'", "'to'", "'@each'", 
		"'in'", "'@set'", "'@merge'", "'@require'", "'@stage'", "'@define-stage'", 
		"'@include'", "'@return'", "'@patch'", "'@new'", "'@before'", "'@after'", 
		"'@global'", "'@create-config'", "'@update-config'", "'{'", "'}'", "'('", 
		"')'", "'['", "']'", "';'", "':'", "'+:'", "'-:'", "'/:'", "'*:'", "','", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'not'", "'>'", "'>='", "'<'", "'<='", 
		"'=='", "'!='", "'and'", "'or'", "'if'", "'else'", "'~'", "'null'", "'true'", 
		"'false'", null, null, null, "'@delete'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "SPACE", "USE", "FUNCTION", "PRE_IF", "PRE_ELSE", "PRE_ELSE_IF", 
		"MIXIN", "WHILE", "FOR", "FROM", "THROUGH", "TO", "EACH", "IN", "SET", 
		"MERGE", "REQUIRE", "STAGE", "DEFINE_STAGE", "INCLUDE", "RETURN", "PATCH", 
		"NEW", "BEFORE", "AFTER", "GLOBAL", "CREATE_CONFIG", "UPDATE_CONFIG", 
		"LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", 
		"RIGHT_BRACKET", "SEMICOLON", "COLON", "PLUS_COLON", "MINUS_COLON", "DIVIDE_COLON", 
		"MULTIPLY_COLON", "COMMA", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", 
		"NOT", "GREATER_THAN", "GREATER_THAN_EQUAL", "LESSER_THAN", "LESSER_THAN_EQUAL", 
		"EQUAL_TO", "NOT_EQUAL_TO", "AND", "OR", "IF", "ELSE", "WITHOUT", "NONE", 
		"TRUE", "FALSE", "HEX_NUMBER", "NUMBER", "STRING", "DELETE", "NAME", "STRING_NAME", 
		"CLASS", "STRING_CLASS", "VARIABLE", "LOCALVARIABLE", "STRING_LOCALVARIABLE", 
		"RULESET", "ENSURE", "STRING_ENSURE", "ELEMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sassy_parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static sassy_parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sassy_parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sassy_parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(sassy_parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public PatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatchContext patch() {
		PatchContext _localctx = new PatchContext(Context, State);
		EnterRule(_localctx, 0, RULE_patch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 126;
				top_level_statement();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0) );
			State = 131;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_declarationContext import_declaration() {
			return GetRuleContext<Import_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_defContext stage_def() {
			return GetRuleContext<Stage_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_defContext mixin_def() {
			return GetRuleContext<Mixin_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_conditionalContext top_level_conditional() {
			return GetRuleContext<Top_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Patch_declarationContext patch_declaration() {
			return GetRuleContext<Patch_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_creationContext config_creation() {
			return GetRuleContext<Config_creationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_mutationContext config_mutation() {
			return GetRuleContext<Config_mutationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_for_loopContext top_level_for_loop() {
			return GetRuleContext<Top_level_for_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_each_loopContext top_level_each_loop() {
			return GetRuleContext<Top_level_each_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_while_loopContext top_level_while_loop() {
			return GetRuleContext<Top_level_while_loopContext>(0);
		}
		public Top_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementContext top_level_statement() {
		Top_level_statementContext _localctx = new Top_level_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_top_level_statement);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				import_declaration();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				var_decl();
				}
				break;
			case DEFINE_STAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135;
				stage_def();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 136;
				function_def();
				}
				break;
			case MIXIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 137;
				mixin_def();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 138;
				top_level_conditional();
				}
				break;
			case REQUIRE:
			case STAGE:
			case NEW:
			case LEFT_PAREN:
			case ADD:
			case MULTIPLY:
			case WITHOUT:
			case STRING:
			case NAME:
			case STRING_NAME:
			case CLASS:
			case STRING_CLASS:
			case RULESET:
			case ENSURE:
			case STRING_ENSURE:
			case ELEMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 139;
				selection_block();
				}
				break;
			case PATCH:
				EnterOuterAlt(_localctx, 8);
				{
				State = 140;
				patch_declaration();
				}
				break;
			case CREATE_CONFIG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 141;
				config_creation();
				}
				break;
			case UPDATE_CONFIG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 142;
				config_mutation();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 143;
				top_level_for_loop();
				}
				break;
			case EACH:
				EnterOuterAlt(_localctx, 12);
				{
				State = 144;
				top_level_each_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 145;
				top_level_while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Patch_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(sassy_parser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Patch_listContext patch_list() {
			return GetRuleContext<Patch_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Patch_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Patch_declarationContext patch_declaration() {
		Patch_declarationContext _localctx = new Patch_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_patch_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(PATCH);
			State = 149;
			patch_list();
			State = 150;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Patch_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext[] sassy_string() {
			return GetRuleContexts<Sassy_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string(int i) {
			return GetRuleContext<Sassy_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Patch_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Patch_listContext patch_list() {
		Patch_listContext _localctx = new Patch_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_patch_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			sassy_string();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 153;
				Match(COMMA);
				State = 154;
				sassy_string();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sassy_stringContext : ParserRuleContext {
		public Sassy_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sassy_string; } }
	 
		public Sassy_stringContext() { }
		public virtual void CopyFrom(Sassy_stringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Quoted_stringContext : Sassy_stringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Quoted_stringContext(Sassy_stringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterQuoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitQuoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoted_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unquoted_stringContext : Sassy_stringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Unquoted_stringContext(Sassy_stringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUnquoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUnquoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquoted_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sassy_stringContext sassy_string() {
		Sassy_stringContext _localctx = new Sassy_stringContext(Context, State);
		EnterRule(_localctx, 8, RULE_sassy_string);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new Quoted_stringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				Match(STRING);
				}
				break;
			case ELEMENT:
				_localctx = new Unquoted_stringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				Match(ELEMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_declarationContext : ParserRuleContext {
		public Sassy_stringContext imp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(sassy_parser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Import_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_declarationContext import_declaration() {
		Import_declarationContext _localctx = new Import_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_import_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(USE);
			State = 165;
			_localctx.imp = sassy_string();
			State = 166;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
	 
		public Var_declContext() { }
		public virtual void CopyFrom(Var_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Add_var_declContext : Var_declContext {
		public IToken variable;
		public IndexContext indexor;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(sassy_parser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Add_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_var_declContext : Var_declContext {
		public IToken variable;
		public IndexContext indexor;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_COLON() { return GetToken(sassy_parser.DIVIDE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Divide_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivide_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivide_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_var_declContext : Var_declContext {
		public IToken variable;
		public IndexContext indexor;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_COLON() { return GetToken(sassy_parser.MULTIPLY_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Multiply_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiply_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiply_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Normal_var_declContext : Var_declContext {
		public IToken variable;
		public IndexContext indexor;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Normal_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNormal_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNormal_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtract_var_declContext : Var_declContext {
		public IToken variable;
		public IndexContext indexor;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(sassy_parser.MINUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Subtract_var_declContext(Var_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtract_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtract_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract_var_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 12, RULE_var_decl);
		int _la;
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new Normal_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				((Normal_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 169;
					((Normal_var_declContext)_localctx).indexor = index();
					}
					}
					State = 174;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 175;
				Match(COLON);
				State = 176;
				((Normal_var_declContext)_localctx).val = expression(0);
				State = 177;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Add_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				((Add_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 180;
					((Add_var_declContext)_localctx).indexor = index();
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 186;
				Match(PLUS_COLON);
				State = 187;
				((Add_var_declContext)_localctx).val = expression(0);
				State = 188;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new Subtract_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 190;
				((Subtract_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 191;
					((Subtract_var_declContext)_localctx).indexor = index();
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 197;
				Match(MINUS_COLON);
				State = 198;
				((Subtract_var_declContext)_localctx).val = expression(0);
				State = 199;
				Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new Divide_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 201;
				((Divide_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 202;
					((Divide_var_declContext)_localctx).indexor = index();
					}
					}
					State = 207;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 208;
				Match(DIVIDE_COLON);
				State = 209;
				((Divide_var_declContext)_localctx).val = expression(0);
				State = 210;
				Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new Multiply_var_declContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 212;
				((Multiply_var_declContext)_localctx).variable = Match(VARIABLE);
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 213;
					((Multiply_var_declContext)_localctx).indexor = index();
					}
					}
					State = 218;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 219;
				Match(MULTIPLY_COLON);
				State = 220;
				((Multiply_var_declContext)_localctx).val = expression(0);
				State = 221;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_defContext : ParserRuleContext {
		public Stage_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_def; } }
	 
		public Stage_defContext() { }
		public virtual void CopyFrom(Stage_defContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Implicit_stage_defContext : Stage_defContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Implicit_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Relative_stage_defContext : Stage_defContext {
		public Sassy_stringContext stage;
		public Stage_attributeContext attributes;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_attributeContext[] stage_attribute() {
			return GetRuleContexts<Stage_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_attributeContext stage_attribute(int i) {
			return GetRuleContext<Stage_attributeContext>(i);
		}
		public Relative_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRelative_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRelative_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelative_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Global_stage_defContext : Stage_defContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(sassy_parser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Global_stage_defContext(Stage_defContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGlobal_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGlobal_stage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_stage_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_defContext stage_def() {
		Stage_defContext _localctx = new Stage_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_stage_def);
		int _la;
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new Implicit_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(DEFINE_STAGE);
				State = 226;
				((Implicit_stage_defContext)_localctx).stage = sassy_string();
				State = 227;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Global_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				Match(DEFINE_STAGE);
				State = 230;
				((Global_stage_defContext)_localctx).stage = sassy_string();
				State = 231;
				Match(COLON);
				State = 232;
				Match(GLOBAL);
				State = 233;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new Relative_stage_defContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 235;
				Match(DEFINE_STAGE);
				State = 236;
				((Relative_stage_defContext)_localctx).stage = sassy_string();
				State = 237;
				Match(COLON);
				State = 238;
				Match(LEFT_BRACE);
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BEFORE || _la==AFTER) {
					{
					{
					State = 239;
					((Relative_stage_defContext)_localctx).attributes = stage_attribute();
					}
					}
					State = 244;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 245;
				Match(RIGHT_BRACE);
				State = 246;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_creationContext : ParserRuleContext {
		public Sassy_stringContext label;
		public Sassy_stringContext config_name;
		public ExpressionContext config_value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_CONFIG() { return GetToken(sassy_parser.CREATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext[] sassy_string() {
			return GetRuleContexts<Sassy_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string(int i) {
			return GetRuleContext<Sassy_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Config_creationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_creation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterConfig_creation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitConfig_creation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfig_creation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Config_creationContext config_creation() {
		Config_creationContext _localctx = new Config_creationContext(Context, State);
		EnterRule(_localctx, 16, RULE_config_creation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(CREATE_CONFIG);
			State = 251;
			_localctx.label = sassy_string();
			State = 252;
			Match(COMMA);
			State = 253;
			_localctx.config_name = sassy_string();
			State = 254;
			Match(COLON);
			State = 255;
			_localctx.config_value = expression(0);
			State = 256;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_mutationContext : ParserRuleContext {
		public Config_mutationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_mutation; } }
	 
		public Config_mutationContext() { }
		public virtual void CopyFrom(Config_mutationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Update_config_labelContext : Config_mutationContext {
		public ExpressionContext priority;
		public Sassy_stringContext label;
		public ExpressionContext config_update;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_CONFIG() { return GetToken(sassy_parser.UPDATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Update_config_labelContext(Config_mutationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUpdate_config_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUpdate_config_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_config_label(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Update_config_fullContext : Config_mutationContext {
		public ExpressionContext priority;
		public Sassy_stringContext label;
		public Sassy_stringContext config_name;
		public ExpressionContext config_update;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_CONFIG() { return GetToken(sassy_parser.UPDATE_CONFIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext[] sassy_string() {
			return GetRuleContexts<Sassy_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string(int i) {
			return GetRuleContext<Sassy_stringContext>(i);
		}
		public Update_config_fullContext(Config_mutationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUpdate_config_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUpdate_config_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_config_full(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Config_mutationContext config_mutation() {
		Config_mutationContext _localctx = new Config_mutationContext(Context, State);
		EnterRule(_localctx, 18, RULE_config_mutation);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new Update_config_fullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				Match(UPDATE_CONFIG);
				State = 259;
				((Update_config_fullContext)_localctx).priority = expression(0);
				State = 260;
				Match(COMMA);
				State = 261;
				((Update_config_fullContext)_localctx).label = sassy_string();
				State = 262;
				Match(COMMA);
				State = 263;
				((Update_config_fullContext)_localctx).config_name = sassy_string();
				State = 264;
				Match(COLON);
				State = 265;
				((Update_config_fullContext)_localctx).config_update = expression(0);
				State = 266;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Update_config_labelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				Match(UPDATE_CONFIG);
				State = 269;
				((Update_config_labelContext)_localctx).priority = expression(0);
				State = 270;
				Match(COMMA);
				State = 271;
				((Update_config_labelContext)_localctx).label = sassy_string();
				State = 272;
				Match(COLON);
				State = 273;
				((Update_config_labelContext)_localctx).config_update = expression(0);
				State = 274;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_attributeContext : ParserRuleContext {
		public Stage_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_attribute; } }
	 
		public Stage_attributeContext() { }
		public virtual void CopyFrom(Stage_attributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Stage_value_beforeContext : Stage_attributeContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(sassy_parser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Stage_value_beforeContext(Stage_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterStage_value_before(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitStage_value_before(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_value_before(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stage_value_afterContext : Stage_attributeContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(sassy_parser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Stage_value_afterContext(Stage_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterStage_value_after(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitStage_value_after(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_value_after(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_attributeContext stage_attribute() {
		Stage_attributeContext _localctx = new Stage_attributeContext(Context, State);
		EnterRule(_localctx, 20, RULE_stage_attribute);
		try {
			State = 286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				_localctx = new Stage_value_beforeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				Match(BEFORE);
				State = 279;
				((Stage_value_beforeContext)_localctx).stage = sassy_string();
				State = 280;
				Match(SEMICOLON);
				}
				break;
			case AFTER:
				_localctx = new Stage_value_afterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				Match(AFTER);
				State = 283;
				((Stage_value_afterContext)_localctx).stage = sassy_string();
				State = 284;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(FUNCTION);
			State = 289;
			_localctx.name = Match(ELEMENT);
			State = 290;
			Match(LEFT_PAREN);
			State = 291;
			_localctx.args = arg_decl_list();
			State = 292;
			Match(RIGHT_PAREN);
			State = 293;
			Match(LEFT_BRACE);
			State = 294;
			_localctx.body = function_body();
			State = 295;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Selector_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIXIN() { return GetToken(sassy_parser.MIXIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		public Mixin_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_defContext mixin_def() {
		Mixin_defContext _localctx = new Mixin_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_mixin_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(MIXIN);
			State = 298;
			_localctx.name = Match(ELEMENT);
			State = 299;
			Match(LEFT_PAREN);
			State = 300;
			_localctx.args = arg_decl_list();
			State = 301;
			Match(RIGHT_PAREN);
			State = 302;
			Match(LEFT_BRACE);
			State = 303;
			_localctx.body = selector_body();
			State = 304;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_conditionalContext : ParserRuleContext {
		public ExpressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_conditionalContext top_level_conditional() {
		Top_level_conditionalContext _localctx = new Top_level_conditionalContext(Context, State);
		EnterRule(_localctx, 26, RULE_top_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(PRE_IF);
			State = 307;
			_localctx.cond = expression(0);
			State = 308;
			Match(LEFT_BRACE);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 309;
				_localctx.body = top_level_statement();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			Match(RIGHT_BRACE);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 316;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_elseContext top_level_else_else() {
			return GetRuleContext<Top_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_ifContext top_level_else_if() {
			return GetRuleContext<Top_level_else_ifContext>(0);
		}
		public Top_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_elseContext top_level_else() {
		Top_level_elseContext _localctx = new Top_level_elseContext(Context, State);
		EnterRule(_localctx, 28, RULE_top_level_else);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319;
				top_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320;
				top_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_elseContext : ParserRuleContext {
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_elseContext top_level_else_else() {
		Top_level_else_elseContext _localctx = new Top_level_else_elseContext(Context, State);
		EnterRule(_localctx, 30, RULE_top_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(PRE_ELSE);
			State = 324;
			Match(LEFT_BRACE);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 325;
				_localctx.body = top_level_statement();
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_ifContext : ParserRuleContext {
		public ExpressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_ifContext top_level_else_if() {
		Top_level_else_ifContext _localctx = new Top_level_else_ifContext(Context, State);
		EnterRule(_localctx, 32, RULE_top_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(PRE_ELSE_IF);
			State = 334;
			_localctx.cond = expression(0);
			State = 335;
			Match(LEFT_BRACE);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 336;
				_localctx.body = top_level_statement();
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 342;
			Match(RIGHT_BRACE);
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 343;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attributed_selectorContext attributed_selector() {
			return GetRuleContext<Attributed_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		public Selection_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_blockContext selection_block() {
		Selection_blockContext _localctx = new Selection_blockContext(Context, State);
		EnterRule(_localctx, 34, RULE_selection_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			attributed_selector();
			State = 347;
			Match(LEFT_BRACE);
			State = 348;
			selector_body();
			State = 349;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attributed_selectorContext : ParserRuleContext {
		public AttributeContext attributes;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributed_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_selector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attributed_selectorContext attributed_selector() {
		Attributed_selectorContext _localctx = new Attributed_selectorContext(Context, State);
		EnterRule(_localctx, 36, RULE_attributed_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17563648L) != 0)) {
				{
				{
				State = 351;
				_localctx.attributes = attribute();
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 357;
			selector(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	 
		public AttributeContext() { }
		public virtual void CopyFrom(AttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Run_at_stageContext : AttributeContext {
		public Sassy_stringContext stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAGE() { return GetToken(sassy_parser.STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Run_at_stageContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRun_at_stage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_modContext : AttributeContext {
		public Require_expressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(sassy_parser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_modContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_mod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class New_assetContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(sassy_parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_argumentsContext constructor_arguments() {
			return GetRuleContext<Constructor_argumentsContext>(0);
		}
		public New_assetContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNew_asset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNew_asset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_asset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 38, RULE_attribute);
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE:
				_localctx = new Require_modContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				Match(REQUIRE);
				State = 360;
				((Require_modContext)_localctx).expr = require_expression(0);
				}
				break;
			case STAGE:
				_localctx = new Run_at_stageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 361;
				Match(STAGE);
				State = 362;
				((Run_at_stageContext)_localctx).stage = sassy_string();
				}
				break;
			case NEW:
				_localctx = new New_assetContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 363;
				Match(NEW);
				State = 364;
				constructor_arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Constructor_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterConstructor_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitConstructor_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_argumentsContext constructor_arguments() {
		Constructor_argumentsContext _localctx = new Constructor_argumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_constructor_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(LEFT_PAREN);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070758418052284432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9095L) != 0)) {
				{
				State = 368;
				expression(0);
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 369;
					Match(COMMA);
					State = 370;
					expression(0);
					}
					}
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 378;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sel_class_captureContext : SelectorContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Sel_class_captureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_class_capture(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_childContext : SelectorContext {
		public SelectorContext parent;
		public Selector_no_childrenContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_childContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_child(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_classContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_nameContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_intersectionContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_intersectionContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_intersection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_string_class_captureContext : SelectorContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Sel_string_class_captureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_string_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_string_class_capture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_string_class_capture(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_ensureContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENSURE() { return GetToken(sassy_parser.ENSURE, 0); }
		public Sel_ensureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_ensure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_everythingContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public Sel_everythingContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_everything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_string_classContext : SelectorContext {
		public IToken str_field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		public Sel_without_string_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_string_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_string_classContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		public Sel_string_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_string_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_string_nameContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(sassy_parser.STRING_NAME, 0); }
		public Sel_string_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_string_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_elementContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_rulesetContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Sel_rulesetContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_add_elementContext : SelectorContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_add_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_add_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_element_stringContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Sel_element_stringContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_element_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_element_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_element_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_add_string_elementContext : SelectorContext {
		public IToken str_element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Sel_add_string_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_add_string_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_add_string_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_add_string_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_string_nameContext : SelectorContext {
		public IToken str_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(sassy_parser.STRING_NAME, 0); }
		public Sel_without_string_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_string_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_classContext : SelectorContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_without_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_string_ensureContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_ENSURE() { return GetToken(sassy_parser.STRING_ENSURE, 0); }
		public Sel_string_ensureContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_string_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_string_ensure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_string_ensure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_nameContext : SelectorContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_without_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_combinationContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_combinationContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_combination(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_subContext : SelectorContext {
		public SelectorContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Sel_subContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		return selector(0);
	}

	private SelectorContext selector(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectorContext _localctx = new SelectorContext(Context, _parentState);
		SelectorContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_selector, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				_localctx = new Sel_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 381;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new Sel_element_stringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 382;
				Match(STRING);
				}
				break;
			case 3:
				{
				_localctx = new Sel_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 383;
				Match(CLASS);
				}
				break;
			case 4:
				{
				_localctx = new Sel_string_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 384;
				Match(STRING_CLASS);
				}
				break;
			case 5:
				{
				_localctx = new Sel_class_captureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 385;
				Match(CLASS);
				State = 386;
				Match(COLON);
				State = 387;
				Match(LEFT_BRACKET);
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 388;
					((Sel_class_captureContext)_localctx).body = function_statement();
					}
					}
					State = 393;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 394;
				Match(RIGHT_BRACKET);
				}
				break;
			case 6:
				{
				_localctx = new Sel_string_class_captureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 395;
				Match(STRING_CLASS);
				State = 396;
				Match(COLON);
				State = 397;
				Match(LEFT_BRACKET);
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 398;
					((Sel_string_class_captureContext)_localctx).body = function_statement();
					}
					}
					State = 403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 404;
				Match(RIGHT_BRACKET);
				}
				break;
			case 7:
				{
				_localctx = new Sel_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 405;
				Match(NAME);
				}
				break;
			case 8:
				{
				_localctx = new Sel_string_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 406;
				Match(STRING_NAME);
				}
				break;
			case 9:
				{
				_localctx = new Sel_rulesetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 407;
				Match(RULESET);
				}
				break;
			case 10:
				{
				_localctx = new Sel_ensureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 408;
				Match(ENSURE);
				}
				break;
			case 11:
				{
				_localctx = new Sel_string_ensureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 409;
				Match(STRING_ENSURE);
				}
				break;
			case 12:
				{
				_localctx = new Sel_subContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 410;
				Match(LEFT_PAREN);
				State = 411;
				((Sel_subContext)_localctx).internal_selector = selector(0);
				State = 412;
				Match(RIGHT_PAREN);
				}
				break;
			case 13:
				{
				_localctx = new Sel_add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 414;
				Match(ADD);
				State = 415;
				((Sel_add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 14:
				{
				_localctx = new Sel_add_string_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 416;
				Match(ADD);
				State = 417;
				((Sel_add_string_elementContext)_localctx).str_element = Match(STRING);
				}
				break;
			case 15:
				{
				_localctx = new Sel_without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 418;
				Match(WITHOUT);
				State = 419;
				((Sel_without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 16:
				{
				_localctx = new Sel_without_string_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 420;
				Match(WITHOUT);
				State = 421;
				((Sel_without_string_classContext)_localctx).str_field = Match(STRING_CLASS);
				}
				break;
			case 17:
				{
				_localctx = new Sel_without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 422;
				Match(WITHOUT);
				State = 423;
				((Sel_without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 18:
				{
				_localctx = new Sel_without_string_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 424;
				Match(WITHOUT);
				State = 425;
				((Sel_without_string_nameContext)_localctx).str_name = Match(STRING_NAME);
				}
				break;
			case 19:
				{
				_localctx = new Sel_everythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 426;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 439;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 437;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new Sel_combinationContext(new SelectorContext(_parentctx, _parentState));
						((Sel_combinationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 429;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 430;
						Match(COMMA);
						State = 431;
						((Sel_combinationContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					case 2:
						{
						_localctx = new Sel_childContext(new SelectorContext(_parentctx, _parentState));
						((Sel_childContext)_localctx).parent = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 432;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 433;
						Match(GREATER_THAN);
						State = 434;
						((Sel_childContext)_localctx).child = selector_no_children(0);
						}
						break;
					case 3:
						{
						_localctx = new Sel_intersectionContext(new SelectorContext(_parentctx, _parentState));
						((Sel_intersectionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 435;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 436;
						((Sel_intersectionContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					}
					} 
				}
				State = 441;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_no_childrenContext : ParserRuleContext {
		public Selector_no_childrenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_no_children; } }
	 
		public Selector_no_childrenContext() { }
		public virtual void CopyFrom(Selector_no_childrenContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ruleset_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Ruleset_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_class_capture_selectorContext : Selector_no_childrenContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public String_class_capture_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_class_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_class_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_class_capture_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_string_nameContext : Selector_no_childrenContext {
		public IToken str_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(sassy_parser.STRING_NAME, 0); }
		public Without_string_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_string_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_string_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sub_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_classContext : Selector_no_childrenContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Without_classContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_nameContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_NAME() { return GetToken(sassy_parser.STRING_NAME, 0); }
		public String_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_class_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		public String_class_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_class_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_class_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_class_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_string_elementContext : Selector_no_childrenContext {
		public IToken str_element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Add_string_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_string_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_string_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_string_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Combination_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Combination_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombination_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_capture_selectorContext : Selector_no_childrenContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Class_capture_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_capture_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_capture_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_nameContext : Selector_no_childrenContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Without_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public NameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_elementContext : Selector_no_childrenContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Add_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_string_classContext : Selector_no_childrenContext {
		public IToken str_field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLASS() { return GetToken(sassy_parser.STRING_CLASS, 0); }
		public Without_string_classContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_string_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_string_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EverythingContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public EverythingContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEverything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Intersection_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Intersection_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersection_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_elementContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public ElementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_no_childrenContext selector_no_children() {
		return selector_no_children(0);
	}

	private Selector_no_childrenContext selector_no_children(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Selector_no_childrenContext _localctx = new Selector_no_childrenContext(Context, _parentState);
		Selector_no_childrenContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_selector_no_children, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				_localctx = new ElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 443;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new String_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 444;
				Match(STRING);
				}
				break;
			case 3:
				{
				_localctx = new Class_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 445;
				Match(CLASS);
				}
				break;
			case 4:
				{
				_localctx = new String_class_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 446;
				Match(STRING_CLASS);
				}
				break;
			case 5:
				{
				_localctx = new Class_capture_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 447;
				Match(CLASS);
				State = 448;
				Match(COLON);
				State = 449;
				Match(LEFT_BRACKET);
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 450;
					((Class_capture_selectorContext)_localctx).body = function_statement();
					}
					}
					State = 455;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 456;
				Match(RIGHT_BRACKET);
				}
				break;
			case 6:
				{
				_localctx = new String_class_capture_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 457;
				Match(STRING_CLASS);
				State = 458;
				Match(COLON);
				State = 459;
				Match(LEFT_BRACKET);
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 460;
					((String_class_capture_selectorContext)_localctx).body = function_statement();
					}
					}
					State = 465;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 466;
				Match(RIGHT_BRACKET);
				}
				break;
			case 7:
				{
				_localctx = new NameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 467;
				Match(NAME);
				}
				break;
			case 8:
				{
				_localctx = new String_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 468;
				Match(STRING_NAME);
				}
				break;
			case 9:
				{
				_localctx = new Ruleset_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 469;
				Match(RULESET);
				}
				break;
			case 10:
				{
				_localctx = new Sub_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 470;
				Match(LEFT_PAREN);
				State = 471;
				((Sub_selectorContext)_localctx).internal_selector = selector_no_children(0);
				State = 472;
				Match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new Add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 474;
				Match(ADD);
				State = 475;
				((Add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 12:
				{
				_localctx = new Add_string_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 476;
				Match(ADD);
				State = 477;
				((Add_string_elementContext)_localctx).str_element = Match(STRING);
				}
				break;
			case 13:
				{
				_localctx = new Without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 478;
				Match(WITHOUT);
				State = 479;
				((Without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 14:
				{
				_localctx = new Without_string_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 480;
				Match(WITHOUT);
				State = 481;
				((Without_string_classContext)_localctx).str_field = Match(STRING_CLASS);
				}
				break;
			case 15:
				{
				_localctx = new Without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 482;
				Match(WITHOUT);
				State = 483;
				((Without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 16:
				{
				_localctx = new Without_string_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 484;
				Match(WITHOUT);
				State = 485;
				((Without_string_nameContext)_localctx).str_name = Match(STRING_NAME);
				}
				break;
			case 17:
				{
				_localctx = new EverythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 486;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 496;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 494;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						_localctx = new Combination_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Combination_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 489;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 490;
						Match(COMMA);
						State = 491;
						((Combination_selectorContext)_localctx).rhs = selector_no_children(10);
						}
						break;
					case 2:
						{
						_localctx = new Intersection_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Intersection_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 492;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 493;
						((Intersection_selectorContext)_localctx).rhs = selector_no_children(9);
						}
						break;
					}
					} 
				}
				State = 498;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Selector_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_bodyContext selector_body() {
		Selector_bodyContext _localctx = new Selector_bodyContext(Context, State);
		EnterRule(_localctx, 46, RULE_selector_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 499;
				selector_statement();
				}
				}
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_conditionalContext sel_level_conditional() {
			return GetRuleContext<Sel_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_each_loopContext sel_level_each_loop() {
			return GetRuleContext<Sel_level_each_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_while_loopContext sel_level_while_loop() {
			return GetRuleContext<Sel_level_while_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_for_loopContext sel_level_for_loop() {
			return GetRuleContext<Sel_level_for_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_valueContext set_value() {
			return GetRuleContext<Set_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_valueContext delete_value() {
			return GetRuleContext<Delete_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_valueContext merge_value() {
			return GetRuleContext<Merge_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_setContext field_set() {
			return GetRuleContext<Field_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_includeContext mixin_include() {
			return GetRuleContext<Mixin_includeContext>(0);
		}
		public Selector_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_statementContext selector_statement() {
		Selector_statementContext _localctx = new Selector_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_selector_statement);
		try {
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505;
				var_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 506;
				sel_level_conditional();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 507;
				sel_level_each_loop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 508;
				sel_level_while_loop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 509;
				sel_level_for_loop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 510;
				set_value();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 511;
				delete_value();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 512;
				merge_value();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 513;
				field_set();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 514;
				selection_block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 515;
				mixin_include();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_conditionalContext : ParserRuleContext {
		public ExpressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_conditionalContext sel_level_conditional() {
		Sel_level_conditionalContext _localctx = new Sel_level_conditionalContext(Context, State);
		EnterRule(_localctx, 50, RULE_sel_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(PRE_IF);
			State = 519;
			_localctx.cond = expression(0);
			State = 520;
			Match(LEFT_BRACE);
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 521;
				_localctx.body = selector_statement();
				}
				}
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 527;
			Match(RIGHT_BRACE);
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 528;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_elseContext sel_level_else_else() {
			return GetRuleContext<Sel_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_ifContext sel_level_else_if() {
			return GetRuleContext<Sel_level_else_ifContext>(0);
		}
		public Sel_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_elseContext sel_level_else() {
		Sel_level_elseContext _localctx = new Sel_level_elseContext(Context, State);
		EnterRule(_localctx, 52, RULE_sel_level_else);
		try {
			State = 533;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531;
				sel_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532;
				sel_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_elseContext : ParserRuleContext {
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_elseContext sel_level_else_else() {
		Sel_level_else_elseContext _localctx = new Sel_level_else_elseContext(Context, State);
		EnterRule(_localctx, 54, RULE_sel_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(PRE_ELSE);
			State = 536;
			Match(LEFT_BRACE);
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 537;
				_localctx.body = selector_statement();
				}
				}
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 543;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_ifContext : ParserRuleContext {
		public ExpressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_ifContext sel_level_else_if() {
		Sel_level_else_ifContext _localctx = new Sel_level_else_ifContext(Context, State);
		EnterRule(_localctx, 56, RULE_sel_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(PRE_ELSE_IF);
			State = 546;
			_localctx.cond = expression(0);
			State = 547;
			Match(LEFT_BRACE);
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 548;
				_localctx.body = selector_statement();
				}
				}
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 554;
			Match(RIGHT_BRACE);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 555;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_valueContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(sassy_parser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Set_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_valueContext set_value() {
		Set_valueContext _localctx = new Set_valueContext(Context, State);
		EnterRule(_localctx, 58, RULE_set_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(SET);
			State = 559;
			_localctx.expr = expression(0);
			State = 560;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Delete_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_valueContext delete_value() {
		Delete_valueContext _localctx = new Delete_valueContext(Context, State);
		EnterRule(_localctx, 60, RULE_delete_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(DELETE);
			State = 563;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_valueContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(sassy_parser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Merge_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_valueContext merge_value() {
		Merge_valueContext _localctx = new Merge_valueContext(Context, State);
		EnterRule(_localctx, 62, RULE_merge_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(MERGE);
			State = 566;
			_localctx.expr = expression(0);
			State = 567;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_setContext : ParserRuleContext {
		public Field_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_set; } }
	 
		public Field_setContext() { }
		public virtual void CopyFrom(Field_setContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Add_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(sassy_parser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Add_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_COLON() { return GetToken(sassy_parser.DIVIDE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Divide_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivide_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivide_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtract_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(sassy_parser.MINUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Subtract_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtract_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtract_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_COLON() { return GetToken(sassy_parser.MULTIPLY_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Multiply_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiply_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiply_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Normal_field_setContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public Normal_field_setContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNormal_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNormal_field_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal_field_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_setContext field_set() {
		Field_setContext _localctx = new Field_setContext(Context, State);
		EnterRule(_localctx, 64, RULE_field_set);
		int _la;
		try {
			State = 624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				_localctx = new Normal_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 569;
				sassy_string();
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 570;
					((Normal_field_setContext)_localctx).indexor = index();
					}
					}
					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 576;
				Match(COLON);
				State = 577;
				((Normal_field_setContext)_localctx).expr = expression(0);
				State = 578;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new Add_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 580;
				sassy_string();
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 581;
					((Add_field_setContext)_localctx).indexor = index();
					}
					}
					State = 586;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 587;
				Match(PLUS_COLON);
				State = 588;
				((Add_field_setContext)_localctx).expr = expression(0);
				State = 589;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new Subtract_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 591;
				sassy_string();
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 592;
					((Subtract_field_setContext)_localctx).indexor = index();
					}
					}
					State = 597;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 598;
				Match(MINUS_COLON);
				State = 599;
				((Subtract_field_setContext)_localctx).expr = expression(0);
				State = 600;
				Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new Multiply_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 602;
				sassy_string();
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 603;
					((Multiply_field_setContext)_localctx).indexor = index();
					}
					}
					State = 608;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 609;
				Match(MULTIPLY_COLON);
				State = 610;
				((Multiply_field_setContext)_localctx).expr = expression(0);
				State = 611;
				Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new Divide_field_setContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 613;
				sassy_string();
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LEFT_BRACKET) {
					{
					{
					State = 614;
					((Divide_field_setContext)_localctx).indexor = index();
					}
					}
					State = 619;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 620;
				Match(DIVIDE_COLON);
				State = 621;
				((Divide_field_setContext)_localctx).expr = expression(0);
				State = 622;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
	 
		public IndexContext() { }
		public virtual void CopyFrom(IndexContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Map_indexerContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public Map_indexerContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMap_indexer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMap_indexer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_indexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_indexerContext : IndexContext {
		public ExpressionContext elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_indexerContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterExpression_indexer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitExpression_indexer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_indexer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 66, RULE_index);
		try {
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				_localctx = new Expression_indexerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 626;
				Match(LEFT_BRACKET);
				State = 627;
				((Expression_indexerContext)_localctx).elem = expression(0);
				State = 628;
				Match(RIGHT_BRACKET);
				}
				break;
			case 2:
				_localctx = new Map_indexerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 630;
				Match(LEFT_BRACKET);
				State = 631;
				((Map_indexerContext)_localctx).elem = Match(MULTIPLY);
				State = 632;
				Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Not_equal_toContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_TO() { return GetToken(sassy_parser.NOT_EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Not_equal_toContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_equal_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Variable_referenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Variable_referenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equal_toContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_TO() { return GetToken(sassy_parser.EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Equal_toContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_variable_referenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALVARIABLE() { return GetToken(sassy_parser.LOCALVARIABLE, 0); }
		public Local_variable_referenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_call_rulesetContext : ExpressionContext {
		public ExpressionContext lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_call_rulesetContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_referenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Value_referenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(sassy_parser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivisionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeContext : ExpressionContext {
		public ExpressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExpressionContext {
		public ExpressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(sassy_parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_thanContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN() { return GetToken(sassy_parser.LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Lesser_thanContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_callContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken name;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_callContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_thanContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Greater_thanContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sassy_parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_sub_expressionContext : ExpressionContext {
		public ExpressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Sub_sub_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_sub_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_than_equalContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_EQUAL() { return GetToken(sassy_parser.GREATER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Greater_than_equalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexorContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(sassy_parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_than_equalContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN_EQUAL() { return GetToken(sassy_parser.LESSER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Lesser_than_equalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositiveContext : ExpressionContext {
		public ExpressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositiveContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_callContext : ExpressionContext {
		public IToken lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Simple_callContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_local_variable_referenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LOCALVARIABLE() { return GetToken(sassy_parser.STRING_LOCALVARIABLE, 0); }
		public String_local_variable_referenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_local_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_local_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_local_variable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RemainderContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULUS() { return GetToken(sassy_parser.MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RemainderContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext cond;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(sassy_parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(sassy_parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				_localctx = new Simple_callContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 636;
				((Simple_callContext)_localctx).lhs = Match(ELEMENT);
				State = 637;
				Match(LEFT_PAREN);
				State = 638;
				((Simple_callContext)_localctx).args = argument_list();
				State = 639;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new Value_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 641;
				value();
				}
				break;
			case 3:
				{
				_localctx = new Variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 642;
				Match(VARIABLE);
				}
				break;
			case 4:
				{
				_localctx = new Local_variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 643;
				Match(LOCALVARIABLE);
				}
				break;
			case 5:
				{
				_localctx = new String_local_variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 644;
				Match(STRING_LOCALVARIABLE);
				}
				break;
			case 6:
				{
				_localctx = new Sub_sub_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 645;
				Match(LEFT_PAREN);
				State = 646;
				((Sub_sub_expressionContext)_localctx).internal_expr = expression(0);
				State = 647;
				Match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new NegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 649;
				Match(SUBTRACT);
				State = 650;
				((NegativeContext)_localctx).child = expression(20);
				}
				break;
			case 8:
				{
				_localctx = new PositiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 651;
				Match(ADD);
				State = 652;
				((PositiveContext)_localctx).child = expression(19);
				}
				break;
			case 9:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 653;
				Match(NOT);
				State = 654;
				((NotContext)_localctx).child = expression(18);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 722;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 720;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 657;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 658;
						Match(MULTIPLY);
						State = 659;
						((MultiplicationContext)_localctx).rhs = expression(15);
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new ExpressionContext(_parentctx, _parentState));
						((DivisionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 660;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 661;
						Match(DIVIDE);
						State = 662;
						((DivisionContext)_localctx).rhs = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RemainderContext(new ExpressionContext(_parentctx, _parentState));
						((RemainderContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 663;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 664;
						Match(MODULUS);
						State = 665;
						((RemainderContext)_localctx).rhs = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new AdditionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 666;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 667;
						Match(ADD);
						State = 668;
						((AdditionContext)_localctx).rhs = expression(12);
						}
						break;
					case 5:
						{
						_localctx = new SubtractionContext(new ExpressionContext(_parentctx, _parentState));
						((SubtractionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 669;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 670;
						Match(SUBTRACT);
						State = 671;
						((SubtractionContext)_localctx).rhs = expression(11);
						}
						break;
					case 6:
						{
						_localctx = new Greater_thanContext(new ExpressionContext(_parentctx, _parentState));
						((Greater_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 672;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 673;
						Match(GREATER_THAN);
						State = 674;
						((Greater_thanContext)_localctx).rhs = expression(10);
						}
						break;
					case 7:
						{
						_localctx = new Lesser_thanContext(new ExpressionContext(_parentctx, _parentState));
						((Lesser_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 675;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 676;
						Match(LESSER_THAN);
						State = 677;
						((Lesser_thanContext)_localctx).rhs = expression(9);
						}
						break;
					case 8:
						{
						_localctx = new Greater_than_equalContext(new ExpressionContext(_parentctx, _parentState));
						((Greater_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 678;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 679;
						Match(GREATER_THAN_EQUAL);
						State = 680;
						((Greater_than_equalContext)_localctx).rhs = expression(8);
						}
						break;
					case 9:
						{
						_localctx = new Lesser_than_equalContext(new ExpressionContext(_parentctx, _parentState));
						((Lesser_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 681;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 682;
						Match(LESSER_THAN_EQUAL);
						State = 683;
						((Lesser_than_equalContext)_localctx).rhs = expression(7);
						}
						break;
					case 10:
						{
						_localctx = new Equal_toContext(new ExpressionContext(_parentctx, _parentState));
						((Equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 684;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 685;
						Match(EQUAL_TO);
						State = 686;
						((Equal_toContext)_localctx).rhs = expression(6);
						}
						break;
					case 11:
						{
						_localctx = new Not_equal_toContext(new ExpressionContext(_parentctx, _parentState));
						((Not_equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 687;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 688;
						Match(NOT_EQUAL_TO);
						State = 689;
						((Not_equal_toContext)_localctx).rhs = expression(5);
						}
						break;
					case 12:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						((AndContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 690;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 691;
						Match(AND);
						State = 692;
						((AndContext)_localctx).rhs = expression(4);
						}
						break;
					case 13:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						((OrContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 693;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 694;
						Match(OR);
						State = 695;
						((OrContext)_localctx).rhs = expression(3);
						}
						break;
					case 14:
						{
						_localctx = new TernaryContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 696;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 697;
						Match(IF);
						State = 698;
						((TernaryContext)_localctx).cond = expression(0);
						State = 699;
						Match(ELSE);
						State = 700;
						((TernaryContext)_localctx).rhs = expression(2);
						}
						break;
					case 15:
						{
						_localctx = new Member_callContext(new ExpressionContext(_parentctx, _parentState));
						((Member_callContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 702;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 703;
						Match(COLON);
						State = 704;
						((Member_callContext)_localctx).name = Match(ELEMENT);
						State = 705;
						Match(LEFT_PAREN);
						State = 706;
						((Member_callContext)_localctx).args = argument_list();
						State = 707;
						Match(RIGHT_PAREN);
						}
						break;
					case 16:
						{
						_localctx = new Member_call_rulesetContext(new ExpressionContext(_parentctx, _parentState));
						((Member_call_rulesetContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 709;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 710;
						Match(RULESET);
						State = 711;
						Match(LEFT_PAREN);
						State = 712;
						((Member_call_rulesetContext)_localctx).args = argument_list();
						State = 713;
						Match(RIGHT_PAREN);
						}
						break;
					case 17:
						{
						_localctx = new IndexorContext(new ExpressionContext(_parentctx, _parentState));
						((IndexorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 715;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 716;
						Match(LEFT_BRACKET);
						State = 717;
						((IndexorContext)_localctx).rhs = expression(0);
						State = 718;
						Match(RIGHT_BRACKET);
						}
						break;
					}
					} 
				}
				State = 724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class List_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public List_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_falseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(sassy_parser.FALSE, 0); }
		public Boolean_falseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_false(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_stringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Element_stringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Object_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public Object_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(sassy_parser.NONE, 0); }
		public NoneContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClosureContext : ValueContext {
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public ClosureContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClosure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClosure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_deletionContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		public Value_deletionContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_deletion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_trueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(sassy_parser.TRUE, 0); }
		public Boolean_trueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_true(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 70, RULE_value);
		try {
			State = 742;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				_localctx = new Value_deletionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 725;
				Match(DELETE);
				}
				break;
			case TRUE:
				_localctx = new Boolean_trueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 726;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Boolean_falseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 727;
				Match(FALSE);
				}
				break;
			case NUMBER:
				_localctx = new Number_valueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 728;
				Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new String_valueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 729;
				Match(STRING);
				}
				break;
			case ELEMENT:
				_localctx = new Element_stringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 730;
				Match(ELEMENT);
				}
				break;
			case NONE:
				_localctx = new NoneContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 731;
				Match(NONE);
				}
				break;
			case FUNCTION:
				_localctx = new ClosureContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 732;
				Match(FUNCTION);
				State = 733;
				Match(LEFT_PAREN);
				State = 734;
				((ClosureContext)_localctx).args = arg_decl_list();
				State = 735;
				Match(RIGHT_PAREN);
				State = 736;
				Match(LEFT_BRACE);
				State = 737;
				((ClosureContext)_localctx).body = function_body();
				State = 738;
				Match(RIGHT_BRACE);
				}
				break;
			case LEFT_BRACKET:
				_localctx = new List_valueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 740;
				list();
				}
				break;
			case LEFT_BRACE:
				_localctx = new Object_valueContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 741;
				obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Require_expressionContext : ParserRuleContext {
		public Require_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_require_expression; } }
	 
		public Require_expressionContext() { }
		public virtual void CopyFrom(Require_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Require_subContext : Require_expressionContext {
		public Require_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_subContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_sub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_orContext : Require_expressionContext {
		public Require_expressionContext lhs;
		public Require_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(sassy_parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext[] require_expression() {
			return GetRuleContexts<Require_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression(int i) {
			return GetRuleContext<Require_expressionContext>(i);
		}
		public Require_orContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_notContext : Require_expressionContext {
		public Require_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(sassy_parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression() {
			return GetRuleContext<Require_expressionContext>(0);
		}
		public Require_notContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_not(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_guidContext : Require_expressionContext {
		public Sassy_stringContext modid;
		[System.Diagnostics.DebuggerNonUserCode] public Sassy_stringContext sassy_string() {
			return GetRuleContext<Sassy_stringContext>(0);
		}
		public Require_guidContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_guid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_guid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_guid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_andContext : Require_expressionContext {
		public Require_expressionContext lhs;
		public Require_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sassy_parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext[] require_expression() {
			return GetRuleContexts<Require_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Require_expressionContext require_expression(int i) {
			return GetRuleContext<Require_expressionContext>(i);
		}
		public Require_andContext(Require_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Require_expressionContext require_expression() {
		return require_expression(0);
	}

	private Require_expressionContext require_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Require_expressionContext _localctx = new Require_expressionContext(Context, _parentState);
		Require_expressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_require_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 752;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				_localctx = new Require_subContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 745;
				Match(LEFT_PAREN);
				State = 746;
				((Require_subContext)_localctx).internal_expr = require_expression(0);
				State = 747;
				Match(RIGHT_PAREN);
				}
				break;
			case NOT:
				{
				_localctx = new Require_notContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 749;
				Match(NOT);
				State = 750;
				((Require_notContext)_localctx).internal_expr = require_expression(2);
				}
				break;
			case STRING:
			case ELEMENT:
				{
				_localctx = new Require_guidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 751;
				((Require_guidContext)_localctx).modid = sassy_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 762;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 760;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						_localctx = new Require_andContext(new Require_expressionContext(_parentctx, _parentState));
						((Require_andContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_require_expression);
						State = 754;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 755;
						Match(AND);
						State = 756;
						((Require_andContext)_localctx).rhs = require_expression(5);
						}
						break;
					case 2:
						{
						_localctx = new Require_orContext(new Require_expressionContext(_parentctx, _parentState));
						((Require_orContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_require_expression);
						State = 757;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 758;
						Match(OR);
						State = 759;
						((Require_orContext)_localctx).rhs = require_expression(4);
						}
						break;
					}
					} 
				}
				State = 764;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_valuesContext list_values() {
			return GetRuleContext<List_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 74, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			Match(LEFT_BRACKET);
			State = 766;
			_localctx.@values = list_values();
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 767;
				Match(COMMA);
				}
			}

			State = 770;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public List_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_valuesContext list_values() {
		List_valuesContext _localctx = new List_valuesContext(Context, State);
		EnterRule(_localctx, 76, RULE_list_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070758418052284432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9095L) != 0)) {
					{
					State = 772;
					expression(0);
					}
				}

				State = 779;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 775;
						Match(COMMA);
						State = 776;
						expression(0);
						}
						} 
					}
					State = 781;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public Obj_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Obj_valuesContext obj_values() {
			return GetRuleContext<Obj_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 78, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(LEFT_BRACE);
			State = 785;
			_localctx.@values = obj_values();
			State = 787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 786;
				Match(COMMA);
				}
			}

			State = 789;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext[] key_value() {
			return GetRuleContexts<Key_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext key_value(int i) {
			return GetRuleContext<Key_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Obj_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_valuesContext obj_values() {
		Obj_valuesContext _localctx = new Obj_valuesContext(Context, State);
		EnterRule(_localctx, 80, RULE_obj_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING || _la==ELEMENT) {
					{
					State = 791;
					key_value();
					}
				}

				State = 798;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 794;
						Match(COMMA);
						State = 795;
						key_value();
						}
						} 
					}
					State = 800;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_valueContext : ParserRuleContext {
		public Key_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value; } }
	 
		public Key_valueContext() { }
		public virtual void CopyFrom(Key_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_keyContext : Key_valueContext {
		public IToken key;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public String_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_key(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal_keyContext : Key_valueContext {
		public IToken key;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Literal_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_valueContext key_value() {
		Key_valueContext _localctx = new Key_valueContext(Context, State);
		EnterRule(_localctx, 82, RULE_key_value);
		try {
			State = 809;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				_localctx = new Literal_keyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 803;
				((Literal_keyContext)_localctx).key = Match(ELEMENT);
				State = 804;
				Match(COLON);
				State = 805;
				((Literal_keyContext)_localctx).val = expression(0);
				}
				break;
			case STRING:
				_localctx = new String_keyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 806;
				((String_keyContext)_localctx).key = Match(STRING);
				State = 807;
				Match(COLON);
				State = 808;
				((String_keyContext)_localctx).val = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_argument_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070758418052284432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9095L) != 0)) {
					{
					State = 811;
					argument();
					}
				}

				State = 818;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 814;
						Match(COMMA);
						State = 815;
						argument();
						}
						} 
					}
					State = 820;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				}
				break;
			}
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 823;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Named_argumentContext : ArgumentContext {
		public IToken key;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Named_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unnamed_argumentContext : ArgumentContext {
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unnamed_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 86, RULE_argument);
		try {
			State = 830;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				_localctx = new Named_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 826;
				((Named_argumentContext)_localctx).key = Match(VARIABLE);
				State = 827;
				Match(COLON);
				State = 828;
				((Named_argumentContext)_localctx).val = expression(0);
				}
				break;
			case 2:
				_localctx = new Unnamed_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 829;
				((Unnamed_argumentContext)_localctx).val = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext[] arg_decl() {
			return GetRuleContexts<Arg_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext arg_decl(int i) {
			return GetRuleContext<Arg_declContext>(i);
		}
		public Arg_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_decl_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_decl_listContext arg_decl_list() {
		Arg_decl_listContext _localctx = new Arg_decl_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_arg_decl_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 832;
					arg_decl();
					}
				}

				State = 839;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 835;
						Match(COMMA);
						State = 836;
						arg_decl();
						}
						} 
					}
					State = 841;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				}
				}
				break;
			}
			State = 845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 844;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declContext : ParserRuleContext {
		public Arg_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl; } }
	 
		public Arg_declContext() { }
		public virtual void CopyFrom(Arg_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Argument_without_defaultContext : Arg_declContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Argument_without_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_without_default(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Argument_with_defaultContext : Arg_declContext {
		public IToken name;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Argument_with_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declContext arg_decl() {
		Arg_declContext _localctx = new Arg_declContext(Context, State);
		EnterRule(_localctx, 90, RULE_arg_decl);
		try {
			State = 851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				_localctx = new Argument_without_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 847;
				((Argument_without_defaultContext)_localctx).name = Match(VARIABLE);
				}
				break;
			case 2:
				_localctx = new Argument_with_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 848;
				((Argument_with_defaultContext)_localctx).name = Match(VARIABLE);
				State = 849;
				Match(COLON);
				State = 850;
				((Argument_with_defaultContext)_localctx).val = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 92, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 853;
				function_statement();
				}
				}
				State = 858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_conditionalContext fn_level_conditional() {
			return GetRuleContext<Fn_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_returnContext fn_return() {
			return GetRuleContext<Fn_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Each_loopContext each_loop() {
			return GetRuleContext<Each_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public Function_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_statementContext function_statement() {
		Function_statementContext _localctx = new Function_statementContext(Context, State);
		EnterRule(_localctx, 94, RULE_function_statement);
		try {
			State = 865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 859;
				var_decl();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860;
				fn_level_conditional();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 861;
				fn_return();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 862;
				for_loop();
				}
				break;
			case EACH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 863;
				each_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 864;
				while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_conditionalContext : ParserRuleContext {
		public ExpressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_conditionalContext fn_level_conditional() {
		Fn_level_conditionalContext _localctx = new Fn_level_conditionalContext(Context, State);
		EnterRule(_localctx, 96, RULE_fn_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			Match(PRE_IF);
			State = 868;
			_localctx.cond = expression(0);
			State = 869;
			Match(LEFT_BRACE);
			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 870;
				_localctx.body = function_statement();
				}
				}
				State = 875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 876;
			Match(RIGHT_BRACE);
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 877;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_elseContext fn_level_else_else() {
			return GetRuleContext<Fn_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_ifContext fn_level_else_if() {
			return GetRuleContext<Fn_level_else_ifContext>(0);
		}
		public Fn_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_elseContext fn_level_else() {
		Fn_level_elseContext _localctx = new Fn_level_elseContext(Context, State);
		EnterRule(_localctx, 98, RULE_fn_level_else);
		try {
			State = 882;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 880;
				fn_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 881;
				fn_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_elseContext : ParserRuleContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Fn_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_elseContext fn_level_else_else() {
		Fn_level_else_elseContext _localctx = new Fn_level_else_elseContext(Context, State);
		EnterRule(_localctx, 100, RULE_fn_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			Match(PRE_ELSE);
			State = 885;
			Match(LEFT_BRACE);
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 886;
				_localctx.body = function_statement();
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 892;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_ifContext : ParserRuleContext {
		public ExpressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_ifContext fn_level_else_if() {
		Fn_level_else_ifContext _localctx = new Fn_level_else_ifContext(Context, State);
		EnterRule(_localctx, 102, RULE_fn_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			Match(PRE_ELSE_IF);
			State = 895;
			_localctx.cond = expression(0);
			State = 896;
			Match(LEFT_BRACE);
			State = 900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 897;
				_localctx.body = function_statement();
				}
				}
				State = 902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 903;
			Match(RIGHT_BRACE);
			State = 905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 904;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(sassy_parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Fn_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_returnContext fn_return() {
		Fn_returnContext _localctx = new Fn_returnContext(Context, State);
		EnterRule(_localctx, 104, RULE_fn_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(RETURN);
			State = 908;
			expression(0);
			State = 909;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_includeContext : ParserRuleContext {
		public IToken mixin;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(sassy_parser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Mixin_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_include(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_includeContext mixin_include() {
		Mixin_includeContext _localctx = new Mixin_includeContext(Context, State);
		EnterRule(_localctx, 106, RULE_mixin_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(INCLUDE);
			State = 912;
			_localctx.mixin = Match(ELEMENT);
			State = 913;
			Match(LEFT_PAREN);
			State = 914;
			_localctx.args = argument_list();
			State = 915;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
	 
		public For_loopContext() { }
		public virtual void CopyFrom(For_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class For_to_loopContext : For_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(sassy_parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public For_to_loopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFor_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFor_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_to_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class For_through_loopContext : For_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(sassy_parser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public For_through_loopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFor_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFor_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_through_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 108, RULE_for_loop);
		int _la;
		try {
			State = 947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				_localctx = new For_to_loopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 917;
				Match(FOR);
				State = 918;
				((For_to_loopContext)_localctx).idx = Match(VARIABLE);
				State = 919;
				Match(FROM);
				State = 920;
				((For_to_loopContext)_localctx).for_start = expression(0);
				State = 921;
				Match(TO);
				State = 922;
				((For_to_loopContext)_localctx).end = expression(0);
				State = 923;
				Match(LEFT_BRACE);
				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 924;
					((For_to_loopContext)_localctx).body = function_statement();
					}
					}
					State = 929;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 930;
				Match(RIGHT_BRACE);
				}
				break;
			case 2:
				_localctx = new For_through_loopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 932;
				Match(FOR);
				State = 933;
				((For_through_loopContext)_localctx).idx = Match(VARIABLE);
				State = 934;
				Match(FROM);
				State = 935;
				((For_through_loopContext)_localctx).for_start = expression(0);
				State = 936;
				Match(THROUGH);
				State = 937;
				((For_through_loopContext)_localctx).end = expression(0);
				State = 938;
				Match(LEFT_BRACE);
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
					{
					{
					State = 939;
					((For_through_loopContext)_localctx).body = function_statement();
					}
					}
					State = 944;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 945;
				Match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_for_loopContext : ParserRuleContext {
		public Top_level_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_for_loop; } }
	 
		public Top_level_for_loopContext() { }
		public virtual void CopyFrom(Top_level_for_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Top_level_for_through_loopContext : Top_level_for_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(sassy_parser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_for_through_loopContext(Top_level_for_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_for_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_for_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_for_through_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Top_level_for_to_loopContext : Top_level_for_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(sassy_parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_for_to_loopContext(Top_level_for_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_for_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_for_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_for_to_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_for_loopContext top_level_for_loop() {
		Top_level_for_loopContext _localctx = new Top_level_for_loopContext(Context, State);
		EnterRule(_localctx, 110, RULE_top_level_for_loop);
		int _la;
		try {
			State = 979;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				_localctx = new Top_level_for_to_loopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 949;
				Match(FOR);
				State = 950;
				((Top_level_for_to_loopContext)_localctx).idx = Match(VARIABLE);
				State = 951;
				Match(FROM);
				State = 952;
				((Top_level_for_to_loopContext)_localctx).for_start = expression(0);
				State = 953;
				Match(TO);
				State = 954;
				((Top_level_for_to_loopContext)_localctx).end = expression(0);
				State = 955;
				Match(LEFT_BRACE);
				State = 959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
					{
					{
					State = 956;
					((Top_level_for_to_loopContext)_localctx).body = top_level_statement();
					}
					}
					State = 961;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 962;
				Match(RIGHT_BRACE);
				}
				break;
			case 2:
				_localctx = new Top_level_for_through_loopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 964;
				Match(FOR);
				State = 965;
				((Top_level_for_through_loopContext)_localctx).idx = Match(VARIABLE);
				State = 966;
				Match(FROM);
				State = 967;
				((Top_level_for_through_loopContext)_localctx).for_start = expression(0);
				State = 968;
				Match(THROUGH);
				State = 969;
				((Top_level_for_through_loopContext)_localctx).end = expression(0);
				State = 970;
				Match(LEFT_BRACE);
				State = 974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
					{
					{
					State = 971;
					((Top_level_for_through_loopContext)_localctx).body = top_level_statement();
					}
					}
					State = 976;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 977;
				Match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_for_loopContext : ParserRuleContext {
		public Sel_level_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_for_loop; } }
	 
		public Sel_level_for_loopContext() { }
		public virtual void CopyFrom(Sel_level_for_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sel_level_for_through_loopContext : Sel_level_for_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(sassy_parser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_for_through_loopContext(Sel_level_for_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_for_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_for_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_for_through_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_level_for_to_loopContext : Sel_level_for_loopContext {
		public IToken idx;
		public ExpressionContext for_start;
		public ExpressionContext end;
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(sassy_parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_for_to_loopContext(Sel_level_for_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_for_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_for_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_for_to_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_for_loopContext sel_level_for_loop() {
		Sel_level_for_loopContext _localctx = new Sel_level_for_loopContext(Context, State);
		EnterRule(_localctx, 112, RULE_sel_level_for_loop);
		int _la;
		try {
			State = 1011;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				_localctx = new Sel_level_for_to_loopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 981;
				Match(FOR);
				State = 982;
				((Sel_level_for_to_loopContext)_localctx).idx = Match(VARIABLE);
				State = 983;
				Match(FROM);
				State = 984;
				((Sel_level_for_to_loopContext)_localctx).for_start = expression(0);
				State = 985;
				Match(TO);
				State = 986;
				((Sel_level_for_to_loopContext)_localctx).end = expression(0);
				State = 987;
				Match(LEFT_BRACE);
				State = 991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
					{
					{
					State = 988;
					((Sel_level_for_to_loopContext)_localctx).body = selector_statement();
					}
					}
					State = 993;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 994;
				Match(RIGHT_BRACE);
				}
				break;
			case 2:
				_localctx = new Sel_level_for_through_loopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 996;
				Match(FOR);
				State = 997;
				((Sel_level_for_through_loopContext)_localctx).idx = Match(VARIABLE);
				State = 998;
				Match(FROM);
				State = 999;
				((Sel_level_for_through_loopContext)_localctx).for_start = expression(0);
				State = 1000;
				Match(THROUGH);
				State = 1001;
				((Sel_level_for_through_loopContext)_localctx).end = expression(0);
				State = 1002;
				Match(LEFT_BRACE);
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
					{
					{
					State = 1003;
					((Sel_level_for_through_loopContext)_localctx).body = selector_statement();
					}
					}
					State = 1008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1009;
				Match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Each_loopContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ExpressionContext iter;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(sassy_parser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(sassy_parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(sassy_parser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(sassy_parser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Each_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_each_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEach_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Each_loopContext each_loop() {
		Each_loopContext _localctx = new Each_loopContext(Context, State);
		EnterRule(_localctx, 114, RULE_each_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			Match(EACH);
			State = 1016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 1014;
				_localctx.key = Match(VARIABLE);
				State = 1015;
				Match(COMMA);
				}
				break;
			}
			State = 1018;
			_localctx.val = Match(VARIABLE);
			State = 1019;
			Match(IN);
			State = 1020;
			_localctx.iter = expression(0);
			State = 1021;
			Match(LEFT_BRACE);
			State = 1025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 1022;
				_localctx.body = function_statement();
				}
				}
				State = 1027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1028;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_each_loopContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ExpressionContext iter;
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(sassy_parser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(sassy_parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(sassy_parser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(sassy_parser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_each_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_each_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_each_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_each_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_each_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_each_loopContext top_level_each_loop() {
		Top_level_each_loopContext _localctx = new Top_level_each_loopContext(Context, State);
		EnterRule(_localctx, 116, RULE_top_level_each_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030;
			Match(EACH);
			State = 1033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 1031;
				_localctx.key = Match(VARIABLE);
				State = 1032;
				Match(COMMA);
				}
				break;
			}
			State = 1035;
			_localctx.val = Match(VARIABLE);
			State = 1036;
			Match(IN);
			State = 1037;
			_localctx.iter = expression(0);
			State = 1038;
			Match(LEFT_BRACE);
			State = 1042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 1039;
				_localctx.body = top_level_statement();
				}
				}
				State = 1044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1045;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_each_loopContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ExpressionContext iter;
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(sassy_parser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(sassy_parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(sassy_parser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(sassy_parser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_each_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_each_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_each_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_each_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_each_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_each_loopContext sel_level_each_loop() {
		Sel_level_each_loopContext _localctx = new Sel_level_each_loopContext(Context, State);
		EnterRule(_localctx, 118, RULE_sel_level_each_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047;
			Match(EACH);
			State = 1050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 1048;
				_localctx.key = Match(VARIABLE);
				State = 1049;
				Match(COMMA);
				}
				break;
			}
			State = 1052;
			_localctx.val = Match(VARIABLE);
			State = 1053;
			Match(IN);
			State = 1054;
			_localctx.iter = expression(0);
			State = 1055;
			Match(LEFT_BRACE);
			State = 1059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 1056;
				_localctx.body = selector_statement();
				}
				}
				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1062;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		public ExpressionContext cond;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(sassy_parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 120, RULE_while_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064;
			Match(WHILE);
			State = 1065;
			_localctx.cond = expression(0);
			State = 1066;
			Match(LEFT_BRACE);
			State = 1070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4212256L) != 0) || _la==VARIABLE) {
				{
				{
				State = 1067;
				_localctx.body = function_statement();
				}
				}
				State = 1072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1073;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_while_loopContext : ParserRuleContext {
		public ExpressionContext cond;
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(sassy_parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_while_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_while_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_while_loopContext top_level_while_loop() {
		Top_level_while_loopContext _localctx = new Top_level_while_loopContext(Context, State);
		EnterRule(_localctx, 122, RULE_top_level_while_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			Match(WHILE);
			State = 1076;
			_localctx.cond = expression(0);
			State = 1077;
			Match(LEFT_BRACE);
			State = 1081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737895827256L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7805L) != 0)) {
				{
				{
				State = 1078;
				_localctx.body = top_level_statement();
				}
				}
				State = 1083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1084;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_while_loopContext : ParserRuleContext {
		public ExpressionContext cond;
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(sassy_parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_while_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_while_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_while_loopContext sel_level_while_loop() {
		Sel_level_while_loopContext _localctx = new Sel_level_while_loopContext(Context, State);
		EnterRule(_localctx, 124, RULE_sel_level_while_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			Match(WHILE);
			State = 1087;
			_localctx.cond = expression(0);
			State = 1088;
			Match(LEFT_BRACE);
			State = 1092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576504737083377184L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7807L) != 0)) {
				{
				{
				State = 1089;
				_localctx.body = selector_statement();
				}
				}
				State = 1094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1095;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return selector_sempred((SelectorContext)_localctx, predIndex);
		case 22: return selector_no_children_sempred((Selector_no_childrenContext)_localctx, predIndex);
		case 34: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 36: return require_expression_sempred((Require_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selector_sempred(SelectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		}
		return true;
	}
	private bool selector_no_children_sempred(Selector_no_childrenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 5);
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		case 19: return Precpred(Context, 17);
		case 20: return Precpred(Context, 16);
		case 21: return Precpred(Context, 15);
		}
		return true;
	}
	private bool require_expression_sempred(Require_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 4);
		case 23: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,77,1098,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,4,0,128,
		8,0,11,0,12,0,129,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,3,1,147,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,5,3,156,8,3,10,3,12,3,
		159,9,3,1,4,1,4,3,4,163,8,4,1,5,1,5,1,5,1,5,1,6,1,6,5,6,171,8,6,10,6,12,
		6,174,9,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,182,8,6,10,6,12,6,185,9,6,1,6,1,
		6,1,6,1,6,1,6,1,6,5,6,193,8,6,10,6,12,6,196,9,6,1,6,1,6,1,6,1,6,1,6,1,
		6,5,6,204,8,6,10,6,12,6,207,9,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,215,8,6,10,
		6,12,6,218,9,6,1,6,1,6,1,6,1,6,3,6,224,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,241,8,7,10,7,12,7,244,9,7,1,7,1,7,
		1,7,3,7,249,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,277,8,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,3,10,287,8,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
		13,1,13,1,13,5,13,311,8,13,10,13,12,13,314,9,13,1,13,1,13,3,13,318,8,13,
		1,14,1,14,3,14,322,8,14,1,15,1,15,1,15,5,15,327,8,15,10,15,12,15,330,9,
		15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,338,8,16,10,16,12,16,341,9,16,1,
		16,1,16,3,16,345,8,16,1,17,1,17,1,17,1,17,1,17,1,18,5,18,353,8,18,10,18,
		12,18,356,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,366,8,19,1,
		20,1,20,1,20,1,20,5,20,372,8,20,10,20,12,20,375,9,20,3,20,377,8,20,1,20,
		1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,390,8,21,10,21,
		12,21,393,9,21,1,21,1,21,1,21,1,21,1,21,5,21,400,8,21,10,21,12,21,403,
		9,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,428,8,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,438,8,21,10,21,12,21,441,9,21,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,452,8,22,10,22,12,22,455,
		9,22,1,22,1,22,1,22,1,22,1,22,5,22,462,8,22,10,22,12,22,465,9,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,3,22,488,8,22,1,22,1,22,1,22,1,22,1,22,5,
		22,495,8,22,10,22,12,22,498,9,22,1,23,5,23,501,8,23,10,23,12,23,504,9,
		23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,517,8,24,
		1,25,1,25,1,25,1,25,5,25,523,8,25,10,25,12,25,526,9,25,1,25,1,25,3,25,
		530,8,25,1,26,1,26,3,26,534,8,26,1,27,1,27,1,27,5,27,539,8,27,10,27,12,
		27,542,9,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,550,8,28,10,28,12,28,553,
		9,28,1,28,1,28,3,28,557,8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,
		31,1,31,1,31,1,32,1,32,5,32,572,8,32,10,32,12,32,575,9,32,1,32,1,32,1,
		32,1,32,1,32,1,32,5,32,583,8,32,10,32,12,32,586,9,32,1,32,1,32,1,32,1,
		32,1,32,1,32,5,32,594,8,32,10,32,12,32,597,9,32,1,32,1,32,1,32,1,32,1,
		32,1,32,5,32,605,8,32,10,32,12,32,608,9,32,1,32,1,32,1,32,1,32,1,32,1,
		32,5,32,616,8,32,10,32,12,32,619,9,32,1,32,1,32,1,32,1,32,3,32,625,8,32,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,634,8,33,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,3,34,656,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,721,8,34,10,
		34,12,34,724,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,743,8,35,1,36,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,3,36,753,8,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,761,8,
		36,10,36,12,36,764,9,36,1,37,1,37,1,37,3,37,769,8,37,1,37,1,37,1,38,3,
		38,774,8,38,1,38,1,38,5,38,778,8,38,10,38,12,38,781,9,38,3,38,783,8,38,
		1,39,1,39,1,39,3,39,788,8,39,1,39,1,39,1,40,3,40,793,8,40,1,40,1,40,5,
		40,797,8,40,10,40,12,40,800,9,40,3,40,802,8,40,1,41,1,41,1,41,1,41,1,41,
		1,41,3,41,810,8,41,1,42,3,42,813,8,42,1,42,1,42,5,42,817,8,42,10,42,12,
		42,820,9,42,3,42,822,8,42,1,42,3,42,825,8,42,1,43,1,43,1,43,1,43,3,43,
		831,8,43,1,44,3,44,834,8,44,1,44,1,44,5,44,838,8,44,10,44,12,44,841,9,
		44,3,44,843,8,44,1,44,3,44,846,8,44,1,45,1,45,1,45,1,45,3,45,852,8,45,
		1,46,5,46,855,8,46,10,46,12,46,858,9,46,1,47,1,47,1,47,1,47,1,47,1,47,
		3,47,866,8,47,1,48,1,48,1,48,1,48,5,48,872,8,48,10,48,12,48,875,9,48,1,
		48,1,48,3,48,879,8,48,1,49,1,49,3,49,883,8,49,1,50,1,50,1,50,5,50,888,
		8,50,10,50,12,50,891,9,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,899,8,51,
		10,51,12,51,902,9,51,1,51,1,51,3,51,906,8,51,1,52,1,52,1,52,1,52,1,53,
		1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,
		926,8,54,10,54,12,54,929,9,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
		1,54,1,54,5,54,941,8,54,10,54,12,54,944,9,54,1,54,1,54,3,54,948,8,54,1,
		55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,958,8,55,10,55,12,55,961,9,
		55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,973,8,55,10,
		55,12,55,976,9,55,1,55,1,55,3,55,980,8,55,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,5,56,990,8,56,10,56,12,56,993,9,56,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,56,5,56,1005,8,56,10,56,12,56,1008,9,56,1,56,1,56,
		3,56,1012,8,56,1,57,1,57,1,57,3,57,1017,8,57,1,57,1,57,1,57,1,57,1,57,
		5,57,1024,8,57,10,57,12,57,1027,9,57,1,57,1,57,1,58,1,58,1,58,3,58,1034,
		8,58,1,58,1,58,1,58,1,58,1,58,5,58,1041,8,58,10,58,12,58,1044,9,58,1,58,
		1,58,1,59,1,59,1,59,3,59,1051,8,59,1,59,1,59,1,59,1,59,1,59,5,59,1058,
		8,59,10,59,12,59,1061,9,59,1,59,1,59,1,60,1,60,1,60,1,60,5,60,1069,8,60,
		10,60,12,60,1072,9,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,1080,8,61,10,
		61,12,61,1083,9,61,1,61,1,61,1,62,1,62,1,62,1,62,5,62,1091,8,62,10,62,
		12,62,1094,9,62,1,62,1,62,1,62,0,4,42,44,68,72,63,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,0,0,1231,0,127,1,0,0,0,2,146,1,0,0,0,4,
		148,1,0,0,0,6,152,1,0,0,0,8,162,1,0,0,0,10,164,1,0,0,0,12,223,1,0,0,0,
		14,248,1,0,0,0,16,250,1,0,0,0,18,276,1,0,0,0,20,286,1,0,0,0,22,288,1,0,
		0,0,24,297,1,0,0,0,26,306,1,0,0,0,28,321,1,0,0,0,30,323,1,0,0,0,32,333,
		1,0,0,0,34,346,1,0,0,0,36,354,1,0,0,0,38,365,1,0,0,0,40,367,1,0,0,0,42,
		427,1,0,0,0,44,487,1,0,0,0,46,502,1,0,0,0,48,516,1,0,0,0,50,518,1,0,0,
		0,52,533,1,0,0,0,54,535,1,0,0,0,56,545,1,0,0,0,58,558,1,0,0,0,60,562,1,
		0,0,0,62,565,1,0,0,0,64,624,1,0,0,0,66,633,1,0,0,0,68,655,1,0,0,0,70,742,
		1,0,0,0,72,752,1,0,0,0,74,765,1,0,0,0,76,782,1,0,0,0,78,784,1,0,0,0,80,
		801,1,0,0,0,82,809,1,0,0,0,84,821,1,0,0,0,86,830,1,0,0,0,88,842,1,0,0,
		0,90,851,1,0,0,0,92,856,1,0,0,0,94,865,1,0,0,0,96,867,1,0,0,0,98,882,1,
		0,0,0,100,884,1,0,0,0,102,894,1,0,0,0,104,907,1,0,0,0,106,911,1,0,0,0,
		108,947,1,0,0,0,110,979,1,0,0,0,112,1011,1,0,0,0,114,1013,1,0,0,0,116,
		1030,1,0,0,0,118,1047,1,0,0,0,120,1064,1,0,0,0,122,1075,1,0,0,0,124,1086,
		1,0,0,0,126,128,3,2,1,0,127,126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,
		0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,5,0,0,1,132,1,1,0,0,0,133,147,
		3,10,5,0,134,147,3,12,6,0,135,147,3,14,7,0,136,147,3,22,11,0,137,147,3,
		24,12,0,138,147,3,26,13,0,139,147,3,34,17,0,140,147,3,4,2,0,141,147,3,
		16,8,0,142,147,3,18,9,0,143,147,3,110,55,0,144,147,3,116,58,0,145,147,
		3,122,61,0,146,133,1,0,0,0,146,134,1,0,0,0,146,135,1,0,0,0,146,136,1,0,
		0,0,146,137,1,0,0,0,146,138,1,0,0,0,146,139,1,0,0,0,146,140,1,0,0,0,146,
		141,1,0,0,0,146,142,1,0,0,0,146,143,1,0,0,0,146,144,1,0,0,0,146,145,1,
		0,0,0,147,3,1,0,0,0,148,149,5,23,0,0,149,150,3,6,3,0,150,151,5,36,0,0,
		151,5,1,0,0,0,152,157,3,8,4,0,153,154,5,42,0,0,154,156,3,8,4,0,155,153,
		1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,7,1,0,0,0,
		159,157,1,0,0,0,160,163,5,65,0,0,161,163,5,77,0,0,162,160,1,0,0,0,162,
		161,1,0,0,0,163,9,1,0,0,0,164,165,5,3,0,0,165,166,3,8,4,0,166,167,5,36,
		0,0,167,11,1,0,0,0,168,172,5,71,0,0,169,171,3,66,33,0,170,169,1,0,0,0,
		171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,
		1,0,0,0,175,176,5,37,0,0,176,177,3,68,34,0,177,178,5,36,0,0,178,224,1,
		0,0,0,179,183,5,71,0,0,180,182,3,66,33,0,181,180,1,0,0,0,182,185,1,0,0,
		0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,183,1,0,0,0,186,
		187,5,38,0,0,187,188,3,68,34,0,188,189,5,36,0,0,189,224,1,0,0,0,190,194,
		5,71,0,0,191,193,3,66,33,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,
		0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,198,5,39,0,0,198,
		199,3,68,34,0,199,200,5,36,0,0,200,224,1,0,0,0,201,205,5,71,0,0,202,204,
		3,66,33,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,
		0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,40,0,0,209,210,3,68,34,0,
		210,211,5,36,0,0,211,224,1,0,0,0,212,216,5,71,0,0,213,215,3,66,33,0,214,
		213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,
		0,0,0,218,216,1,0,0,0,219,220,5,41,0,0,220,221,3,68,34,0,221,222,5,36,
		0,0,222,224,1,0,0,0,223,168,1,0,0,0,223,179,1,0,0,0,223,190,1,0,0,0,223,
		201,1,0,0,0,223,212,1,0,0,0,224,13,1,0,0,0,225,226,5,20,0,0,226,227,3,
		8,4,0,227,228,5,36,0,0,228,249,1,0,0,0,229,230,5,20,0,0,230,231,3,8,4,
		0,231,232,5,37,0,0,232,233,5,27,0,0,233,234,5,36,0,0,234,249,1,0,0,0,235,
		236,5,20,0,0,236,237,3,8,4,0,237,238,5,37,0,0,238,242,5,30,0,0,239,241,
		3,20,10,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,
		0,0,243,245,1,0,0,0,244,242,1,0,0,0,245,246,5,31,0,0,246,247,5,36,0,0,
		247,249,1,0,0,0,248,225,1,0,0,0,248,229,1,0,0,0,248,235,1,0,0,0,249,15,
		1,0,0,0,250,251,5,28,0,0,251,252,3,8,4,0,252,253,5,42,0,0,253,254,3,8,
		4,0,254,255,5,37,0,0,255,256,3,68,34,0,256,257,5,36,0,0,257,17,1,0,0,0,
		258,259,5,29,0,0,259,260,3,68,34,0,260,261,5,42,0,0,261,262,3,8,4,0,262,
		263,5,42,0,0,263,264,3,8,4,0,264,265,5,37,0,0,265,266,3,68,34,0,266,267,
		5,36,0,0,267,277,1,0,0,0,268,269,5,29,0,0,269,270,3,68,34,0,270,271,5,
		42,0,0,271,272,3,8,4,0,272,273,5,37,0,0,273,274,3,68,34,0,274,275,5,36,
		0,0,275,277,1,0,0,0,276,258,1,0,0,0,276,268,1,0,0,0,277,19,1,0,0,0,278,
		279,5,25,0,0,279,280,3,8,4,0,280,281,5,36,0,0,281,287,1,0,0,0,282,283,
		5,26,0,0,283,284,3,8,4,0,284,285,5,36,0,0,285,287,1,0,0,0,286,278,1,0,
		0,0,286,282,1,0,0,0,287,21,1,0,0,0,288,289,5,4,0,0,289,290,5,77,0,0,290,
		291,5,32,0,0,291,292,3,88,44,0,292,293,5,33,0,0,293,294,5,30,0,0,294,295,
		3,92,46,0,295,296,5,31,0,0,296,23,1,0,0,0,297,298,5,8,0,0,298,299,5,77,
		0,0,299,300,5,32,0,0,300,301,3,88,44,0,301,302,5,33,0,0,302,303,5,30,0,
		0,303,304,3,46,23,0,304,305,5,31,0,0,305,25,1,0,0,0,306,307,5,5,0,0,307,
		308,3,68,34,0,308,312,5,30,0,0,309,311,3,2,1,0,310,309,1,0,0,0,311,314,
		1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,
		0,315,317,5,31,0,0,316,318,3,28,14,0,317,316,1,0,0,0,317,318,1,0,0,0,318,
		27,1,0,0,0,319,322,3,30,15,0,320,322,3,32,16,0,321,319,1,0,0,0,321,320,
		1,0,0,0,322,29,1,0,0,0,323,324,5,6,0,0,324,328,5,30,0,0,325,327,3,2,1,
		0,326,325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,
		331,1,0,0,0,330,328,1,0,0,0,331,332,5,31,0,0,332,31,1,0,0,0,333,334,5,
		7,0,0,334,335,3,68,34,0,335,339,5,30,0,0,336,338,3,2,1,0,337,336,1,0,0,
		0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,
		339,1,0,0,0,342,344,5,31,0,0,343,345,3,28,14,0,344,343,1,0,0,0,344,345,
		1,0,0,0,345,33,1,0,0,0,346,347,3,36,18,0,347,348,5,30,0,0,348,349,3,46,
		23,0,349,350,5,31,0,0,350,35,1,0,0,0,351,353,3,38,19,0,352,351,1,0,0,0,
		353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,354,
		1,0,0,0,357,358,3,42,21,0,358,37,1,0,0,0,359,360,5,18,0,0,360,366,3,72,
		36,0,361,362,5,19,0,0,362,366,3,8,4,0,363,364,5,24,0,0,364,366,3,40,20,
		0,365,359,1,0,0,0,365,361,1,0,0,0,365,363,1,0,0,0,366,39,1,0,0,0,367,376,
		5,32,0,0,368,373,3,68,34,0,369,370,5,42,0,0,370,372,3,68,34,0,371,369,
		1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,377,1,0,0,
		0,375,373,1,0,0,0,376,368,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,
		379,5,33,0,0,379,41,1,0,0,0,380,381,6,21,-1,0,381,428,5,77,0,0,382,428,
		5,65,0,0,383,428,5,69,0,0,384,428,5,70,0,0,385,386,5,69,0,0,386,387,5,
		37,0,0,387,391,5,34,0,0,388,390,3,94,47,0,389,388,1,0,0,0,390,393,1,0,
		0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,
		428,5,35,0,0,395,396,5,70,0,0,396,397,5,37,0,0,397,401,5,34,0,0,398,400,
		3,94,47,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,
		0,0,402,404,1,0,0,0,403,401,1,0,0,0,404,428,5,35,0,0,405,428,5,67,0,0,
		406,428,5,68,0,0,407,428,5,74,0,0,408,428,5,75,0,0,409,428,5,76,0,0,410,
		411,5,32,0,0,411,412,3,42,21,0,412,413,5,33,0,0,413,428,1,0,0,0,414,415,
		5,43,0,0,415,428,5,77,0,0,416,417,5,43,0,0,417,428,5,65,0,0,418,419,5,
		59,0,0,419,428,5,69,0,0,420,421,5,59,0,0,421,428,5,70,0,0,422,423,5,59,
		0,0,423,428,5,67,0,0,424,425,5,59,0,0,425,428,5,68,0,0,426,428,5,45,0,
		0,427,380,1,0,0,0,427,382,1,0,0,0,427,383,1,0,0,0,427,384,1,0,0,0,427,
		385,1,0,0,0,427,395,1,0,0,0,427,405,1,0,0,0,427,406,1,0,0,0,427,407,1,
		0,0,0,427,408,1,0,0,0,427,409,1,0,0,0,427,410,1,0,0,0,427,414,1,0,0,0,
		427,416,1,0,0,0,427,418,1,0,0,0,427,420,1,0,0,0,427,422,1,0,0,0,427,424,
		1,0,0,0,427,426,1,0,0,0,428,439,1,0,0,0,429,430,10,10,0,0,430,431,5,42,
		0,0,431,438,3,44,22,0,432,433,10,9,0,0,433,434,5,49,0,0,434,438,3,44,22,
		0,435,436,10,8,0,0,436,438,3,44,22,0,437,429,1,0,0,0,437,432,1,0,0,0,437,
		435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,43,1,0,
		0,0,441,439,1,0,0,0,442,443,6,22,-1,0,443,488,5,77,0,0,444,488,5,65,0,
		0,445,488,5,69,0,0,446,488,5,70,0,0,447,448,5,69,0,0,448,449,5,37,0,0,
		449,453,5,34,0,0,450,452,3,94,47,0,451,450,1,0,0,0,452,455,1,0,0,0,453,
		451,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,453,1,0,0,0,456,488,5,
		35,0,0,457,458,5,70,0,0,458,459,5,37,0,0,459,463,5,34,0,0,460,462,3,94,
		47,0,461,460,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,
		466,1,0,0,0,465,463,1,0,0,0,466,488,5,35,0,0,467,488,5,67,0,0,468,488,
		5,68,0,0,469,488,5,74,0,0,470,471,5,32,0,0,471,472,3,44,22,0,472,473,5,
		33,0,0,473,488,1,0,0,0,474,475,5,43,0,0,475,488,5,77,0,0,476,477,5,43,
		0,0,477,488,5,65,0,0,478,479,5,59,0,0,479,488,5,69,0,0,480,481,5,59,0,
		0,481,488,5,70,0,0,482,483,5,59,0,0,483,488,5,67,0,0,484,485,5,59,0,0,
		485,488,5,68,0,0,486,488,5,45,0,0,487,442,1,0,0,0,487,444,1,0,0,0,487,
		445,1,0,0,0,487,446,1,0,0,0,487,447,1,0,0,0,487,457,1,0,0,0,487,467,1,
		0,0,0,487,468,1,0,0,0,487,469,1,0,0,0,487,470,1,0,0,0,487,474,1,0,0,0,
		487,476,1,0,0,0,487,478,1,0,0,0,487,480,1,0,0,0,487,482,1,0,0,0,487,484,
		1,0,0,0,487,486,1,0,0,0,488,496,1,0,0,0,489,490,10,9,0,0,490,491,5,42,
		0,0,491,495,3,44,22,10,492,493,10,8,0,0,493,495,3,44,22,9,494,489,1,0,
		0,0,494,492,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,
		45,1,0,0,0,498,496,1,0,0,0,499,501,3,48,24,0,500,499,1,0,0,0,501,504,1,
		0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,47,1,0,0,0,504,502,1,0,0,0,505,
		517,3,12,6,0,506,517,3,50,25,0,507,517,3,118,59,0,508,517,3,124,62,0,509,
		517,3,112,56,0,510,517,3,58,29,0,511,517,3,60,30,0,512,517,3,62,31,0,513,
		517,3,64,32,0,514,517,3,34,17,0,515,517,3,106,53,0,516,505,1,0,0,0,516,
		506,1,0,0,0,516,507,1,0,0,0,516,508,1,0,0,0,516,509,1,0,0,0,516,510,1,
		0,0,0,516,511,1,0,0,0,516,512,1,0,0,0,516,513,1,0,0,0,516,514,1,0,0,0,
		516,515,1,0,0,0,517,49,1,0,0,0,518,519,5,5,0,0,519,520,3,68,34,0,520,524,
		5,30,0,0,521,523,3,48,24,0,522,521,1,0,0,0,523,526,1,0,0,0,524,522,1,0,
		0,0,524,525,1,0,0,0,525,527,1,0,0,0,526,524,1,0,0,0,527,529,5,31,0,0,528,
		530,3,52,26,0,529,528,1,0,0,0,529,530,1,0,0,0,530,51,1,0,0,0,531,534,3,
		54,27,0,532,534,3,56,28,0,533,531,1,0,0,0,533,532,1,0,0,0,534,53,1,0,0,
		0,535,536,5,6,0,0,536,540,5,30,0,0,537,539,3,48,24,0,538,537,1,0,0,0,539,
		542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,543,1,0,0,0,542,540,1,
		0,0,0,543,544,5,31,0,0,544,55,1,0,0,0,545,546,5,7,0,0,546,547,3,68,34,
		0,547,551,5,30,0,0,548,550,3,48,24,0,549,548,1,0,0,0,550,553,1,0,0,0,551,
		549,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,551,1,0,0,0,554,556,5,
		31,0,0,555,557,3,52,26,0,556,555,1,0,0,0,556,557,1,0,0,0,557,57,1,0,0,
		0,558,559,5,16,0,0,559,560,3,68,34,0,560,561,5,36,0,0,561,59,1,0,0,0,562,
		563,5,66,0,0,563,564,5,36,0,0,564,61,1,0,0,0,565,566,5,17,0,0,566,567,
		3,68,34,0,567,568,5,36,0,0,568,63,1,0,0,0,569,573,3,8,4,0,570,572,3,66,
		33,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,
		576,1,0,0,0,575,573,1,0,0,0,576,577,5,37,0,0,577,578,3,68,34,0,578,579,
		5,36,0,0,579,625,1,0,0,0,580,584,3,8,4,0,581,583,3,66,33,0,582,581,1,0,
		0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,586,
		584,1,0,0,0,587,588,5,38,0,0,588,589,3,68,34,0,589,590,5,36,0,0,590,625,
		1,0,0,0,591,595,3,8,4,0,592,594,3,66,33,0,593,592,1,0,0,0,594,597,1,0,
		0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,
		599,5,39,0,0,599,600,3,68,34,0,600,601,5,36,0,0,601,625,1,0,0,0,602,606,
		3,8,4,0,603,605,3,66,33,0,604,603,1,0,0,0,605,608,1,0,0,0,606,604,1,0,
		0,0,606,607,1,0,0,0,607,609,1,0,0,0,608,606,1,0,0,0,609,610,5,41,0,0,610,
		611,3,68,34,0,611,612,5,36,0,0,612,625,1,0,0,0,613,617,3,8,4,0,614,616,
		3,66,33,0,615,614,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,
		0,0,618,620,1,0,0,0,619,617,1,0,0,0,620,621,5,40,0,0,621,622,3,68,34,0,
		622,623,5,36,0,0,623,625,1,0,0,0,624,569,1,0,0,0,624,580,1,0,0,0,624,591,
		1,0,0,0,624,602,1,0,0,0,624,613,1,0,0,0,625,65,1,0,0,0,626,627,5,34,0,
		0,627,628,3,68,34,0,628,629,5,35,0,0,629,634,1,0,0,0,630,631,5,34,0,0,
		631,632,5,45,0,0,632,634,5,35,0,0,633,626,1,0,0,0,633,630,1,0,0,0,634,
		67,1,0,0,0,635,636,6,34,-1,0,636,637,5,77,0,0,637,638,5,32,0,0,638,639,
		3,84,42,0,639,640,5,33,0,0,640,656,1,0,0,0,641,656,3,70,35,0,642,656,5,
		71,0,0,643,656,5,72,0,0,644,656,5,73,0,0,645,646,5,32,0,0,646,647,3,68,
		34,0,647,648,5,33,0,0,648,656,1,0,0,0,649,650,5,44,0,0,650,656,3,68,34,
		20,651,652,5,43,0,0,652,656,3,68,34,19,653,654,5,48,0,0,654,656,3,68,34,
		18,655,635,1,0,0,0,655,641,1,0,0,0,655,642,1,0,0,0,655,643,1,0,0,0,655,
		644,1,0,0,0,655,645,1,0,0,0,655,649,1,0,0,0,655,651,1,0,0,0,655,653,1,
		0,0,0,656,722,1,0,0,0,657,658,10,14,0,0,658,659,5,45,0,0,659,721,3,68,
		34,15,660,661,10,13,0,0,661,662,5,46,0,0,662,721,3,68,34,14,663,664,10,
		12,0,0,664,665,5,47,0,0,665,721,3,68,34,13,666,667,10,11,0,0,667,668,5,
		43,0,0,668,721,3,68,34,12,669,670,10,10,0,0,670,671,5,44,0,0,671,721,3,
		68,34,11,672,673,10,9,0,0,673,674,5,49,0,0,674,721,3,68,34,10,675,676,
		10,8,0,0,676,677,5,51,0,0,677,721,3,68,34,9,678,679,10,7,0,0,679,680,5,
		50,0,0,680,721,3,68,34,8,681,682,10,6,0,0,682,683,5,52,0,0,683,721,3,68,
		34,7,684,685,10,5,0,0,685,686,5,53,0,0,686,721,3,68,34,6,687,688,10,4,
		0,0,688,689,5,54,0,0,689,721,3,68,34,5,690,691,10,3,0,0,691,692,5,55,0,
		0,692,721,3,68,34,4,693,694,10,2,0,0,694,695,5,56,0,0,695,721,3,68,34,
		3,696,697,10,1,0,0,697,698,5,57,0,0,698,699,3,68,34,0,699,700,5,58,0,0,
		700,701,3,68,34,2,701,721,1,0,0,0,702,703,10,17,0,0,703,704,5,37,0,0,704,
		705,5,77,0,0,705,706,5,32,0,0,706,707,3,84,42,0,707,708,5,33,0,0,708,721,
		1,0,0,0,709,710,10,16,0,0,710,711,5,74,0,0,711,712,5,32,0,0,712,713,3,
		84,42,0,713,714,5,33,0,0,714,721,1,0,0,0,715,716,10,15,0,0,716,717,5,34,
		0,0,717,718,3,68,34,0,718,719,5,35,0,0,719,721,1,0,0,0,720,657,1,0,0,0,
		720,660,1,0,0,0,720,663,1,0,0,0,720,666,1,0,0,0,720,669,1,0,0,0,720,672,
		1,0,0,0,720,675,1,0,0,0,720,678,1,0,0,0,720,681,1,0,0,0,720,684,1,0,0,
		0,720,687,1,0,0,0,720,690,1,0,0,0,720,693,1,0,0,0,720,696,1,0,0,0,720,
		702,1,0,0,0,720,709,1,0,0,0,720,715,1,0,0,0,721,724,1,0,0,0,722,720,1,
		0,0,0,722,723,1,0,0,0,723,69,1,0,0,0,724,722,1,0,0,0,725,743,5,66,0,0,
		726,743,5,61,0,0,727,743,5,62,0,0,728,743,5,64,0,0,729,743,5,65,0,0,730,
		743,5,77,0,0,731,743,5,60,0,0,732,733,5,4,0,0,733,734,5,32,0,0,734,735,
		3,88,44,0,735,736,5,33,0,0,736,737,5,30,0,0,737,738,3,92,46,0,738,739,
		5,31,0,0,739,743,1,0,0,0,740,743,3,74,37,0,741,743,3,78,39,0,742,725,1,
		0,0,0,742,726,1,0,0,0,742,727,1,0,0,0,742,728,1,0,0,0,742,729,1,0,0,0,
		742,730,1,0,0,0,742,731,1,0,0,0,742,732,1,0,0,0,742,740,1,0,0,0,742,741,
		1,0,0,0,743,71,1,0,0,0,744,745,6,36,-1,0,745,746,5,32,0,0,746,747,3,72,
		36,0,747,748,5,33,0,0,748,753,1,0,0,0,749,750,5,48,0,0,750,753,3,72,36,
		2,751,753,3,8,4,0,752,744,1,0,0,0,752,749,1,0,0,0,752,751,1,0,0,0,753,
		762,1,0,0,0,754,755,10,4,0,0,755,756,5,55,0,0,756,761,3,72,36,5,757,758,
		10,3,0,0,758,759,5,56,0,0,759,761,3,72,36,4,760,754,1,0,0,0,760,757,1,
		0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,73,1,0,0,0,764,
		762,1,0,0,0,765,766,5,34,0,0,766,768,3,76,38,0,767,769,5,42,0,0,768,767,
		1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,5,35,0,0,771,75,1,0,0,
		0,772,774,3,68,34,0,773,772,1,0,0,0,773,774,1,0,0,0,774,779,1,0,0,0,775,
		776,5,42,0,0,776,778,3,68,34,0,777,775,1,0,0,0,778,781,1,0,0,0,779,777,
		1,0,0,0,779,780,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,782,773,1,0,0,
		0,782,783,1,0,0,0,783,77,1,0,0,0,784,785,5,30,0,0,785,787,3,80,40,0,786,
		788,5,42,0,0,787,786,1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,789,790,5,
		31,0,0,790,79,1,0,0,0,791,793,3,82,41,0,792,791,1,0,0,0,792,793,1,0,0,
		0,793,798,1,0,0,0,794,795,5,42,0,0,795,797,3,82,41,0,796,794,1,0,0,0,797,
		800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,802,1,0,0,0,800,798,1,
		0,0,0,801,792,1,0,0,0,801,802,1,0,0,0,802,81,1,0,0,0,803,804,5,77,0,0,
		804,805,5,37,0,0,805,810,3,68,34,0,806,807,5,65,0,0,807,808,5,37,0,0,808,
		810,3,68,34,0,809,803,1,0,0,0,809,806,1,0,0,0,810,83,1,0,0,0,811,813,3,
		86,43,0,812,811,1,0,0,0,812,813,1,0,0,0,813,818,1,0,0,0,814,815,5,42,0,
		0,815,817,3,86,43,0,816,814,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,
		819,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,821,812,1,0,0,0,821,822,1,
		0,0,0,822,824,1,0,0,0,823,825,5,42,0,0,824,823,1,0,0,0,824,825,1,0,0,0,
		825,85,1,0,0,0,826,827,5,71,0,0,827,828,5,37,0,0,828,831,3,68,34,0,829,
		831,3,68,34,0,830,826,1,0,0,0,830,829,1,0,0,0,831,87,1,0,0,0,832,834,3,
		90,45,0,833,832,1,0,0,0,833,834,1,0,0,0,834,839,1,0,0,0,835,836,5,42,0,
		0,836,838,3,90,45,0,837,835,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,
		840,1,0,0,0,840,843,1,0,0,0,841,839,1,0,0,0,842,833,1,0,0,0,842,843,1,
		0,0,0,843,845,1,0,0,0,844,846,5,42,0,0,845,844,1,0,0,0,845,846,1,0,0,0,
		846,89,1,0,0,0,847,852,5,71,0,0,848,849,5,71,0,0,849,850,5,37,0,0,850,
		852,3,68,34,0,851,847,1,0,0,0,851,848,1,0,0,0,852,91,1,0,0,0,853,855,3,
		94,47,0,854,853,1,0,0,0,855,858,1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,
		0,857,93,1,0,0,0,858,856,1,0,0,0,859,866,3,12,6,0,860,866,3,96,48,0,861,
		866,3,104,52,0,862,866,3,108,54,0,863,866,3,114,57,0,864,866,3,120,60,
		0,865,859,1,0,0,0,865,860,1,0,0,0,865,861,1,0,0,0,865,862,1,0,0,0,865,
		863,1,0,0,0,865,864,1,0,0,0,866,95,1,0,0,0,867,868,5,5,0,0,868,869,3,68,
		34,0,869,873,5,30,0,0,870,872,3,94,47,0,871,870,1,0,0,0,872,875,1,0,0,
		0,873,871,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,873,1,0,0,0,876,
		878,5,31,0,0,877,879,3,98,49,0,878,877,1,0,0,0,878,879,1,0,0,0,879,97,
		1,0,0,0,880,883,3,100,50,0,881,883,3,102,51,0,882,880,1,0,0,0,882,881,
		1,0,0,0,883,99,1,0,0,0,884,885,5,6,0,0,885,889,5,30,0,0,886,888,3,94,47,
		0,887,886,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,0,890,
		892,1,0,0,0,891,889,1,0,0,0,892,893,5,31,0,0,893,101,1,0,0,0,894,895,5,
		7,0,0,895,896,3,68,34,0,896,900,5,30,0,0,897,899,3,94,47,0,898,897,1,0,
		0,0,899,902,1,0,0,0,900,898,1,0,0,0,900,901,1,0,0,0,901,903,1,0,0,0,902,
		900,1,0,0,0,903,905,5,31,0,0,904,906,3,98,49,0,905,904,1,0,0,0,905,906,
		1,0,0,0,906,103,1,0,0,0,907,908,5,22,0,0,908,909,3,68,34,0,909,910,5,36,
		0,0,910,105,1,0,0,0,911,912,5,21,0,0,912,913,5,77,0,0,913,914,5,32,0,0,
		914,915,3,84,42,0,915,916,5,33,0,0,916,107,1,0,0,0,917,918,5,10,0,0,918,
		919,5,71,0,0,919,920,5,11,0,0,920,921,3,68,34,0,921,922,5,13,0,0,922,923,
		3,68,34,0,923,927,5,30,0,0,924,926,3,94,47,0,925,924,1,0,0,0,926,929,1,
		0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,927,1,0,0,0,
		930,931,5,31,0,0,931,948,1,0,0,0,932,933,5,10,0,0,933,934,5,71,0,0,934,
		935,5,11,0,0,935,936,3,68,34,0,936,937,5,12,0,0,937,938,3,68,34,0,938,
		942,5,30,0,0,939,941,3,94,47,0,940,939,1,0,0,0,941,944,1,0,0,0,942,940,
		1,0,0,0,942,943,1,0,0,0,943,945,1,0,0,0,944,942,1,0,0,0,945,946,5,31,0,
		0,946,948,1,0,0,0,947,917,1,0,0,0,947,932,1,0,0,0,948,109,1,0,0,0,949,
		950,5,10,0,0,950,951,5,71,0,0,951,952,5,11,0,0,952,953,3,68,34,0,953,954,
		5,13,0,0,954,955,3,68,34,0,955,959,5,30,0,0,956,958,3,2,1,0,957,956,1,
		0,0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,962,1,0,0,0,
		961,959,1,0,0,0,962,963,5,31,0,0,963,980,1,0,0,0,964,965,5,10,0,0,965,
		966,5,71,0,0,966,967,5,11,0,0,967,968,3,68,34,0,968,969,5,12,0,0,969,970,
		3,68,34,0,970,974,5,30,0,0,971,973,3,2,1,0,972,971,1,0,0,0,973,976,1,0,
		0,0,974,972,1,0,0,0,974,975,1,0,0,0,975,977,1,0,0,0,976,974,1,0,0,0,977,
		978,5,31,0,0,978,980,1,0,0,0,979,949,1,0,0,0,979,964,1,0,0,0,980,111,1,
		0,0,0,981,982,5,10,0,0,982,983,5,71,0,0,983,984,5,11,0,0,984,985,3,68,
		34,0,985,986,5,13,0,0,986,987,3,68,34,0,987,991,5,30,0,0,988,990,3,48,
		24,0,989,988,1,0,0,0,990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,
		994,1,0,0,0,993,991,1,0,0,0,994,995,5,31,0,0,995,1012,1,0,0,0,996,997,
		5,10,0,0,997,998,5,71,0,0,998,999,5,11,0,0,999,1000,3,68,34,0,1000,1001,
		5,12,0,0,1001,1002,3,68,34,0,1002,1006,5,30,0,0,1003,1005,3,48,24,0,1004,
		1003,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,
		1009,1,0,0,0,1008,1006,1,0,0,0,1009,1010,5,31,0,0,1010,1012,1,0,0,0,1011,
		981,1,0,0,0,1011,996,1,0,0,0,1012,113,1,0,0,0,1013,1016,5,14,0,0,1014,
		1015,5,71,0,0,1015,1017,5,42,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,
		1018,1,0,0,0,1018,1019,5,71,0,0,1019,1020,5,15,0,0,1020,1021,3,68,34,0,
		1021,1025,5,30,0,0,1022,1024,3,94,47,0,1023,1022,1,0,0,0,1024,1027,1,0,
		0,0,1025,1023,1,0,0,0,1025,1026,1,0,0,0,1026,1028,1,0,0,0,1027,1025,1,
		0,0,0,1028,1029,5,31,0,0,1029,115,1,0,0,0,1030,1033,5,14,0,0,1031,1032,
		5,71,0,0,1032,1034,5,42,0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,1035,
		1,0,0,0,1035,1036,5,71,0,0,1036,1037,5,15,0,0,1037,1038,3,68,34,0,1038,
		1042,5,30,0,0,1039,1041,3,2,1,0,1040,1039,1,0,0,0,1041,1044,1,0,0,0,1042,
		1040,1,0,0,0,1042,1043,1,0,0,0,1043,1045,1,0,0,0,1044,1042,1,0,0,0,1045,
		1046,5,31,0,0,1046,117,1,0,0,0,1047,1050,5,14,0,0,1048,1049,5,71,0,0,1049,
		1051,5,42,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,0,1052,
		1053,5,71,0,0,1053,1054,5,15,0,0,1054,1055,3,68,34,0,1055,1059,5,30,0,
		0,1056,1058,3,48,24,0,1057,1056,1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,
		0,0,0,1059,1060,1,0,0,0,1060,1062,1,0,0,0,1061,1059,1,0,0,0,1062,1063,
		5,31,0,0,1063,119,1,0,0,0,1064,1065,5,9,0,0,1065,1066,3,68,34,0,1066,1070,
		5,30,0,0,1067,1069,3,94,47,0,1068,1067,1,0,0,0,1069,1072,1,0,0,0,1070,
		1068,1,0,0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,1072,1070,1,0,0,0,1073,
		1074,5,31,0,0,1074,121,1,0,0,0,1075,1076,5,9,0,0,1076,1077,3,68,34,0,1077,
		1081,5,30,0,0,1078,1080,3,2,1,0,1079,1078,1,0,0,0,1080,1083,1,0,0,0,1081,
		1079,1,0,0,0,1081,1082,1,0,0,0,1082,1084,1,0,0,0,1083,1081,1,0,0,0,1084,
		1085,5,31,0,0,1085,123,1,0,0,0,1086,1087,5,9,0,0,1087,1088,3,68,34,0,1088,
		1092,5,30,0,0,1089,1091,3,48,24,0,1090,1089,1,0,0,0,1091,1094,1,0,0,0,
		1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,1095,1,0,0,0,1094,1092,1,0,0,
		0,1095,1096,5,31,0,0,1096,125,1,0,0,0,101,129,146,157,162,172,183,194,
		205,216,223,242,248,276,286,312,317,321,328,339,344,354,365,373,376,391,
		401,427,437,439,453,463,487,494,496,502,516,524,529,533,540,551,556,573,
		584,595,606,617,624,633,655,720,722,742,752,760,762,768,773,779,782,787,
		792,798,801,809,812,818,821,824,830,833,839,842,845,851,856,865,873,878,
		882,889,900,905,927,942,947,959,974,979,991,1006,1011,1016,1025,1033,1042,
		1050,1059,1070,1081,1092
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SassyPatchGrammar
